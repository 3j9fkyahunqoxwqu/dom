<!doctype html>
<title>Web DOM Core</title>
<link rel=stylesheet href=http://www.whatwg.org/style/specification>
<style>
 pre, code { font-family:monospace, sans-serif; }
 h2 code, h3 code, h4 code,
 h2 :link, h3 :link, h4 :link,
 h2 :visited, h3 :visited, h4 :visited
 { font:inherit; color:inherit; font-style:italic; }
 span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 i:not([title]):not([class]):not([id]):not([data-anolis-spec])
 { border-bottom: solid #99CC99; }
 dfn span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn i:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a i:not([title]):not([class]):not([id]):not([data-anolis-spec])
 { border-bottom: none; }
</style>
<body class=draft>
<div class=head id=head>
<h1>Web DOM Core</h1>
<h2 class="no-num no-toc">Work in Progress &mdash; Last Update [DATE: 01 Jan 1901]</h2>
<dl>
 <dt>Editors
 <dd>Simon Pieters &lt;simonp@opera.com>
 <dd>Geoffrey Sneddon &lt;gsneddon@opera.com>
 <dd>Ms2ger &lt;ms2ger@gmail.com>

 <dt>Version history
 <dd><a href=http://bitbucket.org/ms2ger/web-dom-core/>http://bitbucket.org/ms2ger/web-dom-core</a>
 <dd><a href=http://hg.gsnedders.com/web-dom-core>http://hg.gsnedders.com/web-dom-core</a>
 <dd><a href=http://simon.html5.org/specs/web-dom-core>http://simon.html5.org/specs/web-dom-core</a>
</dl>
</div>



<h2 class="no-num no-toc">Issues</h2>

<ul class=XXX>
 <li>innerHTML etc on all Elements / <code class="IDL fragment"><span>Document</span> implements <span data-anolis-spec=html>HTMLDocument</span>;</code>?
  <a href=http://lists.w3.org/Archives/Public/public-html/2007Aug/0778.html>public-html/2007Aug/0778.html</a>,
  <a href=http://lists.w3.org/Archives/Public/public-webapi/2007Aug/0069.html>public-webapi/2007Aug/0069.html</a>,
  <a href=http://lists.w3.org/Archives/Public/public-webapi/2007Aug/0070.html>public-webapi/2007Aug/0070.html</a>
 <li>\0 <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312>http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312</a>
 <li>document.parseError? <a href=http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com>http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com</a>
 <li>sourceIndex? <a href=http://www.quirksmode.org/dom/w3c_core.html>http://www.quirksmode.org/dom/w3c_core.html</a>
 <li>Range.createContextualFragment <a href="http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html">http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html</a>
 <li>[Reflect] <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90>http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90</a>
 <li>Perhaps we should move DOMStringMap to this spec...
 <li class=XXX>http://hg.mozilla.org/mozilla-central/rev/91694d19d7b2
</ul>



<h2 class="no-num no-toc">Abstract</h2>
<p>This specification defines the DOM Core part of the Web platform. The Document Object Model is a language- and platform neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. Web DOM Core mostly subsets DOM3 Core, but redefines some things and adds some features that were widely implemented already.



<h2 class="no-num no-toc">Table of contents</h2>
<!--toc-->



<h2>Common infrastructure</h2>
<h3>Terminology</h3>
<p>The term <dfn>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved (through the <code title=dom-Node-parentNode>parentNode</code>/<code title=dom-Node-childNodes>childNodes</code> relationship).

<p>The term <dfn>context node</dfn> means the <code>Node</code> on which the method or attribute being discussed was called.

<p>The term <dfn>root element</dfn>, when not explicitly qualified
as referring to the document's root element, means the furthest
ancestor element node of whatever node is being discussed, or the
node itself if it has no ancestors. When the node is a part of the
document, then the node's <span>root element</span> is indeed the
document's root element; however, if the node is not currently part
of the document tree, the root element will be an orphaned node.</p>

<p>When an element's <span>root element</span> is the root element
of a <code>Document</code>, it is said to be <dfn>in a
<code>Document</code></dfn>.

<p>A node's <dfn>home subtree</dfn> is the subtree rooted at that
node's <span>root element</span>. When a node is <span>in a
<code>Document</code></span>, its <span>home subtree</span> is that
<code>Document</code>'s tree.

<p>The <dfn title="space character">space characters</dfn>, for the
purposes of this specification, are U+0020 SPACE, U+0009 CHARACTER
TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and
U+000D CARRIAGE RETURN (CR).</p>


<h3>Conformance requirements</h3>
<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.</p>

<p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in the normative parts of this document are to be
interpreted as described in RFC2119. For readability, these words do
not appear in all uppercase letters in this specification. <span
data-anolis-ref>RFC2119</span></p>

<p>Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
abort these steps") are to be interpreted with the meaning of the
key word ("must", "should", "may", etc) used in introducing the
algorithm.</p>

<p>Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)</p>

<p id="hardwareLimitations">User agents may impose
implementation-specific limits on otherwise unconstrained inputs,
e.g. to prevent denial of service attacks, to guard against running
out of memory, or to work around platform-specific limitations.</p>

<p>When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

<p>Unless otherwise stated, string comparisons are done in a <span>case-sensitive</span> manner.

<h4>Dependencies</h4>

<p>The IDL fragments in this specification must be interpreted as
required for conforming IDL fragments, as described in the Web IDL
specification. <span data-anolis-ref>WEBIDL</span>

<p id=float-nan>Except where otherwise specified, if an IDL attribute that is a
floating point number type (<code data-anolis-spec=webidl>float</code>) is
assigned an Infinity or Not-a-Number (NaN) value, a <code
title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception must
be raised.

<p>Except where otherwise specified, if a method with an argument that is a
floating point number type (<code data-anolis-spec=webidl>float</code>) is
passed an Infinity or Not-a-Number (NaN) value, a <code
title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception must
be raised.

<p>Some of the terms used in this specification are defined in <cite>Web
IDL</cite>, <cite>XML</cite>, <cite>Namespaces in XML</cite> and
<cite>HTML</cite>. <span data-anolis-ref>WEBIDL</span> <span
data-anolis-ref>XML</span> <span data-anolis-ref>XMLNS</span> <span
data-anolis-ref>HTML</span>

<h4>Extensibility</h4>

<p>Vendor-specific proprietary extensions to this specification are
strongly discouraged. Authors must not use such extensions, as
doing so reduces interoperability and fragments the user base,
allowing only users of specific user agents to access the content in
question.</p>

<p>If vendor-specific extensions are needed, the members should be
prefixed by vendor-specific strings to prevent clashes with future
versions of this specification. Extensions must be defined so that
the use of extensions neither contradicts nor causes the
non-conformance of functionality defined in the specification.</p>
<!-- thanks to QA Framework -->

<p>When vendor-neutral extensions to this specification are needed,
either this specification can be updated accordingly, or an
extension specification can be written that overrides the
requirements in this specification. When someone applying this
specification to their activities decides that they will recognise
the requirements of such an extension specification, it becomes an
<dfn title="other applicable specifications">applicable
specification</dfn> for the purposes of conformance requirements in
this specification.</p>
<!-- http://www.w3.org/mid/17E341CD-E790-422C-9F9A-69347EE01CEB@iki.fi -->


<h3>Case-sensitivity</h3>
<p>This specification defines several comparison operators for strings.
<p>Comparing two strings in a <dfn>case-sensitive</dfn> manner means comparing them exactly, codepoint for codepoint.
<p>Comparing two strings in a <dfn>ASCII case-insensitive</dfn> manner means comparing them exactly, codepoint for codepoint, except that the characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.
<p><dfn title="converted to uppercase">Converting a string to uppercase</dfn> means replacing all characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).
<p><dfn title="converted to lowercase">Converting a string to lowercase</dfn> means replacing all characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).


<h3>Common microsyntaxes</h3>
<h4>Common parser idioms</h4>
<p>Some of the micro-parsers described below follow the pattern of
having an <var title>input</var> variable that holds the string
being parsed, and having a <var title>position</var> variable
pointing at the next character to parse in <var
title="">input</var>.</p>

<p>For parsers based on this pattern, a step that requires the user
agent to <dfn>collect a sequence of characters</dfn> means that the
following algorithm must be run, with <var title>characters</var>
being the set of characters that can be collected:</p>

<ol>

 <li><p>Let <var title>input</var> and <var
 title="">position</var> be the same variables as those of the same
 name in the algorithm that invoked these steps.</p></li>

 <li><p>Let <var title>result</var> be the empty string.</p></li>

 <li><p>While <var title>position</var> doesn't point past the
 end of <var title>input</var> and the character at <var
 title="">position</var> is one of the <var
 title="">characters</var>, append that character to the end of <var
 title="">result</var> and advance <var title>position</var> to
 the next character in <var title>input</var>.</p></li>

 <li><p>Return <var title>result</var>.</p></li>

</ol>

<p>The step <dfn>skip whitespace</dfn> means that the user agent
must <span>collect a sequence of characters</span> that are <span
title="space character">space characters</span>. The collected
characters are not used.

<h4>Space-separated tokens</h4>
<p>A <dfn>set of space-separated tokens</dfn> is a string containing
zero or more words separated by one or more <span title="space
character">space characters</span>, where words consist of any
string of one or more characters, none of which are <span
title="space character">space characters</span>.</p>

<p>A string containing a <span>set of space-separated tokens</span>
may have leading or trailing <span title="space character">space
characters</span>.</p>

<div class="impl">

<p>When a user agent has to <dfn>split a string on spaces</dfn>, it
must use the following algorithm:</p>

<ol>

 <li><p>Let <var title>input</var> be the string being
 parsed.</p></li>

 <li><p>Let <var title>position</var> be a pointer into <var
 title="">input</var>, initially pointing at the start of the
 string.</p></li>

 <li><p>Let <var title>tokens</var> be a list of tokens,
 initially empty.</p></li>

 <li><p><span>Skip whitespace</span></p></li>

 <li><p>While <var title>position</var> is not past the end of
 <var title>input</var>:</p>

  <ol>

   <li><p><span>Collect a sequence of characters</span> that are not
   <span title="space character">space characters</span>.</p></li>

   <li><p>Add the string collected in the previous step to <var
   title="">tokens</var>.</p></li>

   <li><p><span>Skip whitespace</span></p></li>

  </ol>

 </li>

 <li><p>Return <var title>tokens</var>.</p></li>

</ol>

<p>When a user agent has to <dfn>remove a token from a string</dfn>,
it must use the following algorithm:</p>

<ol>

 <li><p>Let <var title>input</var> be the string being modified.

 <li><p>Let <var title>token</var> be the token being removed. It will not
 contain any <span title="space character">space characters</span>.

 <li><p>Let <var title>output</var> be the output string, initially empty.

 <li><p>Let <var title>position</var> be a pointer into <var title>input</var>,
 initially pointing at the start of the string.

 <li><p><i title>Loop</i>: If <var title>position</var> is beyond the end of
 <var title>input</var>, abort these steps.

 <li>
  <p>If the character at <var title>position</var> is a <span>space
  character</span>:

  <ol>
   <li><p>Append the character at <var title>position</var> to the end of <var
   title>output</var>.

   <li><p>Advance <var title>position</var> so it points at the next character
   in <var title>input</var>.

   <li><p>Return to the step labeled <i title>loop</i>.
  </ol>

 <li><p>Otherwise, the character at <var title>position</var> is the first
 character of a token. <span>Collect a sequence of characters</span> that are
 not <span title="space character">space characters</span>, and let that be <var
 title>s</var>.

 <li>
  <p>If <var title>s</var> is exactly equal to <var title>token</var>, then:

  <ol>
   <li><p><span>Skip whitespace</span> (in <var title>input</var>).

   <li><p>Remove any <span title="space character">space characters</span>
   currently at the end of <var title>output</var>.

   <li><p>If <var title>position</var> is not past the end of <var
   title>input</var>, and <var title>output</var> is not the empty string,
   append a single U+0020 SPACE character at the end of <var title>output</var>.
  </ol>

 <li><p>Otherwise, append <var title>s</var> to the end of <var
 title>output</var>.

 <li><p>Return to the step labeled <i title>loop</i>.</p></li>
</ol>

<p class="note">This causes any occurrences of the token to be
removed from the string, and any spaces that were surrounding the
token to be collapsed to a single space, except at the start and end
of the string, where such spaces are removed.</p>

</div>


<h3>DOM features</h3>
<p class=XXX>Features are ASCII case-insensitive. Empty string means any version.

<p class=XXX>Suggest how specs are to define feature strings.


<h3>Cloning nodes</h3>
<p>When a UA is to <dfn>clone</dfn> a <var title>node</var>, with a <var title>new ownerDocument</var> and with a <var title>clone children</var> flag, it must run the following steps:

<ol>
 <li><p>If <var title>node</var> is a <code>DocumentType</code> node, raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and abort these steps.
 <li>
  <p>Let <var title>copy</var> be a new <code>Node</code> that implements the same interfaces as <var title>node</var>, with <code title=dom-Node-ownerDocument>ownerDocument</code> set to <var title>new ownerDocument</var>, <code title="dom-Node-prefix">prefix</code>, <code title="dom-Node-localName">localName</code> and <code title="dom-Node-namespaceURI">namespaceURI</code> attributes set to the values of the attributes on <var title>node</var> with the same names, and other attributes set to the values of the attributes on <var title>node</var> with the same names depending on the type of <var title>node</var> according to the following table:</p>
  <table>
   <thead>
    <tr><th>Type of <var title>node</var><th>Attributes
   <tbody>
    <tr><td><code>Element</code><td>&mdash;
    <tr><td><code>Attr</code><td><code title=dom-Attr-value>value</code>
    <tr><td><code>Text</code><td><code title=dom-CharacterData-data>data</code>
    <tr><td><code>ProcessingInstruction</code><td><code title=dom-ProcessingInstruction-target>target</code>, <code title=dom-ProcessingInstruction-data>data</code>
    <tr><td><code>Comment</code><td><code title=dom-CharacterData-data>data</code>
    <tr><td><code>DocumentFragment</code><td>&mdash;
  </table>
 <li><p>If <var title>node</var> is an <code>Element</code> node, <span class=XXX>copy its attributes</span>.
 <li><p>If the <var title>clone children</var> flag is set, <span>clone</span> all the children of <var title>node</var> and append them to <var title>copy</var>, with the same <var title>new ownerDocument</var> and the <var title>clone children</var> flag being set.
 <li><p>Return <var title>copy</var>.
</ol>


<h3>Legal hierarchy</h3>
<p>A <code>Node</code> is said to have a <dfn>legal hierarchy</dfn> if all the following conditions are true:

<ul>
 <li><p>The <code>Node</code> is a <code>Document</code> node or an <code>Attr</code> node and has no parent node.
 <li><p>The <code>Node</code> is a <code>Document</code> node and has no child <code>Text</code> nodes.
 <li><p>The <code>Node</code> is a <code>Document</code> node and has no more than one child <code>Element</code> node.
 <li><p>The <code>Node</code> is an <code>Attr</code> node, a <code>Text</code> node, a <code>ProcessingInstruction</code> node, a <code>Comment</code> node, or a <code>DocumentType</code> node, and has no child nodes.
</ul>

<p>Before running the steps of an algorithm of a method or attribute in this specification, the user agent must check that running the algorithm will result in a <span>legal hierarchy</span>. If it won't, then the user agent must instead raise a <code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code> exception.


<h3>Namespaces</h3>
<p>The <dfn>HTML namespace</dfn> is <code
title>http://www.w3.org/1999/xhtml</code>.

<p>The <dfn>XML namespace</dfn> is <code
title>http://www.w3.org/XML/1998/namespace</code>.

<p>The <dfn>XMLNS namespace</dfn> is <code
title>http://www.w3.org/2000/xmlns/</code>.



<h2>Basic types</h2>
<p>A <dfn>DOMTimeStamp</dfn> represents a number of milliseconds.
<pre class=idl>typedef unsigned long long DOMTimeStamp;</pre>



<h2>Exceptions</h2>
<h3>Exception <code>DOMException</code></h3>
<pre class=idl>exception <dfn>DOMException</dfn> {
  const unsigned short <span title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</span> = 1;
  const unsigned short <span title=dom-DOMException-DOMSTRING_SIZE_ERR>DOMSTRING_SIZE_ERR</span> = 2; // historical
  const unsigned short <span title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</span> = 3;
  const unsigned short <span title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</span> = 4;
  const unsigned short <span title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</span> = 5;
  const unsigned short <span title=dom-DOMException-NO_DATA_ALLOWED_ERR>NO_DATA_ALLOWED_ERR</span> = 6;
  const unsigned short <span title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR>NO_MODIFICATION_ALLOWED_ERR</span> = 7;
  const unsigned short <span title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</span> = 8;
  const unsigned short <span title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</span> = 9;
  const unsigned short <span title=dom-DOMException-INUSE_ATTRIBUTE_ERR>INUSE_ATTRIBUTE_ERR</span> = 10;
  const unsigned short <span title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</span> = 11;
  const unsigned short <span title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</span> = 12;
  const unsigned short <span title=dom-DOMException-INVALID_MODIFICATION_ERR>INVALID_MODIFICATION_ERR</span> = 13;
  const unsigned short <span title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</span> = 14;
  const unsigned short <span title=dom-DOMException-INVALID_ACCESS_ERR>INVALID_ACCESS_ERR</span> = 15;
  const unsigned short <span title=dom-DOMException-VALIDATION_ERR>VALIDATION_ERR</span> = 16;
  const unsigned short <span title=dom-DOMException-TYPE_MISMATCH_ERR>TYPE_MISMATCH_ERR</span> = 17;
  const unsigned short <span title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</span> = 18;
  const unsigned short <span title=dom-DOMException-NETWORK_ERR>NETWORK_ERR</span> = 19;
  const unsigned short <span title=dom-DOMException-ABORT_ERR>ABORT_ERR</span> = 20;
  const unsigned short <span title=dom-DOMException-URL_MISMATCH_ERR>URL_MISMATCH_ERR</span> = 21;
  const unsigned short <span title=dom-DOMException-QUOTA_EXCEEDED_ERR>QUOTA_EXCEEDED_ERR</span> = 22;
  const unsigned short <span title=dom-DOMException-TIMEOUT_ERR>TIMEOUT_ERR</span> = 23;
  const unsigned short <span title=dom-DOMException-PARSE_ERR>PARSE_ERR</span> = 81;
  const unsigned short <span title=dom-DOMException-SERIALIZE_ERR>SERIALIZE_ERR</span> = 82;
  unsigned short <span title=dom-DOMException-code>code</span>;
  DOMString <span title=dom-DOMException-message>message</span>;
  DOMString <span title=dom-DOMException-name>name</span>;
};</pre>

<p>The <dfn title=dom-DOMException-code><code>code</code></dfn> exception member
must return the code for the exception, which must be one of the following:

<ol class="brief">
 <li value="1"><dfn title=dom-DOMException-INDEX_SIZE_ERR><code>INDEX_SIZE_ERR</code></dfn></li>
 <li value="2"><dfn title=dom-DOMException-DOMSTRING_SIZE_ERR><code>DOMSTRING_SIZE_ERR</code></dfn></li>
 <li value="3"><dfn title=dom-DOMException-HIERARCHY_REQUEST_ERR><code>HIERARCHY_REQUEST_ERR</code></dfn></li>
 <li value="4"><dfn title=dom-DOMException-WRONG_DOCUMENT_ERR><code>WRONG_DOCUMENT_ERR</code></dfn></li>
 <li value="5"><dfn title=dom-DOMException-INVALID_CHARACTER_ERR><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></dfn></li>
 <li value="6"><dfn title=dom-DOMException-NO_DATA_ALLOWED_ERR><code>NO_DATA_ALLOWED_ERR</code></dfn></li>
 <li value="7"><dfn title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR><code>NO_MODIFICATION_ALLOWED_ERR</code></dfn></li>
 <li value="8"><dfn title=dom-DOMException-NOT_FOUND_ERR><code>NOT_FOUND_ERR</code></dfn></li>
 <li value="9"><dfn title=dom-DOMException-NOT_SUPPORTED_ERR><code>NOT_SUPPORTED_ERR</code></dfn></li>
 <li value="10"><dfn title=dom-DOMException-INUSE_ATTRIBUTE_ERR><code>INUSE_ATTRIBUTE_ERR</code></dfn></li>
 <li value="11"><dfn title=dom-DOMException-INVALID_STATE_ERR><code>INVALID_STATE_ERR</code></dfn></li>
 <li value="12"><dfn title=dom-DOMException-SYNTAX_ERR><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></dfn></li>
 <li value="13"><dfn title=dom-DOMException-INVALID_MODIFICATION_ERR><code>INVALID_MODIFICATION_ERR</code></dfn></li>
 <li value="14"><dfn title=dom-DOMException-NAMESPACE_ERR><code>NAMESPACE_ERR</code></dfn></li>
 <li value="15"><dfn title=dom-DOMException-INVALID_ACCESS_ERR><code>INVALID_ACCESS_ERR</code></dfn></li>
 <li value="16"><dfn title=dom-DOMException-VALIDATION_ERR><code>VALIDATION_ERR</code></dfn></li>
 <li value="17"><dfn title=dom-DOMException-TYPE_MISMATCH_ERR><code>TYPE_MISMATCH_ERR</code></dfn></li>
 <li value="18"><dfn title=dom-DOMException-SECURITY_ERR><code>SECURITY_ERR</code></dfn></li>
 <li value="19"><dfn title=dom-DOMException-NETWORK_ERR><code>NETWORK_ERR</code></dfn></li>
 <li value="20"><dfn title=dom-DOMException-ABORT_ERR><code>ABORT_ERR</code></dfn></li>
 <li value="21"><dfn title=dom-DOMException-URL_MISMATCH_ERR><code>URL_MISMATCH_ERR</code></dfn></li>
 <li value="22"><dfn title=dom-DOMException-QUOTA_EXCEEDED_ERR><code>QUOTA_EXCEEDED_ERR</code></dfn></li>
 <li value="23"><dfn title=dom-DOMException-TIMEOUT_ERR><code>TIMEOUT_ERR</code></dfn></li>
 <li value="81"><dfn title=dom-DOMException-PARSE_ERR><code>PARSE_ERR</code></dfn></li>
 <li value="82"><dfn title=dom-DOMException-SERIALIZE_ERR><code>SERIALIZE_ERR</code></dfn></li>
</ol>

<p class=XXX>Add a description of those exceptions?

<p>The <dfn title=dom-DOMException-message><code>message</code></dfn> exception
member must return a User Agent-defined human readable string describing the
exception.

<p>The <dfn title=dom-DOMException-name><code>name</code></dfn> exception member
must return the name of the exception constant as a string.</p>



<h2>Nodes</h2>
<h3>Interface <code>Node</code></h3>
<pre class=idl>interface <dfn>Node</dfn> {

  // NodeType
  const unsigned short <span title=dom-Node-ELEMENT_NODE>ELEMENT_NODE</span> = 1;
  const unsigned short <span title=dom-Node-ATTRIBUTE_NODE>ATTRIBUTE_NODE</span> = 2;
  const unsigned short <span title=dom-Node-TEXT_NODE>TEXT_NODE</span> = 3;
  const unsigned short <span title=dom-Node-CDATA_SECTION_NODE>CDATA_SECTION_NODE</span> = 4; // historical
  const unsigned short <span title=dom-Node-ENTITY_REFERENCE_NODE>ENTITY_REFERENCE_NODE</span> = 5; // historical
  const unsigned short <span title=dom-Node-ENTITY_NODE>ENTITY_NODE</span> = 6; // historical
  const unsigned short <span title=dom-Node-PROCESSING_INSTRUCTION_NODE>PROCESSING_INSTRUCTION_NODE</span> = 7;
  const unsigned short <span title=dom-Node-COMMENT_NODE>COMMENT_NODE</span> = 8;
  const unsigned short <span title=dom-Node-DOCUMENT_NODE>DOCUMENT_NODE</span> = 9;
  const unsigned short <span title=dom-Node-DOCUMENT_TYPE_NODE>DOCUMENT_TYPE_NODE</span> = 10;
  const unsigned short <span title=dom-Node-DOCUMENT_FRAGMENT_NODE>DOCUMENT_FRAGMENT_NODE</span> = 11;
  const unsigned short <span title=dom-Node-NOTATION_NODE>NOTATION_NODE</span> = 12; // historical

  readonly attribute DOMString <span title=dom-Node-nodeName>nodeName</span>;
           attribute DOMString <span title=dom-Node-nodeValue>nodeValue</span>;
  readonly attribute unsigned short <span title=dom-Node-nodeType>nodeType</span>;
  readonly attribute <span>Node</span> <span title=dom-Node-parentNode>parentNode</span>;
  readonly attribute <span>Element</span> <span title=dom-Node-parentElement>parentElement</span>;
  readonly attribute <span>NodeList</span> <span title=dom-Node-childNodes>childNodes</span>;
  readonly attribute <span>Node</span> <span title=dom-Node-firstChild>firstChild</span>;
  readonly attribute <span>Node</span> <span title=dom-Node-lastChild>lastChild</span>;
  readonly attribute <span>Node</span> <span title=dom-Node-previousSibling>previousSibling</span>;
  readonly attribute <span>Node</span> <span title=dom-Node-nextSibling>nextSibling</span>;
  readonly attribute <span>NamedNodeMap</span> <span title=dom-Node-attributes>attributes</span>;
  readonly attribute <span>Document</span> <span title=dom-Node-ownerDocument>ownerDocument</span>;
  <span>Node</span> <span title=dom-Node-insertBefore>insertBefore</span>(in <span>Node</span> newChild, in <span>Node</span> refChild);
  <span>Node</span> <span title=dom-Node-replaceChild>replaceChild</span>(in <span>Node</span> newChild, in <span>Node</span> oldChild);
  <span>Node</span> <span title=dom-Node-removeChild>removeChild</span>(in <span>Node</span> oldChild);
  <span>Node</span> <span title=dom-Node-appendChild>appendChild</span>(in <span>Node</span> newChild);
  boolean <span title=dom-Node-hasChildNodes>hasChildNodes</span>();
  <span>Node</span> <span title=dom-Node-cloneNode>cloneNode</span>(in boolean deep);<!--
  void normalize();-->
  boolean <span title=dom-Node-isSupported>isSupported</span>(in DOMString feature, in DOMString version);
  readonly attribute DOMString <span title=dom-Node-namespaceURI>namespaceURI</span>;
  readonly attribute DOMString <span title=dom-Node-prefix>prefix</span>;
  readonly attribute DOMString <span title=dom-Node-localName>localName</span>;
  boolean <span title=dom-Node-hasAttributes>hasAttributes</span>();
  readonly attribute DOMString <span title=dom-Node-baseURI>baseURI</span>;

  // DocumentPosition
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_DISCONNECTED>DOCUMENT_POSITION_DISCONNECTED</span> = 0x01;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_PRECEDING>DOCUMENT_POSITION_PRECEDING</span> = 0x02;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_FOLLOWING>DOCUMENT_POSITION_FOLLOWING</span> = 0x04;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_CONTAINS>DOCUMENT_POSITION_CONTAINS</span> = 0x08;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY>DOCUMENT_POSITION_CONTAINED_BY</span> = 0x10;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</span> = 0x20;

  unsigned short <span title=dom-Node-compareDocumentPosition>compareDocumentPosition</span>(in <span>Node</span> other);

  [TreatNullAs=EmptyString] attribute DOMString <span title=dom-Node-textContent>textContent</span>;
  boolean <span title=dom-Node-isSameNode>isSameNode</span>(in <span>Node</span> other);
  DOMString <span title=dom-Node-lookupPrefix>lookupPrefix</span>(in DOMString namespaceURI);
  boolean <span title=dom-Node-isDefaultNamespace>isDefaultNamespace</span>(in DOMString namespaceURI);
  DOMString <span title=dom-Node-lookupNamespaceURI>lookupNamespaceURI</span>(in DOMString prefix);
  boolean <span title=dom-Node-isEqualNode>isEqualNode</span>(in <span>Node</span> arg);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);
  DOMUserData setUserData(in DOMString key, in DOMUserData data, in UserDataHandler handler);
  DOMUserData getUserData(in DOMString key);-->
};</pre>

<ol>
 <li value=1><dfn title=dom-Node-ELEMENT_NODE><code>ELEMENT_NODE</code></dfn>

 <li value=2><dfn title=dom-Node-ATTRIBUTE_NODE><code>ATTRIBUTE_NODE</code></dfn>

 <li value=3><dfn title=dom-Node-TEXT_NODE><code>TEXT_NODE</code></dfn>

 <li value=4><dfn title=dom-Node-CDATA_SECTION_NODE><code>CDATA_SECTION_NODE</code></dfn>

 <li value=5><dfn title=dom-Node-ENTITY_REFERENCE_NODE><code>ENTITY_REFERENCE_NODE</code></dfn>

 <li value=6><dfn title=dom-Node-ENTITY_NODE><code>ENTITY_NODE</code></dfn>

 <li value=7><dfn title=dom-Node-PROCESSING_INSTRUCTION_NODE><code>PROCESSING_INSTRUCTION_NODE</code></dfn>

 <li value=8><dfn title=dom-Node-COMMENT_NODE><code>COMMENT_NODE</code></dfn>

 <li value=9><dfn title=dom-Node-DOCUMENT_NODE><code>DOCUMENT_NODE</code></dfn>

 <li value=10><dfn title=dom-Node-DOCUMENT_TYPE_NODE><code>DOCUMENT_TYPE_NODE</code></dfn>

 <li value=11><dfn title=dom-Node-DOCUMENT_FRAGMENT_NODE><code>DOCUMENT_FRAGMENT_NODE</code></dfn>

 <li value=12><dfn title=dom-Node-NOTATION_NODE><code>NOTATION_NODE</code></dfn>
</ol>


<p>The <dfn title=dom-Node-nodeName><code>nodeName</code></dfn>, <dfn title=dom-Node-nodeValue><code>nodeValue</code></dfn> and <dfn title=dom-Node-nodeType><code>nodeType</code></dfn> attributes must, on getting, return what is in the second, third and forth column, respectively, if the node also implements the interface in the first column on the same row in the following table:

<table>
<thead><tr><th>Interface<th><code title=dom-Node-nodeName>nodeName</code><th><code title=dom-Node-nodeValue>nodeValue</code><th><code title=dom-Node-nodeType>nodeType</code>
<tbody>
<tr><td><code>Element</code><td>same as <code title=dom-Element-tagName>tagName</code><td>null<td>1
<tr><td><code>Attr</code><td>same as <code title=dom-Attr-name>name</code><td>same as <code title=dom-Attr-value>value</code><td>2
<tr><td><code>Text</code><td>"<code title>#text</code>"<td>same as <code title=dom-CharacterData-data>data</code><td>3
<tr><td><code>ProcessingInstruction</code><td>same as <code title=dom-ProcessingInstruction-target>target</code><td>same as <code title=dom-ProcessingInstruction-data>data</code><td>7
<tr><td><code>Comment</code><td>"<code title>#comment</code>"<td>same as <code title=dom-CharacterData-data>data</code><td>8
<tr><td><code>Document</code><td>"<code title>#document</code>"<td>null<td>9
<tr><td><code>DocumentType</code><td>same as <code title=dom-DocumentType-name>name</code><td>null<td>10
<tr><td><code>DocumentFragment</code><td>"<code title>#document-fragment</code>"<td>null<td>11
</table>

<p>The <dfn title=dom-Node-parentNode><code>parentNode</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node, return
 null and abort these steps.

 <li><p>If the <span>context node</span> doesn't have a parent node, return
 null and abort these steps.

 <li><p>Return the parent node of the <span>context node</span>.
</ol>

<p>The <dfn title=dom-Node-parentElement><code>parentElement</code></dfn> attribute must, on getting, return the parent node of the <span>context node</span> if there is a parent and it is an element, or null otherwise.

<p>The <dfn title=dom-Node-childNodes><code>childNodes</code></dfn> attribute must, on getting, return a <code>NodeList</code> rooted at the <span>context node</span> matching only child nodes.

<p>The <dfn title=dom-Node-firstChild><code>firstChild</code></dfn> attribute must, on getting, return the first child node of the <span>context node</span>, or null if there is none.

<p>The <dfn title=dom-Node-lastChild><code>lastChild</code></dfn> attribute must, on getting, return the last child node of the <span>context node</span>, or null if there is none.

<p>The <dfn title=dom-Node-previousSibling><code>previousSibling</code></dfn>
attribute must, on getting, run the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node, return
 null and abort these steps.

 <li><p>If the <span>context node</span> doesn't have a previous sibling node,
 return null and abort these steps.

 <li><p>Return the previous sibling node of the <span>context node</span>.
</ol>

<p>The <dfn title=dom-Node-nextSibling><code>nextSibling</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node, return
 null and abort these steps.

 <li><p>If the <span>context node</span> doesn't have a next sibling node,
 return null and abort these steps.

 <li><p>Return the next sibling node of the <span>context node</span>.
</ol>

<p>The <dfn title=dom-Node-attributes><code>attributes</code></dfn> attribute must, on getting, return a <code>NamedNodeMap</code> of all the <code>Attr</code> nodes associated with the node of the <span>context node</span>, if it is an <code>Element</code> node, or null otherwise.

<p>The <dfn title=dom-Node-ownerDocument><code>ownerDocument</code></dfn> attribute must, on getting, return the <code>Document</code> node that the <span>context node</span> is associated with, or null if there is none.

<p>The <dfn title=dom-Node-insertBefore><code>insertBefore(<var
title>newChild</var>, <var title>refChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node or a
 <code>Text</code> node, then raise a <code
 title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If <var title>newChild</var> is null, then raise a <code
 title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and
 abort these steps.

 <li><p>If <var title>refChild</var> is not null and is not a child of the
 <span>context node</span>, then raise a <code
 title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code> exception and abort
 these steps. <!-- Do not adopt. -->

 <li><p>If <var title>newChild</var>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code> is not equal to the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>, call the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>
 <code title=dom-Document-adoptNode>adoptNode</code> method with
 <var title>newChild</var> as its argument.

 <!-- no security check -->
 <li><p>If <var title>newChild</var> is a <code>DocumentFragment</code> node,
 then while <var title>newChild</var>'s <code
 title=dom-Node-firstChild>firstChild</code> is not null, call <code
 title=dom-Node-insertBefore>insertBefore</code> on the <span>context
 node</span> with <var title>newChild</var>'s <code
 title=dom-Node-firstChild>firstChild</code> as first argument and <var
 title>refChild</var> as second argument.

 <li><p>Otherwise, if <var title>refChild</var> is null, append <var
 title>newChild</var> to the <span>context node</span>.

 <li><p>Otherwise insert <var title>newChild</var> in the <span>context
 node</span> as the previous sibling of <var title>refChild</var>.

 <li><p>Return <var title>newChild</var>.
</ol>

<p>The <dfn title=dom-Node-replaceChild><code>replaceChild(<var
title>newChild</var>, <var title>oldChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node or a
 <code>Text</code> node, then raise a <code
 title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If either <var title>newChild</var> or <var title>oldChild</var> is
 null, then raise a <code
 title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and
 abort these steps.

 <li><p>If <var title>newChild</var>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code> is not equal to the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>, call the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>
 <code title=dom-Document-adoptNode>adoptNode</code> method with
 <var title>newChild</var> as its argument.

 <li><p>If <var title>oldChild</var> is not a child of the <span>context
 node</span>, then raise a <code
 title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code>
 exception and abort these steps.

 <!-- no security check -->
 <li><p>Let <var title>refChild</var> be <var title>oldChild</var>'s
 <code title=dom-Node-nextSibling>nextSibling</code>.

 <li><p>Remove <var title>oldChild</var> from <span>context node</span>.

 <li><p>Call <code title=dom-Node-insertBefore>insertBefore</code> on the
 <span>context node</span> with <var title>newChild</var> and <var
 title>refChild</var> as arguments, respectively.

 <li><p>Return <var title>newChild</var>.
</ol>

<p>The <dfn
title=dom-Node-removeChild><code>removeChild(<var
title>oldChild</var>)</code></dfn> method must run the following steps:

<ol>
 <!-- Attr nodes are okay -->
 <li><p>If <var title>oldChild</var> is null, then raise a <code
 title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and
 abort these steps.

 <li><p>If <var title>oldChild</var> is not a child of the <span>context
 node</span>, then raise a <code
 title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code> exception and abort
 these steps.
 <!-- Including other documents. -->

 <li><p>Remove <var title>oldChild</var> from <span>context node</span>.

 <li><p>Return <var title>oldChild</var>.
</ol>

<p>The <dfn
title=dom-Node-appendChild><code>appendChild(<var
title>newChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <code>Attr</code> node or a
 <code>Text</code> node, then raise a <code
 title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If <var title>newChild</var> is null, then raise a <code
 title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and
 abort these steps.

 <li><p>If <var title>newChild</var>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code> is not equal to the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>, call the
 <span>context node</span>'s
 <code title=dom-Node-ownerDocument>ownerDocument</code>
 <code title=dom-Document-adoptNode>adoptNode</code> method with
 <var title>newChild</var> as its argument.

 <!-- no security check -->
 <li><p>Append <var title>newChild</var> to the <span>context node</span>.

 <li><p>Return <var title>newChild</var>.
</ol>

<p>The <dfn title=dom-Node-hasChildNodes><code>hasChildNodes()</code></dfn> method must return false if the <span>context node</span>'s <code title=dom-Node-firstChild>firstChild</code> is null, and true otherwise.

<p>The <dfn title=dom-Node-cloneNode><code>cloneNode(<var
title>deep</var>)</code></dfn> method must return a <span>clone</span> of the
<span>context node</span>, with <var title>new ownerDocument</var> being the
<span>context node</span>'s <code
title=dom-Node-ownerDocument>ownerDocument</code>, and the <var title>clone
children</var> flag set if <var title>deep</var> is true.

<p>The <dfn title=dom-Node-isSupported><code>isSupported(<var title>feature</var>, <var title>version</var>)</code></dfn> method must return true if the UA supports the given feature <var title>feature</var> of version <var title>version</var> on the <span>context node</span>, and false otherwise.

<p>The <dfn title=dom-Node-namespaceURI><code>namespaceURI</code></dfn> attribute, on getting, must return the namespace that is associated with the node, if there is one and it's not the empty string, or null otherwise.

<p>The <dfn title=dom-Node-prefix><code>prefix</code></dfn> attribute, on getting, must return the prefix that is associated with the node, if there is one and it's not the empty string, or null otherwise.
<span class=XXX>And on setting?</span> <!--On setting, it must run the following steps:

<ol>
 <li><p>Let <var title>prefix</var> be the value being assigned.
 <li>
  <p>If <var title>prefix</var> is not null, run the following substeps:
  <ol>
   <li><p>If <var title>prefix</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
   <li><p>If <var title>prefix</var> doesn't match the <code
   data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML, raise a
   <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and
   abort these steps.
  </ol>
 <li><p class=XXX>Actually this doesn't match any browser. Let's try to drop it instead.
</ol>-->

<p>The <dfn title=dom-Node-localName><code>localName</code></dfn> attribute, on
getting, must return the local name that is associated with the node, if it has
one, and null otherwise.

<p>The <dfn title=dom-Node-hasAttributes><code>hasAttributes()</code></dfn>
method must return whether there are any attributes associated with the
<span>context node</span>, if it is an <code>Element</code> node, and false
otherwise.

<p>The <dfn title=dom-Node-baseURI><code>baseURI</code></dfn> attribute must <span class=XXX>...</span>

<ol>
 <li value=1><dfn title=dom-Node-DOCUMENT_POSITION_DISCONNECTED><code>DOCUMENT_POSITION_DISCONNECTED</code></dfn>

 <li value=2><dfn title=dom-Node-DOCUMENT_POSITION_PRECEDING><code>DOCUMENT_POSITION_PRECEDING</code></dfn>

 <li value=4><dfn title=dom-Node-DOCUMENT_POSITION_FOLLOWING><code>DOCUMENT_POSITION_FOLLOWING</code></dfn>

 <li value=8><dfn title=dom-Node-DOCUMENT_POSITION_CONTAINS><code>DOCUMENT_POSITION_CONTAINS</code></dfn>

 <li value=16><dfn title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY><code>DOCUMENT_POSITION_CONTAINED_BY</code></dfn>

 <li value=32><dfn title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC><code>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code></dfn>
</ol>

<p>The <dfn
title=dom-Node-compareDocumentPosition><code>compareDocumentPosition(<var
title>other</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn title=dom-Node-textContent><code>textContent</code></dfn> attribute, on getting, must return a concatenation of the <code title=dom-CharacterData-data>data</code> of all the descendant <code>Text</code> nodes of the <span>context node</span>, in <span>tree order</span>. On setting, it must run the following steps:

<ol>
 <li><p>Remove all the child nodes of the <span>context node</span>.
 <li><p>Let <var title>data</var> be the value being assigned.
 <li><p>If <var title>data</var> is not the empty string, append a new <code>Text</code> node to the <span>context node</span> whose <code title=dom-CharacterData-data>data</code> is set to <var title>data</var>.
</ol>

<p class=XXX><a href="http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com">http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com</a>

<p>The <dfn title=dom-Node-isSameNode><code>isSameNode(<var
title>other</var>)</code></dfn> method must return true if <var
title>other</var> is a reference to the same object as the <span>context
node</span>, and false otherwise.

<p>The <dfn title=dom-Node-lookupPrefix><code>lookupPrefix(<var
title>namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn title=dom-Node-isDefaultNamespace><code>isDefaultNamespace(<var
title>namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn title=dom-Node-lookupNamespaceURI><code>lookupNamespaceURI(<var
title>prefix</var>)</code></dfn> method must <span class=XXX>...</span>

<p class=XXX>clarify lookupNamespaceURI <a href=http://www.w3.org/mid/4878DFC6.40401@lachy.id.au>http://www.w3.org/mid/4878DFC6.40401@lachy.id.au</a>; lookupNamespaceURI, isDefaultNamespace <a href="http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126">http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126</a>

<p>The <dfn title=dom-Node-isEqualNode><code>isEqualNode(<var
title>arg</var>)</code></dfn> method must return true if all of the following
conditions are true, and must otherwise return false:

<ul>
 <li><p><var title>arg</var> is not null.
 <li><p><var title>arg</var>'s <code title=dom-Node-nodeType>nodeType</code> is the same as the <span>context node</span>'s <code title=dom-Node-nodeType>nodeType</code>.
 <li><p><var title>arg</var>'s <code title=dom-Node-nodeName>nodeName</code> is the same as the <span>context node</span>'s <code title=dom-Node-nodeName>nodeName</code>.
 <li><p><var title>arg</var>'s <code title=dom-Node-localName>localName</code> is the same as the <span>context node</span>'s <code title=dom-Node-localName>localName</code>.
 <li><p><var title>arg</var>'s <code title=dom-Node-namespaceURI>namespaceURI</code> is the same as the <span>context node</span>'s <code title=dom-Node-namespaceURI>namespaceURI</code>.
 <li><p><var title>arg</var>'s <code title=dom-Node-prefix>prefix</code> is the same as the <span>context node</span>'s <code title=dom-Node-prefix>prefix</code>.
 <li><p><var title>arg</var>'s <code title=dom-Node-nodeValue>nodeValue</code> is the same as the <span>context node</span>'s <code title=dom-Node-nodeValue>nodeValue</code>.

 <li><p>Either <var title>arg</var>'s <code
 title=dom-Node-attributes>attributes</code> and the <span>context node</span>'s
 <code title=dom-Node-attributes>attributes</code> are both null or a bijection
 exists between the set of <var title>arg</var>'s <code
 title=dom-Node-attributes>attributes</code> and the set of the <span>context
 node</span>'s <code title=dom-Node-attributes>attributes</code> so that every
 <code>Attr</code> node in the former is mapped to an <code>Attr</code> node in
 the latter for which calling <code
 title=dom-Node-isEqualNode>isEqualNode</code> on the first <code>Attr</code>
 node with the second <code>Attr</code> node as its argument returns true.

 <li><p><var title>arg</var>'s <code title=dom-Node-childNodes>childNodes</code>' <code title=dom-NodeList-length>length</code> is the same as the <span>context node</span>'s <code title=dom-Node-childNodes>childNodes</code>' <code title=dom-NodeList-length>length</code>.
 <li><p>Calling <code title=dom-Node-isEqualNode>isEqualNode</code> on each child node of the <span>context node</span>, with the child node of the same index in <var title>arg</var> as argument returns true for every child node.
</ul>


<h3>Interface <code>DocumentFragment</code></h3>
<pre class=idl>interface <dfn>DocumentFragment</dfn> : <span>Node</span> {
};</pre>


<h3>Interface <code>Document</code></h3>
<pre class=idl>interface <dfn>Document</dfn> : <span>Node</span> {
  readonly attribute <span>DocumentType</span> <span title=dom-Document-doctype>doctype</span>;
  readonly attribute <span>DOMImplementation</span> <span title=dom-Document-implementation>implementation</span>;
  readonly attribute <span>Element</span> <span title=dom-Document-documentElement>documentElement</span>;
  readonly attribute <span data-anolis-spec=window>WindowProxy</span> <span title=dom-Document-defaultView>defaultView</span>;

  <span>Element</span> <span title=dom-Document-createElement>createElement</span>([TreatNullAs=EmptyString] in DOMString tagName);
  <span>Element</span> <span title=dom-Document-createElementNS>createElementNS</span>(in DOMString namespaceURI, in DOMString qualifiedName);
  <span>DocumentFragment</span> createDocumentFragment();
  <span>Text</span> <span title=dom-Document-createTextNode>createTextNode</span>(in DOMString data);
  <span>Comment</span> <span title=dom-Document-createComment>createComment</span>(in DOMString data);
  <span>ProcessingInstruction</span> <span title=dom-Document-createProcessingInstruction>createProcessingInstruction</span>(in DOMString target, in DOMString data);<!--
  CDATASection createCDATASection(in DOMString data);
  EntityReference createEntityReference(in DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttribute>createAttribute</span>(in DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttributeNS>createAttributeNS</span>(in DOMString namespaceURI, in DOMString qualifiedName);
    If adding this, search for [createAttribute]-->

  <span>NodeList</span> <span title=dom-Document-getElementsByTagName>getElementsByTagName</span>(in DOMString tagname);
  <span>NodeList</span> <span title=dom-Document-getElementsByTagNameNS>getElementsByTagNameNS</span>(in DOMString namespaceURI, in DOMString localName);
  <span>NodeList</span> <span title=dom-Document-getElementsByClassName>getElementsByClassName</span>(in DOMString classNames);
  <span>Element</span> <span title=dom-Document-getElementById>getElementById</span>(in DOMString elementId);

  <span>Node</span> <span title=dom-Document-importNode>importNode</span>(in <span>Node</span> importedNode, in boolean deep);
  <span>Node</span> <span title=dom-Document-adoptNode>adoptNode</span>(in <span>Node</span> source);

  readonly attribute DOMString <span title=dom-Document-inputEncoding>inputEncoding</span>;
           attribute DOMString <span title=dom-Document-documentURI>documentURI</span>;
  readonly attribute DOMString <span title=dom-Document-compatMode>compatMode</span>;<!--
  readonly attribute DOMString xmlEncoding;
           attribute boolean xmlStandalone;
           attribute DOMString <span title=dom-Document-xmlVersion>xmlVersion</span>;
           attribute boolean strictErrorChecking;
  readonly attribute DOMConfiguration domConfig;
  void normalizeDocument();
  Node renameNode(in Node n, in DOMString namespaceURI, in DOMString qualifiedName);-->
};
<dfn>XMLDocument</dfn> : <span>Document</span> {};</pre>

<p>A <code>Document</code> node is assumed to be an <dfn>XML document</dfn>
unless they are flagged as being an <dfn>HTML document</dfn> when they are
created. Whether a document is an <span>HTML document</span> or an <span>XML
document</span> affects the behavior of certain APIs.

<p>A <code>Document</code> node is always set to one of three modes when it is
created: <dfn title=concept-no-quirks-mode>no-quirks mode</dfn>, the default;
<dfn title=concept-quirks-mode>quirks mode</dfn>, used typically for legacy
documents; and <dfn title=concept-limited-quirks-mode>limited-quirks mode</dfn>,
also known as "almost standards" mode. Unless <span>other applicable
specifications</span> define otherwise, the <code>Document</code> must be in
<span title=concept-no-quirks-mode>no-quirks mode</span>.

<p class=note>The mode is only ever changed from the default if the
<code>Document</code> node is created by the <span data-anolis-spec=html>HTML
parser</span>, based on the presence, absence, or value of the DOCTYPE string.
<span data-anolis-ref>HTML</span>

<dl class=domintro>
 <dt><var title=dom-Window-document data-anolis-spec=window>document</var> .
     <code title=dom-Document-defaultView>defaultView</code>
 <dd><p>Returns the <code data-anolis-spec=window>Window</code> object of the
        <span data-anolis-spec=html>active document</span>.
</dl>

<p>The <dfn title=dom-Document-doctype><code>doctype</code></dfn> attribute must return the first child of the <code>Document</code> node that is a <code>DocumentType</code> node, if there is one, or null otherwise.
<p class=note>In both HTML and XML there will only ever be one <code>DocumentType</code> node descendant of the <code>Document</code> node. <span data-anolis-ref>HTML</span> <span data-anolis-ref>XML</span>

<p>The <dfn title=dom-Document-implementation><code>implementation</code></dfn> attribute must return the <code>DOMImplementation</code> object that is associated with the <code>Document</code> node.

<p>The <dfn title=dom-Document-documentElement><code>documentElement</code></dfn> attribute must return the first child of the <code>Document</code> node that is an <code>Element</code> node, if there is one, or null otherwise.

<p>The <dfn title=dom-Document-defaultView><code>defaultView</code></dfn>
attribute must return the <span>context node</span>'s <span
data-anolis-spec=html>browsing context</span>'s <code
data-anolis-spec=window>WindowProxy</code> object.</p>

<hr>

<p>The <dfn title=dom-Document-createElement><code>createElement(<var title>tagName</var>)</code></dfn> method must run the following steps:</p>

<p class=XXX><code title>createElement("&lt;div class='test'>")</code>?
<!-- ie allows createElement("<div class='test'>") and firefox in quirks mode allows createElement("<div>") -->
<!--
<zcorpan> i don't like dom's error checking at all
<zcorpan> it checks for some things but not others and the things it checks sometimes don't match what xml requires anyway
<zcorpan> and you can smuggle in stuff from other documents without checking anyway
<zcorpan> the questions are
<zcorpan> is there a reason why we can't drop all error checking
<zcorpan> and
<zcorpan> if we do, do we need to make createElement('<div>') or createElement('<div foo="bar">') do something magic
<hsivonen> zcorpan: does IE implement full attribute tokenization for those?
<zcorpan> hsivonen: afaict yeah
<zcorpan> hsivonen: though i haven't tested much
<zcorpan> document.createElement('<x y z=a x x y u>'); works as you'd expect
<Philip`> Seems to trigger iff the first character is '<'
<hsivonen> what if the string tokenizes to multiple tags?
<hsivonen> what if it tokenizes to and end tag?
<hsivonen> what about "<>"?
<annevk> I'd rather throw an error if the first char is "<" than implementing some small start tag tokenizer just for createElement
<hsivonen> or something else that doesn't tokenize to a start tag
<Philip`> It ignores everything after the first '>'
<hsivonen> annevk: presumably, one could reuse the real tokenizer
<Philip`> It seems to throw an error if it starts with '</'
<Philip`> (but if e.g. it starts with '<!' then it'll just make an element whose name starts with '!')
<Philip`>	Out of n pages for an unknown value of n, I see one that does document.createElement('<iframe frameborder="0">')
<Philip`>	(http://www.movingideas.org/content/en/issue_items/education.htm)
<Philip`>	(n = tens of thousands, I think)
-->
<!-- As far as I can tell, this isn't needed for web compatibility. Neither WebKit nor Opera support it, and Firefox's implementation still throws on the majority of cases in the wild, as almost all cases in the wild take advantage of the fact that IE allows attributes. -->
<!-- http://philip.html5.org/data/createelement-with-angle-bracket.txt -->
<ol>
 <li><p>If <var title>tagName</var> doesn't match the <code
 data-anolis-spec=xml>Name</code> production in XML, raise an <code
 title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps.

 <li><p>If the <span>context node</span> is an <span>HTML document</span>, let
 <var title>localName</var> be <var title>tagName</var>, <span>converted to
 lowercase</span>. Otherwise, let <var title>localName</var> be <var
 title>tagName</var>.

 <li><p>Return a new <code>Element</code> node with no attributes, <code
 title=dom-Node-namespaceURI>namespaceURI</code> set to the <span>HTML
 namespace</span>, <code title=dom-Node-prefix>prefix</code> set to null, <code
 title=dom-Node-localName>localName</code> set to <var title>localName</var>,
 and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the
 <span>context node</span>.
</ol>
<!-- this is very different from DOM3 -->
<p class=note>No check is performed that the local name will match the <code
data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML.

<p>The <dfn title=dom-Document-createElementNS><code>createElementNS(<var title>namespaceURI</var>, <var title>qualifiedName</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title>qualifiedName</var> doesn't match the <code
 data-anolis-spec=xml>Name</code> production in XML, raise an <code
 title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps.
 <li><p>If <var title>qualifiedName</var> doesn't match the <code
 data-anolis-spec=xmlns>QName</code> production in Namespaces in XML, raise a
 <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and
 abort these steps.
 <li><p>If <var title>qualifiedName</var> contains a U+003E COLON (":") character, then split the string on the colon and let <var title>prefix</var> be the part before the colon and <var title>localName</var> the part after the colon. Otherwise, let <var title>prefix</var> be null and <var title>localName</var> be <var title>qualifiedName</var>.
 <li><p>If <var title>prefix</var> is not null and <var title>namespaceURI</var> is an empty string, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.
 <li><p>If <var title>prefix</var> is "xml" and <var title>namespaceURI</var> is not the <span>XML namespace</span>, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.
 <li><p>If <var title>qualifiedName</var> or <var title>prefix</var> is "xmlns" and <var title>namespaceURI</var> is not the <span>XMLNS namespace</span>, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.
 <li><p>If <var title>namespaceURI</var> is the <span>XMLNS namespace</span> and neither <var title>qualifiedName</var> nor <var title>prefix</var> is "xmlns", raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.
 <li><p>Return a new <code>Element</code> node with no attributes, <code title=dom-Node-namespaceURI>namespaceURI</code> set to <var title>namespaceURI</var>, <code title=dom-Node-prefix>prefix</code> set to <var title>prefix</var>, <code title=dom-Node-localName>localName</code> set to <var title>localName</var>, and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>

<p>The <dfn title=dom-Document-createDocumentFragment><code>createDocumentFragment()</code></dfn> method must return a new <code>DocumentFragment</code> node with its <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.

<p>The <dfn title=dom-Document-createTextNode><code>createTextNode(<var title>data</var>)</code></dfn> method must return a new <code>Text</code> node with its <code title=dom-CharacterData-data>data</code> attribute set to <var title>data</var> and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
<p class=note>No check is performed that the text node contains characters that
match the <code data-anolis-spec=xml>Char</code> production in XML.

<p>The <dfn title=dom-Document-createComment><code>createComment(<var title>data</var>)</code></dfn> method must return a new <code>Comment</code> node with its <code title=dom-CharacterData-data>data</code> attribute set to <var title>data</var> and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
<p class=note>No check is performed that the comment contains characters that
match the <code data-anolis-spec=xml>Char</code> production in XML or that it
contains two adjacent hyphens or ends with a hyphen.

<p>The <dfn title=dom-Document-createProcessingInstruction><code
>createProcessingInstruction(<var title>target</var>, <var
title>data</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <span>context node</span> is an <span>HTML document</span>, raise
 a <code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code>
 exception and abort these steps.

 <li><p>If <var title>target</var> doesn't match the <!--<code
 data-anolis-spec=xml>PITarget</code>--> <code data-anolis-spec=xml>Name</code>
 production in XML, raise an <code
 title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps. <!-- DOM3 didn't check for "xml" -->

 <li><p>If <var title>data</var> contains the string "<code title>?></code>",
 raise an <code
 title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps. <!-- Gecko does this. -->

 <!--<li><p>If <var title>target</var> contains a U+003A COLON (":") character, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->

 <li><p>Return a new <code>ProcessingInstruction</code> node with its <code title=dom-ProcessingInstruction-target>target</code> attribute set to <var title>target</var>, <code title=dom-ProcessingInstruction-data>data</code> attribute set to <var title>data</var> and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>

<p class=note>No check is performed that the processing instruction target
contains "xml" or the colon, or that the data contains characters that match the
<code data-anolis-spec=xml>Char</code> production in XML.</p>

<!--
[createAttribute]
<p>The <dfn title=dom-Document-createAttribute><code>createAttribute(<var title>name</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title>name</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
 <li><p>Return a new <code>Attr</code> node with its <code title=dom-Node-namespaceURI>namespaceURI</code> set to null, <code title=dom-Node-prefix>prefix</code> set to null, <code title=dom-Node-localName>localName</code> set to <var title>name</var>, and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>-->
<!-- this is different from DOM3 -->
<!--<p class=note>No check is performed that the local name will match the <code
data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML.-->

<hr>
<dl class=domintro>
 <dt><var title>collection</var> = <var title>document</var> . <code
 title=dom-Document-getElementsByClassName>getElementsByClassName(<var
 title>classes</var>)</code>
 <dt><var title>collection</var> = <var title>element</var> . <code
 title=dom-Element-getElementsByClassName>getElementsByClassName(<var
 title>classes</var>)</code>
 <dd>
  <p>Returns a <code>NodeList</code> of the elements in the object
  on which the method was invoked (a <code>Document</code> or an
  <code>Element</code>) that have all the classes given by <var
  title="">classes</var>.
  <p>The <var title="">classes</var> argument is interpreted as a
  space-separated list of classes.
</dl>

<p>The <dfn
title=dom-Document-getElementsByTagName><code>getElementsByTagName(<var
title>localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If <var title>localName</var> is just a U+002A ASTERISK ("*") character,
 return a <code>NodeList</code> rooted at the <span>context node</span>, whose
 filter matches only <code>Element</code> nodes.

 <li><p>Otherwise, if the <span>context node</span> is an <span>HTML
 document</span>, return a <code>NodeList</code> rooted at the <span>context
 node</span>, whose filter matches only the following nodes:
  <ul>
   <li><code>Element</code> nodes in the <span>HTML namespace</span> that have a
   <code title=dom-node-localName>localName</code> <span
   title=case-sensitive>case-sensitively</span> equal to <var
   title>localName</var>, <span>converted to lowercase</span>.

   <li><code>Element</code> nodes, <em>not</em> in the <span>HTML
   namespace</span>, that have a <code title=dom-node-localName>localName</code>
   <span title=case-sensitive>case-sensitively</span> equal to <var
   title>localName</var>.
  </ul>

 <li><p>Otherwise, return a <code>NodeList</code> rooted at the <span>context
 node</span>, whose filter matches only <code>Element</code> nodes that have a
 <code title=dom-node-localName>localName</code> <span
 title=case-sensitive>case-sensitively</span> equal to <var
 title>localName</var>.
</ol>

<p>A new <code>NodeList</code> object must be returned each time.

<p class=note>Thus, in an <span>HTML document</span>, <code
title>document.getElementsByTagName("FOO")</code> will match <code
title>FOO</code> elements that aren't in the <span>HTML namespace</span>, and
<code title>foo</code> elements that are in the <span>HTML namespace</span>, but
not <code title>FOO</code> elements that are in the <span>HTML namespace</span>.


<p>The <dfn title=dom-Document-getElementsByTagNameNS><code>getElementsByTagNameNS(<var title>namespaceURI</var>, <var title>localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If both <var title>namespaceURI</var> and <var title>localName</var> are just the character U+002A ASTERISK ("*"), return a <code>NodeList</code> rooted at the <span>context node</span>, whose filter matches only <code>Element</code> nodes.
 <li><p>Otherwise, if <var title>namespaceURI</var> is just the character U+002A ASTERISK ("*"), return a <code>NodeList</code> rooted at the <span>context node</span>, whose filter matches only <code>Element</code> nodes with the <code title=dom-Node-localName>localName</code> equal to <var title>localName</var>.
 <li><p>Otherwise, if <var title>localName</var> is just the character U+002A ASTERISK ("*"), return a <code>NodeList</code> rooted at the <span>context node</span>, whose filter matches only <code>Element</code> nodes with the <code title=dom-Node-namespaceURI>namespaceURI</code> equal to <var title>namespaceURI</var>.
 <li><p>Otherwise, return a <code>NodeList</code> rooted at the <span>context node</span>, whose filter matches only <code>Element</code> nodes that have a <code title=dom-Node-namespaceURI>namespaceURI</code> equal to <var title>namespaceURI</var> and a <code title=dom-Node-localName>localName</code> equal to <var title>localName</var> (both in a <span>case-sensitive</span> manner).
</ol>
<p>A new <code>NodeList</code> object must be returned each time.


<p>The <dfn
title=dom-Document-getElementsByClassName><code>getElementsByClassName(<var
title>classNames</var>)</code></dfn> method takes a string that contains a
<span>set of space-separated tokens</span> representing <span
title=concept-class>classes</span>. When called, the method must return a <span
title=concept-collection-live>live</span> <code>NodeList</code> object
containing all the elements in the <span>context node</span>, in <span>tree
order</span>, that have all the <span title=concept-class>classes</span>
specified in the <var title>classNames</var> argument, having obtained the
<span title=concept-class>classes</span> by <span title="split a string on
spaces">splitting the string on spaces</span>. (Duplicates are ignored.) If
there are no tokens specified in the argument, then the method must return an
empty <code>NodeList</code>. If the document is in <span
title=concept-quirks-mode>quirks mode</span>, then the comparisons for the <span
title=concept-class>classes</span> must be done in an <span>ASCII
case-insensitive</span> manner, otherwise, the comparisons must be done in a
<span>case-sensitive</span> manner.
<p>A new <code>NodeList</code> object must be returned each time.

<div class="example">
 <p>Given the following XHTML fragment:</p>

 <pre>&lt;div id="example"&gt;
  &lt;p id="p1" class="aaa bbb"/&gt;
  &lt;p id="p2" class="aaa ccc"/&gt;
  &lt;p id="p3" class="bbb ccc"/&gt;
&lt;/div&gt;</pre>

 <p>A call to <code
 title=dom-Element-getElementsByClassName>document.getElementById('example').getElementsByClassName('aaa')</code>
 would return a <code>NodeList</code> with the two paragraphs <code
 title="">p1</code> and <code title="">p2</code> in it.</p>

 <p>A call to <code
 title=dom-Element-getElementsByClassName>getElementsByClassName('ccc&nbsp;bbb')</code> would only
 return one node, however, namely <code title="">p3</code>. A call
 to <code
 title=dom-Element-getElementsByClassName>document.getElementById('example').getElementsByClassName('bbb&nbsp;&nbsp;ccc&nbsp;')</code>
 would return the same thing.</p>

 <p>A call to <code
 title=dom-Element-getElementsByClassName>getElementsByClassName('aaa,bbb')</code> would return no
 nodes; none of the elements above are in the "aaa,bbb" class.</p>
</div>

<!-- v2:
>         * xGetParentElementByClassName(rootElement, className, tagName) -
> Navigates upwards until we hit a parent element with the given class name and
> optional tag name.
-->


<p>The <dfn title=dom-Document-getElementById><code>getElementById(<var
title>elementId</var>)</code></dfn> method must return the first
<code>Element</code> node, in <span>tree order</span>, in the <span>context
node</span> whose <span title=concept-ID>ID</span> is <var
title>elementId</var>, or null if there is none.

<hr>

<p>The <dfn title=dom-Document-importNode><code>importNode(<var
title>importedNode</var>, <var title>deep</var>)</code></dfn> method must run
the following steps:
<ol>
 <!-- Similar text for adoptNode -->
 <li><p>If the <span>context node</span> is an <span>XML document</span>, then
 if <var title>importedNode</var> or any of its descendant nodes or any of its
 <code title=dom-Node-attributes>attributes</code> or any of the <code
 title=dom-Node-attributes>attributes</code> of any descendant
 <code>Element</code> nodes has a <code
 title=dom-Node-localName>localName</code><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <code
 data-anolis-spec=xml>Name</code> production in XML or contains a U+003A COLON
 (":") character, raise an <code
 title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code> and abort
 these steps.

 <!--<li><p>If <var title>importedNode</var>'s <code
 title=dom-Node-ownerDocument>ownerDocument</code>'s <span>effective script
 origin</span> is not the <span title=same-origin
 data-anolis-spec=html>same</span> as the <span data-anolis-spec=html>effective
 script origin</span> of the <span>context node</span>, raise a <code
 title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</code> exception and abort
 these steps. (can't get a reference to a node that you can't adopt anyway) -->

 <li><p>Return a <span>clone</span> of <var title>importedNode</var>, with <var
 title>new ownerDocument</var> being the <span>context node</span>, and the <var
 title>clone children</var> flag set if <var title>deep</var> is true.
</ol>

<p>The <dfn title=dom-Document-adoptNode><code>adoptNode(<var
title>source</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var title>source</var> is a <code>Document</code> node or a
 <code>DocumentType</code> node, raise a <code
 title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code> exception and
 abort these steps.

 <!-- Similar text for importNode -->
 <li><p>If the <span>context node</span> is an <span>XML document</span>, then
 if <var title>source</var> or any of its descendant nodes or any of its <code
 title=dom-Node-attributes>attributes</code> or any of the <code
 title=dom-Node-attributes>attributes</code> of any descendant
 <code>Element</code> nodes has a <code
 title=dom-Node-localName>localName</code><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <code
 data-anolis-spec=xml>Name</code> production in XML or contains a U+003A COLON
 (":") character, raise an <code
 title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code> and abort
 these steps.

 <li><p>If <var title>source</var> is an <code>Element</code> node, it is
 <span>affected by a base URL change</span>.

 <!-- no security check -->
 <li><p>If <var title>source</var>'s <code
 title=dom-Node-parentNode>parentNode</code> is not null and its <code
 title=dom-Node-ownerDocument>ownerDocument</code> isn't equal to the
 <span>context node</span>, remove <var title>source</var> from its parent.

 <li><p>Set <var title>source</var>'s <code
 title=dom-Node-ownerDocument>ownerDocument</code> to the <span>context
 node</span>.

 <li><p>If <var title>source</var> is an <code>Element</code> node,
 set the <code title=dom-Node-ownerDocument>ownerDocument</code> of all
 <code>Attr</code> in its <code title=dom-Node-attributes>attributes</code>
 to the <span>context node</span>.

 <li><p>For each child node of <var title>source</var>, call <code
 title=dom-Document-adoptNode>adoptNode</code> on the <span>context node</span>,
 with the child node as its argument.

 <li><p>Return <var title>source</var>.
</ol>

<hr>

<dl class=domintro>
 <dt><var title>document</var> . <code title=dom-Document-compatMode>compatMode</code>
 <dd>
  <p>Returns the string "<code title>CSS1Compat</code>" if the <span>context
  node</span> is in <span title=concept-no-quirks-mode>no-quirks mode</span> or
  <span title=concept-limited-quirks-mode>limited-quirks mode</span>, and
  "<code title>BackCompat</code>", if the <code>Document</code> is in
  <span title=concept-quirks-mode>quirks mode</span>.
</dl>

<p class=XXX><dfn title=dom-Document-inputEncoding>inputEncoding</dfn>

<p class=XXX><dfn title=dom-Document-documentURI>documentURI</dfn>
Should document.documentURI really exist? be readonly?

<p>The <dfn title=dom-Document-compatMode><code>compatMode</code></dfn> IDL
attribute must return the literal string "<code title>CSS1Compat</code>" unless
the <span>context node</span> is in <span
title=concept-quirks-mode>quirks mode</span>, in which case it must instead
return the literal string "<code title>BackCompat</code>".

<!-- <dfn title=dom-Document-xmlVersion>xmlVersion</dfn>
http://lists.w3.org/Archives/Public/www-dom/2003JulSep/0049.html -->


<h4>Interface <code>DOMImplementation</code></h4>
<p>User agents must create a new <code>DOMImplementation</code> object whenever a new <code>Document</code> node is created and associate it with the that <code>Document</code> node.

<pre class=idl>interface <dfn>DOMImplementation</dfn> {
  boolean <span title=dom-DOMImplementation-hasFeature>hasFeature</span>(in DOMString feature, [TreatNullAs=EmptyString] in DOMString version);
  <span>DocumentType</span> <span title=dom-DOMImplementation-createDocumentType>createDocumentType</span>([TreatNullAs=EmptyString] in DOMString qualifiedName, in DOMString publicId, in DOMString systemId);
  <span>Document</span> <span title=dom-DOMImplementation-createDocument>createDocument</span>([TreatNullAs=EmptyString] in DOMString namespaceURI, [TreatNullAs=EmptyString] in DOMString qualifiedName, in DocumentType doctype);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);-->
  <span>Document</span> <span title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</span>(in DOMString title);
};</pre>

<p>The <dfn title=dom-DOMImplementation-hasFeature><code>hasFeature(<var title>feature</var>, <var title>version</var>)</code></dfn> method must return true if the UA supports the given feature <var title>feature</var> of version <var title>version</var>, and false otherwise.

<p>The <dfn title=dom-DOMImplementation-createDocumentType><code>createDocumentType(<var title>qualifiedName</var>, <var title>publicId</var>, <var title>systemId</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var title>qualifiedName</var> doesn't match the <code
 data-anolis-spec=xml>Name</code> production in XML, raise an <code
 title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps.
 <li><p>If <var title>qualifiedName</var> doesn't match the <code
 data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML, raise a
 <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and
 abort these steps.
 <!--<li><p>If <var title>publicId</var> contains a character that doesn't match the <code data-anolis-spec=xml>PubidChar</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. --> <!-- DOM3 didn't check this -->
 <!--<li><p>If <var title>systemId</var> contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE ("'") character, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <code>DocumentType</code> node with <code title=dom-Node-ownerDocument>ownerDocument</code> set to null, <code title=dom-DocumentType-name>name</code> set to <var title>qualifiedName</var>, <code title=dom-DocumentType-publicId>publicId</code> set to <var title>publicId</var>, and <code title=dom-DocumentType-systemId>systemId</code> set to <var title>systemId</var>.
</ol>
<p class=note>No check is performed that the <var title>publicId</var> matches the <code title>PublicChar</code> production in XML or that the <var title>systemId</var> doesn't contain both a quotation mark (") and an apostrophe (').

<p>The <dfn title=dom-DOMImplementation-createDocument><code>createDocument(<var title>namespaceURI</var>, <var title>qualifiedName</var>, <var title>doctype</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>Let <var title>document</var> be a new <code>Document</code> node.
 <li><p>Let <var title>element</var> be null.
 <li><p>If <var title>qualifiedName</var> is not the empty string, set <var title>element</var> to the result of invoking the <code title=dom-Document-createElementNS>createElementNS</code> method with the arguments <var title>namespaceURI</var> and <var title>qualifiedName</var> on <var title>document</var>. If that raised an exception, re-raise the same exception and abort these steps.
 <li>
  <p>If <var title>doctype</var> is not null, run the following substeps:
  <ol>
   <li><p>If the <var title>doctype</var>'s <code title=dom-Node-ownerDocument>ownerDocument</code> is not null, raise a <code title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</code> exception and abort the overall set of steps.
   <li><p>Set the <var title>doctype</var>'s <code title=dom-Node-ownerDocument>ownerDocument</code> to <var title>document</var>.
   <li><p>Append <var title>doctype</var> to <var title>document</var>.
  </ol>
 <li><p>If <var title>element</var> is not null, append <var title>element</var> to <var title>document</var>.
 <li><p>Return <var title>document</var>.
</ol>

<p class=XXX>exceptions for createDocument <a href=http://lists.w3.org/Archives/Public/www-dom/2005OctDec/0076.html>http://lists.w3.org/Archives/Public/www-dom/2005OctDec/0076.html</a>.

<p><span title="HTML document">HTML documents</span> can be created using the
<code
title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument()</code>
method.

<dl class=domintro>
 <dt><var title>doc</var> = <var title=dom-Window-document
 data-anolis-spec=window>document</var> . <code
 title=dom-Document-implementation>implementation</code> . <code
 title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</code>(
 <var title>title</var> )

 <dd><p>Returns a new <code>Document</code>, with a basic DOM already
 constructed with an appropriate <code title>title</code> element.
</dl>

<p>The <dfn
title=dom-DOMImplementation-createHTMLDocument><code>createHTMLDocument(<var
title>title</var>)</code></dfn> method, when invoked, must run the following
steps:

<ol>
 <li><p>Let <var title>doc</var> be a newly created <code>Document</code>
 object.

 <li><p>Mark <var title>doc</var> as being an <span>HTML document</span>.

 <li><p>Create a <code>DocumentType</code> node with the <code
 title=dom-DocumentType-name>name</code> attribute set to the string "<code
 title>html</code>", and the other attributes specific to
 <code>DocumentType</code> objects set to the empty string, null, and empty
 lists, as appropriate. Append the newly created node to <var title>doc</var>.

 <li><p>Create an <code title>html</code> element in the <span>HTML
 namespace</span>, and append it to <var title>doc</var>.

 <li><p>Create a <code title>head</code> element in the <span>HTML
 namespace</span>, and append it to the <code title>html</code> element created
 in the previous step.

 <li><p>Create a <code title>title</code> element in the <span>HTML
 namespace</span>, and append it to the <code title>head</code> element created
 in the previous step.

 <li><p>Create a <code>Text</code> node, and set its <code
 title=dom-CharacterData-data>data</code> attribute to the string given by the
 method's argument (which could be the empty string). Append it to the
 <code title>title</code> element created in the previous step.

 <li><p>Create a <code title>body</code> element in the <span>HTML
 namespace</span>, and append it to the <code title>html</code> element created
 in the earlier step.

 <li><p>Return <var title>doc</var>.</p></li>
</ol>


<h3>Interface <code>Attr</code></h3>
<pre class=idl>interface <dfn>Attr</dfn> : <span>Node</span> {
  readonly attribute DOMString <span title=dom-Attr-name>name</span>;
  readonly attribute boolean <span title=dom-Attr-specified>specified</span>;
           attribute DOMString <span title=dom-Attr-value>value</span>;
  readonly attribute <span>Element</span> <span title=dom-Attr-ownerElement>ownerElement</span>;<!--
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;-->
};</pre>

<p><code>Attr</code> nodes represent <dfn
title=concept-attribute>attributes</dfn>. They have a <dfn
title=concept-attribute-name>name</dfn> and an <dfn
title=concept-attribute-element>element</dfn> associated with them when they are
created<!--, or when they are passed as the argument to the <code
title=dom-Element-setAttributeNode>setAttributeNode</code> method.
[createAttribute]-->. <code>Attr</code> nodes are not considered part of the
document tree, so their <code title=dom-Node-parentNode>parentNode</code>, <code
title=dom-Node-previousSibling>previousSibling</code> and <code
title=dom-Node-nextSibling>nextSibling</code> attributes return null. Also, its
child nodes can not be manipulated directly through the <code
title=dom-Node-insertBefore>insertBefore</code>, <code
title=dom-Node-replaceChild>replaceChild</code> and <code
title=dom-Node-appendChild>appendChild</code> methods.

<p>The <dfn title=dom-Attr-name><code>name</code></dfn> attribute must return
the <span title=concept-attribute-name>name</span> associated with the
<span>context node</span>.

<p>The <dfn title=dom-Attr-specified><code>specified</code></dfn> attribute must
return true.

<p>The <dfn title=dom-Attr-value><code>value</code></dfn> attribute, on getting,
must return the same value as the <code
title=dom-Node-textContent>textContent</code> IDL attribute on the
<span>context node</span>, and on setting, must act as if the <code
title=dom-Node-textContent>textContent</code> IDL attribute on the
<span>context node</span> had been set to the new value.

<p>The <dfn title=dom-Attr-ownerElement><code>ownerElement</code></dfn>
attribute must return the <span title=concept-attribute-element>element</span>
associated with the <span>context node</span><!--, if there is one, or null
otherwise [createAttribute]-->.

<hr>

<p>This specification further defines two special types of <span
title=concept-attribute>attributes</span>: <span title=concept-ID-attribute>ID
attributes</span> and <span title=concept-class-attribute>class
attributes</span>.

<p><dfn title=concept-ID-attribute>ID attributes</dfn> must have a
<code title=dom-Attr-value>value</code> that contains at least one character and
does not contain any <span title="space character">space characters</span>. The
<code title=dom-Attr-value>value</code> must be unique amongst all the <span
title=concept-id>IDs</span> in the element's <span>home subtree</span>.

<p class=note>For example, the <code title=attr-id
data-anolis-spec=html>id</code> attribute in HTML is an <span
title=concept-ID-attribute>ID attribute</span>, as well as the <code
title>id</code> attributes in MathML and SVG, and the <code title>id</code>
attribute in the <span>XML namespace</span>. <span data-anolis-ref>HTML</span>
<span data-anolis-ref>MATHML</span> <span data-anolis-ref>SVG</span> <span
data-anolis-ref>XMLID</span>

<p><dfn title=concept-class-attribute>Class attributes</dfn> must have a
<code title=dom-Attr-value>value</code> that is a <span>set of space-separated
tokens</span> representing the various <dfn title=concept-class>classes</dfn>
that the element belongs to.

<p>The <span title=concept-class>classes</span> that an <code>Element</code>
node has associated with it is the set of all the <span
title=concept-class>classes</span> returned when the value of the <span
title=concept-class-attribute>class attribute</span> is <span
title="split a string on spaces">split on spaces</span>. (Duplicates are
ignored.)

<p class=note>The <code title>class</code> attributes in HTML, MathML and SVG
are all <span title=concept-class-attribute>class attributes</span>. <span
data-anolis-ref>HTML</span> <span data-anolis-ref>MATHML</span> <span
data-anolis-ref>SVG</span>

<p class=note>This specification does not <!--normatively--> define the <span
title=concept-attribute-name>name</span> of <span
title=concept-id-attribute>ID</span> or <span
title=concept-class-attribute>class attributes</span>.


<h3>Interface <code>Element</code></h3>
<pre class=idl>interface <dfn>Element</dfn> : <span>Node</span> {
  readonly attribute DOMString <span title=dom-Element-tagName>tagName</span>;
  DOMString? <span title=dom-Element-getAttribute>getAttribute</span>(in DOMString <var title>name</var>);
  void <span title=dom-Element-setAttribute>setAttribute</span>(in DOMString <var title>name</var>, in DOMString <var title>value</var>);
  void <span title=dom-Element-removeAttribute>removeAttribute</span>(in DOMString name);<!--
  Attr <span title=dom-Element-getAttributeNode>getAttributeNode</span>(in DOMString name);
  Attr <span title=dom-Element-setAttributeNode>setAttributeNode</span>(in Attr newAttr);
  Attr <span title=dom-Element-removeAttributeNode>removeAttributeNode</span>(in Attr oldAttr);-->
  <span>NodeList</span> <span title=dom-Element-getElementsByTagName>getElementsByTagName</span>(in DOMString name);
  <span>NodeList</span> <span title=dom-Element-getElementsByClassName>getElementsByClassName</span>(in DOMString classNames);
  DOMString? <span title=dom-Element-getAttributeNS>getAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);
  void <span title=dom-Element-setAttributeNS>setAttributeNS</span>(in DOMString namespaceURI, in DOMString qualifiedName, in DOMString value);
  void <span title=dom-Element-removeAttributeNS>removeAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);<!--
  Attr <span title=dom-Element-getAttributeNodeNS>getAttributeNodeNS</span>(in DOMString namespaceURI, in DOMString localName);
  Attr getAttributeNodeNS(in DOMString namespaceURI, in DOMString localName);-->
  <span>NodeList</span> <span title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</span>(in DOMString namespaceURI, in DOMString localName);
  boolean <span title=dom-Element-hasAttribute>hasAttribute</span>(in DOMString name);
  boolean <span title=dom-Element-hasAttributeNS>hasAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);<!--
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(in DOMString name, in boolean isId);
  void setIdAttributeNS(in DOMString namespaceURI, in DOMString localName, in boolean isId);
  void setIdAttributeNode(in Attr idAttr, in boolean isId);-->
           attribute <span>HTMLCollection</span> <span title=dom-Element-children>children</span>;
};</pre>

<p><code>Element</code> nodes can have a <dfn title=concept-id>unique
identifier (ID)</dfn> associated with them. User agents must associate the
<code title=dom-Attr-value>value</code> of all <span
title=concept-ID-attribute>ID attributes</span> in the <code>Element</code>
node's <code title=dom-Node-attributes>attributes</code> with the
<code>Element</code> node, unless it contains less than one character or
contains any <span title="space character">space characters</span>.

<p>Specifications may define <dfn>base URL change steps</dfn>.

<p>When an <code>Element</code> node is <dfn>affected by a base URL
change</dfn>, the user agent must run the <span>base URL change steps</span>, as
defined in <span>other applicable specifications</span>.

<p>The <dfn title=dom-Element-tagName><code>tagName</code></dfn> attribute must,
on getting, run the following steps:
<ol>
 <li><p>If the <span>context node</span>'s <code
 title=dom-Node-prefix>prefix</code> is not null, let <var title>tagName</var>
 be the concatenation of the <span>context node</span>'s <code
 title=dom-Node-prefix>prefix</code>, a U+003E COLON (":") character and its
 <code title=dom-Node-localName>localName</code>. Otherwise, let <var
 title>tagName</var> be just the the <span>context node</span>'s <code
 title=dom-Node-localName>localName</code>.

 <li><p>If the <span>context node</span> is in the <span>HTML namespace</span>
 and its <code title=dom-Node-ownerDocument>ownerDocument</code> is an
 <span>HTML document</span>, return <var title>tagName</var>, <span>converted to
 uppercase</span>. Otherwise, return <var title>tagName</var>.
</ol>

<p>The <dfn title=dom-Element-getAttribute><code>getAttribute(<var
title>name</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If the <span>context node</span> is in the <span>HTML namespace</span>
 and its <code title=dom-Node-ownerDocument>ownerDocument</code> is an
 <span>HTML document</span>, let <var title>name</var> be <var title>name</var>,
 <span>converted to lowercase</span>.

 <li><p>Return the value of the first attribute in the <span>context
 node</span>'s <code title=dom-Node-attributes>attributes</code> whose <span
 title=concept-attribute-name>name</span> <span
 title=case-sensitive>case-sensitively</span> equals the first argument, in any
 namespace, if the attribute is present, or null otherwise.
</ol>

<p>The <dfn title=dom-Element-setAttribute><code>setAttribute(<var
title>name</var>, <var title>value</var>)</code></dfn> method must run the
following steps:

<ol>
 <li><p>If <var title>name</var> is empty or <var title>name</var> doesn't
 match the <code data-anolis-spec=xml>Name</code> production in XML, raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code>
 exception and abort these steps.

 <li class=XXX><p>Do something about <var title>name</var> == "xmlns"?
 <a href=https://bugzilla.mozilla.org/show_bug.cgi?id=315805>Moz bug 315805</a>

 <li><p>If the <span>context node</span> is in the <span>HTML namespace</span>
 and its <code title=dom-Node-ownerDocument>ownerDocument</code> is an
 <span>HTML document</span>, let <var title>name</var> be <var title>name</var>,
 <span>converted to lowercase</span>.

 <li><p>If the node doesn't have an attribute whose <span
 title=concept-attribute-name>name</span> <span
 title=case-sensitive>case-sensitively</span> equals <var title>name</var>,
 create an <code>Attr</code> node, with <var title>name</var> as its <span
 title=concept-attribute-name>name</span> and the <span>context node</span> as
 its <span title=concept-attribute-element>element</span>. Set its <code
 title=dom-Attr-value>value</code> to <var title>value</var>. Append this node
 to the <span title="context node">context node's</span> <code
 title=dom-Node-attributes>attributes</code>, as its last item.

 <li><p>Otherwise, set the <code title=dom-Attr-value>value</code> of the first
 attribute in the <span title="context node">context node's</span> <code
 title=dom-Node-attributes>attributes</code> whose <span
 title=concept-attribute-name>name</span> <span
 title=case-sensitive>case-sensitively</span> equals <var title>name</var>,
 in any namespace, to <var title>value</var>.
</ol>

<p class=XXX><dfn title=dom-Element-removeAttribute>removeAttribute</dfn>

<!--<dfn title=dom-Element-getAttributeNode>getAttributeNode</dfn>: when the
Element.getAttributeNode() method is invoked on an HTML element, the name
argument must be converted to ASCII lowercase before the element's attributes
are examined. (In HTML documents.) -->

<!-- <dfn title=dom-Element-setAttributeNode>setAttributeNode</dfn>: when an
Attr node is set on an HTML element using Element.setAttributeNode(), it must
have its name converted to ASCII lowercase before the element is affected.
(In HTML documents.) -->

<hr>

<p class=XXX><dfn title=dom-Element-getElementsByTagName>getElementsByTagName</dfn>


<p>The <dfn
title=dom-Element-getElementsByClassName><code>getElementsByClassName(<var
title>classNames</var>)</code></dfn> method on the <code>Element</code>
interface must return a <span title=concept-collection-live>live</span>
<code>NodeList</code> with the nodes that the <code
title="dom-Document-getElementsByClassName">getElementsByClassName</code>
method would return when called on the <span title="context node">context
node's</span> <code title=dom-Node-ownerDocument>ownerDocument</code> and
passed the same argument(s), excluding any elements that are not descendants of
the <span>context node</span> on which the method was invoked.
<p>A new <code>NodeList</code> object must be returned each time.

<hr>

<p class=XXX><dfn title=dom-Element-getAttributeNS>getAttributeNS</dfn> (might return null; Gecko and WebKit don't)

<p class=XXX><dfn title=dom-Element-setAttributeNS>setAttributeNS</dfn>

<p class=XXX><dfn title=dom-Element-removeAttributeNS>removeAttributeNS</dfn>

<p class=XXX><dfn title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</dfn>

<p class=XXX><dfn title=dom-Element-hasAttribute>hasAttribute</dfn>

<p class=XXX><dfn title=dom-Element-hasAttributeNS>hasAttributeNS</dfn>

<p>The <dfn title=dom-Element-children><code>children</code></dfn> attribute
must return an <code>HTMLCollection</code> <span
title=concept-collection>collection</span>, rooted at the <span>context
node</span>, whose filter matches only <code>Element</code> nodes whose <code
title=dom-Node-parentNode>parentNode</code> is the <span>context node</span>.
<span class=XXX>Or a <code>NodeList</code>?</span> 


<h3>Interface <code>DocumentType</code></h3>
<pre class=idl>interface <dfn>DocumentType</dfn> : <span>Node</span> {
  readonly attribute DOMString <span title=dom-DocumentType-name>name</span>;<!--
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;-->
  readonly attribute DOMString <span title=dom-DocumentType-publicId>publicId</span>;
  readonly attribute DOMString <span title=dom-DocumentType-systemId>systemId</span>;<!--
  readonly attribute DOMString internalSubset;-->
};</pre>

<p class=XXX><dfn title=dom-DocumentType-name>name</dfn>

<p class=XXX><dfn title=dom-DocumentType-publicId>publicId</dfn>

<p class=XXX><dfn title=dom-DocumentType-systemId>systemId</dfn>


<h3>Interface <code>ProcessingInstruction</code></h3>
<pre class=idl>interface <dfn>ProcessingInstruction</dfn> : <span>Node</span> {
  readonly attribute DOMString <span title=dom-ProcessingInstruction-target>target</span>;
           attribute DOMString <span title=dom-ProcessingInstruction-data>data</span>;
};</pre>

<p class=XXX><dfn title=dom-ProcessingInstruction-target>target</dfn>

<p class=XXX><dfn title=dom-ProcessingInstruction-data>data</dfn>


<h3>Interface <code>CharacterData</code></h3>
<pre class=idl>interface <dfn>CharacterData</dfn> : <span>Node</span> {
  [TreatNullAs=EmptyString] attribute DOMString <span title=dom-CharacterData-data>data</span>;
  readonly attribute unsigned long <span title=dom-CharacterData-length>length</span>;
  DOMString <span title=dom-CharacterData-substringData>substringData</span>(in unsigned long offset, in unsigned long count);
  void <span title=dom-CharacterData-appendData>appendData</span>(in DOMString arg);
  void <span title=dom-CharacterData-insertData>insertData</span>(in unsigned long offset, in DOMString arg);
  void <span title=dom-CharacterData-deleteData>deleteData</span>(in unsigned long offset, in unsigned long count);
  void <span title=dom-CharacterData-replaceData>replaceData</span>(in unsigned long offset, in unsigned long count, in DOMString arg);
};</pre>

<p>The <dfn title=dom-CharacterData-data><code>data</code></dfn> attribute must, on getting, return the data of the node, and on setting, must change the node's data to the new value.

<p>The <dfn title=dom-CharacterData-length><code>length</code></dfn> attribute must, on getting, return the number of UTF-16 code units represented by the node's data.

<p>The <dfn title=dom-CharacterData-substringData><code>substringData(<var
title>offset</var>, <var title>count</var>)</code></dfn> method must run the
following steps:

<ol>
 <li><p>If <var title>offset</var> is negative or is greater than the
 <span>context node</span>'s <code title=dom-CharacterData-length>length</code>,
 or if <var title>count</var> is negative, raise an <code
 title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</code> exception and abort
 these steps.

 <li><p>If <span title><var title>offset</var>+<var title>count</var></span> is
 greater than the <span>context node</span>'s <code
 title=dom-CharacterData-length>length</code>, return a <code
 data-anolis-spec=webidl>DOMString</code> whose value is the UTF-16 code units
 from the <var title>offset</var>th UTF-16 code unit to the end of <var
 title>data</var>.

 <li><p>Return a <code data-anolis-spec=webidl>DOMString</code> whose value is
 the UTF-16 code units from the <var title>offset</var>th UTF-16 code unit to
 the <span title><var title>offset</var>+<var title>count</var></span>th UTF-16
 code unit in <var title>data</var>.
</ol>

<p class=XXX><dfn title=dom-CharacterData-appendData>appendData</dfn>

<p class=XXX><dfn title=dom-CharacterData-insertData>insertData</dfn>

<p class=XXX><dfn title=dom-CharacterData-deleteData>deleteData</dfn>

<p class=XXX><dfn title=dom-CharacterData-replaceData>replaceData</dfn>


<h3>Interface <code>Text</code></h3>
<pre class=idl>interface <dfn>Text</dfn> : <span>CharacterData</span> {
  <span>Text</span> <span title=dom-Text-splitText>splitText</span>(in unsigned long offset);<!--
  readonly attribute boolean isElementContentWhitespace;-->
  readonly attribute DOMString <span title=dom-Text-wholeText>wholeText</span>;
  <span>Text</span> <span title=dom-Text-replaceWholeText>replaceWholeText</span>(in DOMString content);
};</pre>

<p class=XXX><dfn title=dom-Text-splitText>splitText</dfn>

<p class=XXX><dfn title=dom-Text-wholeText>wholeText</dfn>

<p class=XXX><dfn title=dom-Text-replaceWholeText>replaceWholeText</dfn>

<!-- isElementContentWhitespace: Mozilla returns true if the node contains only
space, tab, newline -->


<h3>Interface <code>Comment</code></h3>
<pre class=idl>interface <dfn>Comment</dfn> : <span>CharacterData</span> {
};</pre>



<h2>Collections</h2>
<p>A <dfn title=concept-collection>collection</dfn> is an object that represents
a lists of DOM nodes. A <span title=concept-collection>collection</span> can be
either <dfn title=concept-collection-live>live</dfn> or <dfn
title=concept-collection-static>static</dfn>. Unless otherwise stated, a <span
title=concept-collection>collection</span> must be <span
title=concept-collection-live>live</span>.

<p>If a <span title=concept-collection>collection</span> is <span
title=concept-collection-live>live</span>, then the attributes and methods on
that object must</span> operate on the actual underlying data, not a snapshot of
the data.

<p>When a <span title=concept-collection>collection</span> is created, a filter
and a root are associated with it.

<p>The <span title=concept-collection>collection</span> then <dfn
title="represented by the collection">represents</dfn> a view of the subtree
rooted at the <span title=concept-collection>collection's</span> root,
containing only nodes that match the given filter. The view is linear. In the
absence of specific requirements to the contrary, the nodes within the <span
title=concept-collection>collection</span> must be sorted in <span>tree
order</span>.

<p>An attribute that returns a <span title=concept-collection-live>live</span>
<span title=concept-collection>collection</span> must return the same object
every time it is retrieved.


<h3>Interface <code>NodeList</code></h3>
<p>A <code>NodeList</code> object is a kind of <span
title=concept-collection>collection</span>.

<pre class=idl>interface <dfn>NodeList</dfn> {
  getter <span>Node</span> <span title=dom-NodeList-item>item</span>(in unsigned long index);
  readonly attribute unsigned long <span title=dom-NodeList-length>length</span>;
};</pre>

<p>The <dfn title=dom-NodeList-item><code>item(<var
title>index</var>)</code></dfn> method must return the <var title>index</var>th
node in the <span title=concept-collection>collection</span>. If there is no
<var title>index</var>th node in the <span
title=concept-collection>collection</span>, then the method must return null.

<p>The <dfn title=dom-NodeList-length><code>length</code></dfn> attribute must,
on getting, return the number of nodes <span>represented by the
collection</span>.

<p><code>NodeList</code>s are enumerable. <span class=XXX>Explain? <code
title>for ... in</code></span>


<h3>Interface <code>HTMLCollection</code></h3>
<p>The <code>HTMLCollection</code> interface represents a generic <span
title=concept-collection>collection</span> of elements.

<p class=note>This interface is called <code>HTMLCollection</code> for
historical reasons. The various getters on this interface return <code
data-anolis-spec=webidl>object</code> for interfaces that inherit from
it, which return other objects for historical reasons.

<pre class=idl>interface <dfn>HTMLCollection</dfn> {
readonly attribute unsigned long <span title=dom-HTMLCollection-length>length</span>;
caller getter object <span title=dom-HTMLCollection-item>item</span>(in unsigned long index); // only returns Element
caller getter object <span title=dom-HTMLCollection-namedItem>namedItem</span>(in DOMString name); // only returns Element
};</pre>

<dl class=domintro>
 <dt><var title>collection</var> . <code title=dom-HTMLCollection-length>length</code>
 <dd>
  <p>Returns the number of elements in the collection.

 <dt><var title>element</var> = <var title>collection</var> . <code title=dom-HTMLCollection-item>item</code>(<var title>index</var>)
 <dt><var title>collection</var>[<var title>index</var>]
 <dt><var title>collection</var>(<var title>index</var>)
 <dd>
  <p>Returns the item with index <var title>index</var> from the collection. The items are sorted in <span>tree order</span>.
  <p>Returns null if <var title>index</var> is out of range.

 <dt><var title>element</var> = <var title>collection</var> . <code title=dom-HTMLCollection-namedItem>namedItem</code>(<var title>name</var>)</dt>
 <dt><var title>collection</var>[<var title>name</var>]</dt>
 <dt><var title>collection</var>(<var title>name</var>)</dt>
 <dd>
  <p>Returns the first item with <span title="concept-id">ID</span> or name <var title>name</var>
  from the collection.</p>
  <p>Returns null if no element with that <span title="concept-id">ID</span> or name could be found.</p>
  <p>Only <code title>a</code>, <code title>applet</code title>, <code title>area</code>,
  <code title>embed</code>, <code title>form</code>, <code title>frame</code>,
  <code title>frameset</code>, <code title>iframe</code>, <code title>img</code>, and
  <code title>object</code> elements in the <span>HTML namespace</span> can have a
  name for the purpose of this method; their name is given by the value of their
  <code title>name</code> attribute.</p>
 </dd>
</dl>

<p>The object's <span data-anolis-spec=webidl>supported property indices</span>
are the numbers in the range zero to one less than the number of nodes
<span>represented by the collection</span>. If there are no such elements, then
there are no <span data-anolis-spec=webidl>supported property indices</span>.

<p>The <dfn title=dom-HTMLCollection-length><code>length</code></dfn> attribute
must return the number of nodes <span>represented by the collection</span>.

<p>The <dfn title=dom-HTMLCollection-item><code>item(<var
title>index</var>)</code></dfn> method must return the <var
title>index</var>th node in the collection. If there is no <var
title>index</var>th node in the collection, then the method must
return null.

<p>The <span data-anolis-spec=webidl>supported property names</span> consist
of the values of the <code title>name</code> attributes of each <code
title>a</code>, <code title>applet</code>, <code title>area</code>, <code
title>embed</code>, <code title>form</code>, <code title>frame</code>, <code
title>frameset</code>, <code title>iframe</code>, <code title>img</code>, and
<code title>object</code> element in the <span>HTML namespace</span>,
<span>represented by the collection</span> with a <code title>name</code>
attribute, plus the list of <span title=concept-id>IDs</span> that the elements
<span>represented by the collection</span> have.

<p>The <dfn title=dom-HTMLCollection-namedItem><code>namedItem(<var
title>key</var>)</code></dfn> method must return the first node in the
<span title=concept-collection>collection</span> that matches the following
requirements:</p>

<ul>
 <li>It is an <code title>a</code>, <code title>applet</code>, <code
 title>area</code>, <code title>embed</code>, <code title>form</code>, <code
 title>frame</code>, <code title>frameset</code>, <code title>iframe</code>,
 <code title>img</code>, or <code title>object</code> element, in the <span>HTML
 namespace</span>, with a <code title>name</code> attribute equal to <var
 title>key</var>, or,

 <li>It is an element with an <span title=concept-id>ID</span>
 equal to <var title>key</var>.
</ul>

<p>If no such elements are found, then the method must return
null.


<h3>Interface <code>NamedNodeMap</code></h3>
<p>A <code>NamedNodeMap</code> object is a kind of <span
title=concept-collection>collection</span>, whose primary purpose is to expose
<code>Node</code>s by name.

<pre class=idl>interface <dfn>NamedNodeMap</dfn> {
  <span>Node</span> <span title=dom-NamedNodeMap-getNamedItem>getNamedItem</span>(in DOMString name);
  <span>Node</span> <span title=dom-NamedNodeMap-setNamedItem>setNamedItem</span>(in <span>Node</span> arg);
  <span>Node</span> <span title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</span>(in DOMString name);
  <span>Node</span> <span title=dom-NamedNodeMap-item>item</span>(in unsigned long index);
  readonly attribute unsigned long <span title=dom-NamedNodeMap-length>length</span>;
  <span>Node</span> <span title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</span>(in DOMString namespaceURI, in DOMString localName);
  <span>Node</span> <span title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</span>(in <span>Node</span> arg);
  <span>Node</span> <span title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</span>(in DOMString namespaceURI, in DOMString localName);
};</pre>

<p class=XXX><dfn title=dom-NamedNodeMap-getNamedItem>getNamedItem</dfn>

<p class=XXX><dfn title=dom-NamedNodeMap-setNamedItem>setNamedItem</dfn>

<p class=XXX><dfn title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</dfn>

<p class=XXX><dfn title=dom-NamedNodeMap-item>item</dfn>

<p>The <dfn title=dom-NamedNodeMap-length><code>length</code></dfn> attribute
must, on getting, return the number of nodes <span>represented by the
collection</span>.

<p class=XXX><dfn title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</dfn>

<p class=XXX><dfn title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</dfn>

<p class=XXX><dfn title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</dfn>



<h2>Lists</h2>
<h3>Interface <code>DOMStringList</code></h3>
<pre class=idl>interface <dfn>DOMStringList</dfn> {
  DOMString <span title=dom-DOMStringList-item>item</span>(in unsigned long index);
  readonly attribute unsigned long <span title=dom-DOMStringList-length>length</span>;
  boolean <span title=dom-DOMStringList-contains>contains</span>(in DOMString str);
};</pre>

<p class=XXX><dfn title=dom-DOMStringList-item>item</dfn>

<p class=XXX><dfn title=dom-DOMStringList-length>length</dfn>

<p class=XXX><dfn title=dom-DOMStringList-contains>contains</dfn>


<h3>Interface <code>DOMTokenList</code></h3>
<p>The <code>DOMTokenList</code> interface represents an interface
to an underlying string that consists of a <span>set of
space-separated tokens</span>.</p>

<p class="note"><code>DOMTokenList</code> objects are always
<span>case-sensitive</span>, even when the underlying string might
ordinarily be treated in a case-insensitive manner.</p>

<pre class="idl">interface <dfn>DOMTokenList</dfn> {
  readonly attribute unsigned long <span title="dom-DOMTokenList-length">length</span>;
  getter DOMString <span title="dom-DOMTokenList-item">item</span>(in unsigned long index);
  boolean <span title="dom-DOMTokenList-contains">contains</span>(in DOMString token);
  void <span title="dom-DOMTokenList-add">add</span>(in DOMString token);
  void <span title="dom-DOMTokenList-remove">remove</span>(in DOMString token);
  boolean <span title="dom-DOMTokenList-toggle">toggle</span>(in DOMString token);
  <span title="dom-DOMTokenList-toString">stringifier</span> DOMString ();
};</pre>

<dl class="domintro">

 <dt><var title>tokenlist</var> . <code title="dom-DOMTokenList-length">length</code></dt>
 <dd>
  <p>Returns the number of tokens in the string.</p>
 </dd>

 <dt><var title>element</var> = <var title>tokenlist</var> . <code title="dom-DOMTokenList-item">item</code>(<var title>index</var>)</dt>
 <dt><var title>tokenlist</var>[<var title>index</var>]</dt>
 <dd>
  <p>Returns the token with index <var title>index</var>. The tokens are returned in the order they are found in the underlying string.</p>
  <p>Returns null if <var title>index</var> is out of range.</p>
 </dd>

 <dt><var title>hastoken</var> = <var title>tokenlist</var> . <code title="dom-DOMTokenList-contains">contains</code>(<var title>token</var>)</dt>
 <dd>
  <p>Returns true if the <var title>token</var> is present; false otherwise.</p>
  <p>Throws a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception if <var title>token</var> is empty.</p>
  <p>Throws an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception if <var title>token</var> contains any spaces.</p>
 </dd>

 <dt><var title>tokenlist</var> . <code title="dom-DOMTokenList-add">add</code>(<var title>token</var>)</dt>
 <dd>
  <p>Adds <var title>token</var>, unless it is already present.</p>
  <p>Throws a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception if <var title>token</var> is empty.</p>
  <p>Throws an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception if <var title>token</var> contains any spaces.</p>
 </dd>

 <dt><var title>tokenlist</var> . <code title="dom-DOMTokenList-remove">remove</code>(<var title>token</var>)</dt>
 <dd>
  <p>Removes <var title>token</var> if it is present.</p>
  <p>Throws a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception if <var title>token</var> is empty.</p>
  <p>Throws an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception if <var title>token</var> contains any spaces.</p>
 </dd>

 <dt><var title>hastoken</var> = <var title>tokenlist</var> . <code title="dom-DOMTokenList-toggle">toggle</code>(<var title>token</var>)</dt>
 <dd>
  <p>Adds <var title>token</var> if it is not present, or removes
  it if it is. Returns true if <var title>token</var> is now
  present (it was added); returns false if it is not (it was
  removed).</p>
  <p>Throws a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception if <var title>token</var> is empty.</p>
  <p>Throws an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception if <var title>token</var> contains any spaces.</p>
 </dd>

</dl>

<div class="impl">

<p>The <dfn title="dom-DOMTokenList-length"><code>length</code></dfn>
attribute must return the number of tokens that result from <span
title="split a string on spaces">splitting the underlying string on
spaces</span>. This is the <var
title="dom-DOMTokenList-length">length</var>.</p>

<p>The object's <span data-anolis-spec=webidl>supported property
indices</span> are the numbers in the range zero to <span title=""><var
title="dom-DOMTokenList-length">length</var>&minus;1</span>, unless the <var
title="dom-DOMTokenList-length">length</var> is zero, in which case there are no
<span data-anolis-spec=webidl>supported property indices</span>.</p>

<p>The <dfn title="dom-DOMTokenList-item"><code>item(<var
title="">index</var>)</code></dfn> method must <span title="split a
string on spaces">split the underlying string on spaces</span>,
preserving the order of the tokens as found in the underlying
string, and then return the <var title>index</var>th item in this
list. If <var title>index</var> is equal to or greater than the
number of tokens, then the method must return null.</p>

<p class="example">For example, if the string is "<code title="">a b
a c</code>" then there are four tokens: the token with index 0 is
"<code title="">a</code>", the token with index 1 is "<code
title="">b</code>", the token with index 2 is "<code
title="">a</code>", and the token with index 3 is "<code
title="">c</code>".</p>

<p>The <dfn title="dom-DOMTokenList-contains"><code>contains(<var
title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title>token</var> argument is the empty string,
 then raise a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception and stop the
 algorithm.</li>

 <li>If the <var title>token</var> argument contains any <span
 title="space character">space characters</span>, then raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and stop the
 algorithm.</li>

 <li>Otherwise, <span title="split a string on spaces">split the
 underlying string on spaces</span> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the token indicated by <var title>token</var> is a
 <span>case-sensitive</span> match for one of the tokens in the
 object's underlying string then return true and stop this
 algorithm.</li>

 <li>Otherwise, return false.</li>

</ol>

<p>The <dfn title="dom-DOMTokenList-add"><code>add(<var
title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title>token</var> argument is the empty string,
 then raise a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception and stop the
 algorithm.</li>

 <li>If the <var title>token</var> argument contains any <span
 title="space character">space characters</span>, then raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and stop the
 algorithm.</li>

 <li>Otherwise, <span title="split a string on spaces">split the
 underlying string on spaces</span> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var title>token</var> is a
 <span>case-sensitive</span> match for one of the tokens in the
 <code>DOMTokenList</code> object's underlying string then stop the
 algorithm.</li>

 <li>Otherwise, if the <code>DOMTokenList</code> object's underlying
 string is not the empty string and the last character of that
 string is not a <span>space character</span>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var title>token</var> to the end of the
 <code>DOMTokenList</code> object's underlying string.</li>

</ol>

<p>The <dfn title="dom-DOMTokenList-remove"><code>remove(<var
title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title>token</var> argument is the empty string,
 then raise a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception and stop the
 algorithm.</li>

 <li>If the <var title>token</var> argument contains any <span
 title="space character">space characters</span>, then raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and stop the
 algorithm.</li>

 <li>Otherwise, <span title="remove a token from a string">remove
 the given <var title>token</var> from the underlying
 string</span>.</li>

</ol>

<p>The <dfn title="dom-DOMTokenList-toggle"><code>toggle(<var
title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title>token</var> argument is the empty string,
 then raise a <code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code> exception and stop the
 algorithm.</li>

 <li>If the <var title>token</var> argument contains any <span
 title="space character">space characters</span>, then raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and stop the
 algorithm.</li>

 <li>Otherwise, <span title="split a string on spaces">split the
 underlying string on spaces</span> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var title>token</var> is a
 <span>case-sensitive</span> match for one of the tokens in the
 <code>DOMTokenList</code> object's underlying string then <span
 title="remove a token from a string">remove the given <var
 title="">token</var> from the underlying string</span> and stop the
 algorithm, returning false.</li>

 <li>Otherwise, if the <code>DOMTokenList</code> object's underlying
 string is not the empty string and the last character of that
 string is not a <span>space character</span>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var title>token</var> to the end of the
 <code>DOMTokenList</code> object's underlying string.</li>

 <li>Return true.</li>

</ol>

<p>Objects implementing the <code>DOMTokenList</code> interface must
<dfn title="dom-DOMTokenList-toString">stringify</dfn> to the object's
underlying string representation.</p>

</div>


<h3>Interface <code>DOMSettableTokenList</code></h3>

<p>The <code>DOMSettableTokenList</code> interface is the same as the
<code>DOMTokenList</code> interface, except that it allows the
underlying string to be directly changed.</p>

<pre class="idl">interface <dfn>DOMSettableTokenList</dfn> : <span>DOMTokenList</span> {
            attribute DOMString <span title="dom-DOMSettableTokenList-value">value</span>;
};</pre>

<dl class="domintro">

 <dt><var title>tokenlist</var> . <code title="dom-DOMSettableTokenList-value">value</code></dt>
 <dd>
  <p>Returns the underlying string.</p>
  <p>Can be set, to change the underlying string.</p>
 </dd>

</dl>

<div class="impl">

<p>An object implementing the <code>DOMSettableTokenList</code>
interface must act as defined for the <code>DOMTokenList</code>
interface, except for the <code
title="dom-DOMSettableTokenList-value">value</code> attribute defined
here.</p>

<p>The <dfn
title="dom-DOMSettableTokenList-value"><code>value</code></dfn>
attribute must return the underlying string on getting, and must
replace the underlying string with the new value on setting.</p>

</div>



<h2>Historical interfaces</h2>
<p>This specification does not define the following interfaces:
<ul class=brief>
 <li><dfn><code>DOMUserData</code></dfn>
 <li><dfn><code>DOMObject</code></dfn>
 <li><dfn><code>NameList</code></dfn>
 <li><dfn><code>DOMImplementationList</code></dfn>
 <li><dfn><code>DOMImplementationSource</code></dfn>
 <li><dfn><code>TypeInfo</code></dfn>
 <li><dfn><code>UserDataHandler</code></dfn>
 <li><dfn><code>DOMError</code></dfn>
 <li><dfn><code>DOMErrorHandler</code></dfn>
 <li><dfn><code>DOMLocator</code></dfn>
 <li><dfn><code>DOMConfiguration</code></dfn>
 <li><dfn><code>CDATASection</code></dfn>
 <li><dfn><code>Notation</code></dfn>
 <li><dfn><code>Entity</code></dfn>
 <li><dfn><code>EntityReference</code></dfn>
</ul>



<h2 class="no-num" id="references">References</h2><!--REFS-->
<p>All references are normative unless marked "Non-normative".</p>

<!-- Dates are only included for standards older than the Web,
because the newer ones keep changing. -->

<div id=anolis-references></div>



<h2 class=no-num>Acknowledgements</h2>
<p>Thanks to

Anne van Kesteren,
Dethe Elza,
and
Henri Sivonen,

for their useful comments.

<p>Special thanks to Ian Hickson for first specifying some parts of this
specification in HTML. <span data-anolis-ref>HTML</span>


<script src="http://www.whatwg.org/specs/web-apps/current-work/dfn.js"></script>
