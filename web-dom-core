<!DOCTYPE html><meta charset=UTF-8>
<title>Web DOM Core</title>
<link href=http://www.whatwg.org/style/specification rel=stylesheet>
<style>
 pre, code { font-family:monospace, sans-serif; }
 h2 code, h3 code, h4 code,
 h2 :link, h3 :link, h4 :link,
 h2 :visited, h3 :visited, h4 :visited
 { font:inherit; color:inherit; font-style:italic; }
 @media print {
   [data-anolis-spec]::after {
     content: "[" attr(data-anolis-spec) "]";
     font-size: 0.6em;
     vertical-align: super;
     text-transform: uppercase;
   }
 }
</style>
<body class=draft>
<div class=head id=head>
<h1>Web DOM Core</h1>
<h2 class="no-num no-toc" id=work-in-progress-&mdash;-last-update-4-september-2010>Work in Progress &mdash; Last Update 4 September 2010</h2>
<dl>
 <dt>Editors
 <dd>Simon Pieters &lt;simonp@opera.com&gt;
 <dd>Geoffrey Sneddon &lt;gsneddon@opera.com&gt;
 <dd>Ms2ger &lt;ms2ger@gmail.com&gt;
 <dd>Anne van Kesteren &lt;annevk@opera.com&gt;

 <dt>PDF print version
 <dd><a href=web-dom-core.pdf>Letter</a>

 <dt>Version history
 <dd><a href=http://bitbucket.org/ms2ger/web-dom-core/>http://bitbucket.org/ms2ger/web-dom-core</a>
 <dd><a href=http://hg.gsnedders.com/web-dom-core>http://hg.gsnedders.com/web-dom-core</a>
 <dd><a href=http://simon.html5.org/specs/web-dom-core>http://simon.html5.org/specs/web-dom-core</a>
</dl>
</div>



<h2 class="no-num no-toc" id=issues>Issues</h2>

<ul class=XXX>
 <li>innerHTML etc on all Elements
  <a href=http://lists.w3.org/Archives/Public/public-html/2007Aug/0778.html>public-html/2007Aug/0778.html</a>
  <a href=http://lists.w3.org/Archives/Public/public-webapi/2007Aug/0070.html>public-webapi/2007Aug/0070.html</a>
 <li>\0 <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312>http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312</a>
 <li>[Reflect] <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90>http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90</a>
 <li>Perhaps we should move DOMStringMap to this spec...
</ul>



<h2 class="no-num no-toc" id=abstract>Abstract</h2>
<p>This specification defines the DOM Core part of the Web platform. The Document Object Model is a language- and platform neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. Web DOM Core mostly subsets DOM3 Core, but redefines some things and adds some features that were widely implemented already.



<h2 class="no-num no-toc" id=table-of-contents>Table of contents</h2>

<!--begin-toc-->
<ol class=toc>
 <li><a href=#goals><span class=secno>1 </span>Goals</a></li>
 <li><a href=#common-infrastructure><span class=secno>2 </span>Common infrastructure</a>
  <ol>
   <li><a href=#terminology><span class=secno>2.1 </span>Terminology</a></li>
   <li><a href=#conformance-requirements><span class=secno>2.2 </span>Conformance requirements</a>
    <ol>
     <li><a href=#dependencies><span class=secno>2.2.1 </span>Dependencies</a></li>
     <li><a href=#extensibility><span class=secno>2.2.2 </span>Extensibility</a></ol></li>
   <li><a href=#case-sensitivity><span class=secno>2.3 </span>Case-sensitivity</a></li>
   <li><a href=#common-microsyntaxes><span class=secno>2.4 </span>Common microsyntaxes</a>
    <ol>
     <li><a href=#common-parser-idioms><span class=secno>2.4.1 </span>Common parser idioms</a></li>
     <li><a href=#space-separated-tokens><span class=secno>2.4.2 </span>Space-separated tokens</a></ol></li>
   <li><a href=#dom-features><span class=secno>2.5 </span>DOM features</a></li>
   <li><a href=#cloning-nodes><span class=secno>2.6 </span>Cloning nodes</a></li>
   <li><a href=#legal-hierarchy><span class=secno>2.7 </span>Legal hierarchy</a></li>
   <li><a href=#namespaces><span class=secno>2.8 </span>Namespaces</a></ol></li>
 <li><a href=#basic-types><span class=secno>3 </span>Basic types</a></li>
 <li><a href=#exceptions><span class=secno>4 </span>Exceptions</a>
  <ol>
   <li><a href=#exception-domexception><span class=secno>4.1 </span>Exception <code>DOMException</code></a></ol></li>
 <li><a href=#nodes><span class=secno>5 </span>Nodes</a>
  <ol>
   <li><a href=#interface-node><span class=secno>5.1 </span>Interface <code>Node</code></a></li>
   <li><a href=#interface-documentfragment><span class=secno>5.2 </span>Interface <code>DocumentFragment</code></a></li>
   <li><a href=#interface-document><span class=secno>5.3 </span>Interface <code>Document</code></a>
    <ol>
     <li><a href=#interface-domimplementation><span class=secno>5.3.1 </span>Interface <code>DOMImplementation</code></a></ol></li>
   <li><a href=#interface-attr><span class=secno>5.4 </span>Interface <code>Attr</code></a></li>
   <li><a href=#interface-element><span class=secno>5.5 </span>Interface <code>Element</code></a></li>
   <li><a href=#interface-documenttype><span class=secno>5.6 </span>Interface <code>DocumentType</code></a></li>
   <li><a href=#interface-processinginstruction><span class=secno>5.7 </span>Interface <code>ProcessingInstruction</code></a></li>
   <li><a href=#interface-characterdata><span class=secno>5.8 </span>Interface <code>CharacterData</code></a></li>
   <li><a href=#interface-text><span class=secno>5.9 </span>Interface <code>Text</code></a></li>
   <li><a href=#interface-comment><span class=secno>5.10 </span>Interface <code>Comment</code></a></ol></li>
 <li><a href=#collections><span class=secno>6 </span>Collections</a>
  <ol>
   <li><a href=#interface-nodelist><span class=secno>6.1 </span>Interface <code>NodeList</code></a></li>
   <li><a href=#interface-htmlcollection><span class=secno>6.2 </span>Interface <code>HTMLCollection</code></a></li>
   <li><a href=#interface-namednodemap><span class=secno>6.3 </span>Interface <code>NamedNodeMap</code></a></ol></li>
 <li><a href=#lists><span class=secno>7 </span>Lists</a>
  <ol>
   <li><a href=#interface-domstringlist><span class=secno>7.1 </span>Interface <code>DOMStringList</code></a></li>
   <li><a href=#interface-domtokenlist><span class=secno>7.2 </span>Interface <code>DOMTokenList</code></a></li>
   <li><a href=#interface-domsettabletokenlist><span class=secno>7.3 </span>Interface <code>DOMSettableTokenList</code></a></ol></li>
 <li><a href=#historical><span class=secno>8 </span>Historical</a></li>
 <li><a class=no-num href=#references>References</a></li>
 <li><a class=no-num href=#acknowledgements>Acknowledgements</a></ol>
<!--end-toc-->



<h2 class="no-num no-toc" id=list-of-tables>List of tables</h2>
<div id=anolis-listoftables><ol><li><a href=#anolis-table-1>Cloned attributes</a><li><a href=#anolis-table-2>Value of nodeName, nodeValue, nodeType</a></ol></div>


<h2 id=goals><span class=secno>1 </span>Goals</h2>

<ul>
 <li>Align DOM Core with needs of ECMAScript first, everything else third. (Of course due to Web IDL it'll work, but compatibility with DOM Level 3 Core is not guaranteed.)</li>
 <li>Align DOM Core with existing implementations.</li>
 <li>Simplify DOM Core as much as possible.</li>
 <li>Import bits of HTML5 that ought to be in DOM Core.</li>
 <li>Prevent a dependency on HTML5.</li>
</ul>

<p>Obsoleting DOM Level 3 Core is not an explicit goal. It is a fine specification for Java servers.</p>

<p>New features might be added, once everything else is sort of stable.</p>


<h2 id=common-infrastructure><span class=secno>2 </span>Common infrastructure</h2>
<h3 id=terminology><span class=secno>2.1 </span>Terminology</h3>
<p>The term <dfn id=tree-order>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved (through the <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a>/<a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a> relationship).

<p>The term <dfn id=context-node>context node</dfn> means the <a href=#node><code>Node</code></a> on which the method or attribute being discussed was called.

<p>The term <dfn id=root-element>root element</dfn>, when not explicitly qualified
as referring to the document's root element, means the furthest
ancestor element node of whatever node is being discussed, or the
node itself if it has no ancestors. When the node is a part of the
document, then the node's <a href=#root-element>root element</a> is indeed the
document's root element; however, if the node is not currently part
of the document tree, the root element will be an orphaned node.</p>

<p>When an element's <a href=#root-element>root element</a> is the root element
of a <a href=#document><code>Document</code></a>, it is said to be <dfn id=in-a-document>in a
<code>Document</code></dfn>.

<p>A node's <dfn id=home-subtree>home subtree</dfn> is the subtree rooted at that
node's <a href=#root-element>root element</a>. When a node is <a href=#in-a-document>in a
<code>Document</code></a>, its <a href=#home-subtree>home subtree</a> is that
<a href=#document><code>Document</code></a>'s tree.

<p>The <dfn id=space-character title="space character">space characters</dfn>, for the
purposes of this specification, are U+0020 SPACE, U+0009 CHARACTER
TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and
U+000D CARRIAGE RETURN (CR).</p>


<h3 id=conformance-requirements><span class=secno>2.2 </span>Conformance requirements</h3>
<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.</p>

<p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in the normative parts of this document are to be
interpreted as described in RFC2119. For readability, these words do
not appear in all uppercase letters in this specification. <a data-anolis-ref="" href=#refsRFC2119>[RFC2119]</a></p>

<p>Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
abort these steps") are to be interpreted with the meaning of the
key word ("must", "should", "may", etc) used in introducing the
algorithm.</p>

<p>Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)</p>

<p id=hardwareLimitations>User agents may impose
implementation-specific limits on otherwise unconstrained inputs,
e.g. to prevent denial of service attacks, to guard against running
out of memory, or to work around platform-specific limitations.</p>

<p>When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

<p>Unless otherwise stated, string comparisons are done in a <a href=#case-sensitive>case-sensitive</a> manner.

<h4 id=dependencies><span class=secno>2.2.1 </span>Dependencies</h4>

<p>The IDL fragments in this specification must be interpreted as
required for conforming IDL fragments, as described in the Web IDL
specification. <a data-anolis-ref="" href=#refsWEBIDL>[WEBIDL]</a>

<p id=float-nan>Except where otherwise specified, if an IDL attribute that is a
floating point number type (<a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-float><code class=external data-anolis-spec=webidl>float</code></a>) is
assigned an Infinity or Not-a-Number (NaN) value, a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception must
be raised.

<p>Except where otherwise specified, if a method with an argument that is a
floating point number type (<a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-float><code class=external data-anolis-spec=webidl>float</code></a>) is
passed an Infinity or Not-a-Number (NaN) value, a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception
must be raised.

<p>Some of the terms used in this specification are defined in <cite>Web
IDL</cite>, <cite>XML</cite> and <cite>Namespaces in XML</cite>.
<a data-anolis-ref="" href=#refsWEBIDL>[WEBIDL]</a>
<a data-anolis-ref="" href=#refsXML>[XML]</a>
<a data-anolis-ref="" href=#refsXMLNS>[XMLNS]</a>

<h4 id=extensibility><span class=secno>2.2.2 </span>Extensibility</h4>

<p>Vendor-specific proprietary extensions to this specification are
strongly discouraged. Authors must not use such extensions, as
doing so reduces interoperability and fragments the user base,
allowing only users of specific user agents to access the content in
question.</p>

<p>If vendor-specific extensions are needed, the members should be
prefixed by vendor-specific strings to prevent clashes with future
versions of this specification. Extensions must be defined so that
the use of extensions neither contradicts nor causes the
non-conformance of functionality defined in the specification.</p>
<!-- thanks to QA Framework -->

<p>When vendor-neutral extensions to this specification are needed,
either this specification can be updated accordingly, or an
extension specification can be written that overrides the
requirements in this specification. When someone applying this
specification to their activities decides that they will recognise
the requirements of such an extension specification, it becomes an
<dfn id=other-applicable-specifications title="other applicable specifications">applicable
specification</dfn> for the purposes of conformance requirements in
this specification.</p>
<!-- http://www.w3.org/mid/17E341CD-E790-422C-9F9A-69347EE01CEB@iki.fi -->


<h3 id=case-sensitivity><span class=secno>2.3 </span>Case-sensitivity</h3>
<p>This specification defines several comparison operators for strings.
<p>Comparing two strings in a <dfn id=case-sensitive>case-sensitive</dfn> manner means comparing them exactly, codepoint for codepoint.
<p>Comparing two strings in a <dfn id=ascii-case-insensitive>ASCII case-insensitive</dfn> manner means comparing them exactly, codepoint for codepoint, except that the characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.
<p><dfn id=converted-to-uppercase title="converted to uppercase">Converting a string to uppercase</dfn> means replacing all characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).
<p><dfn id=converted-to-lowercase title="converted to lowercase">Converting a string to lowercase</dfn> means replacing all characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).


<h3 id=common-microsyntaxes><span class=secno>2.4 </span>Common microsyntaxes</h3>
<h4 id=common-parser-idioms><span class=secno>2.4.1 </span>Common parser idioms</h4>
<p>Some of the micro-parsers described below follow the pattern of
having an <var>input</var> variable that holds the string
being parsed, and having a <var>position</var> variable
pointing at the next character to parse in <var title="">input</var>.</p>

<p>For parsers based on this pattern, a step that requires the user
agent to <dfn id=collect-a-sequence-of-characters>collect a sequence of characters</dfn> means that the
following algorithm must be run, with <var>characters</var>
being the set of characters that can be collected:</p>

<ol>

 <li><p>Let <var>input</var> and <var title="">position</var> be the same variables as those of the same
 name in the algorithm that invoked these steps.</li>

 <li><p>Let <var>result</var> be the empty string.</li>

 <li><p>While <var>position</var> doesn't point past the
 end of <var>input</var> and the character at <var title="">position</var> is one of the <var title="">characters</var>, append that character to the end of <var title="">result</var> and advance <var>position</var> to
 the next character in <var>input</var>.</li>

 <li><p>Return <var>result</var>.</li>

</ol>

<p>The step <dfn id=skip-whitespace>skip whitespace</dfn> means that the user agent
must <a href=#collect-a-sequence-of-characters>collect a sequence of characters</a> that are <a href=#space-character title="space character">space characters</a>. The collected
characters are not used.

<h4 id=space-separated-tokens><span class=secno>2.4.2 </span>Space-separated tokens</h4>
<p>A <dfn id=set-of-space-separated-tokens>set of space-separated tokens</dfn> is a string containing
zero or more words separated by one or more <a href=#space-character title="space
character">space characters</a>, where words consist of any
string of one or more characters, none of which are <a href=#space-character title="space character">space characters</a>.</p>

<p>A string containing a <a href=#set-of-space-separated-tokens>set of space-separated tokens</a>
may have leading or trailing <a href=#space-character title="space character">space
characters</a>.</p>

<div class=impl>

<p>When a user agent has to <dfn id=split-a-string-on-spaces>split a string on spaces</dfn>, it
must use the following algorithm:</p>

<ol>

 <li><p>Let <var>input</var> be the string being
 parsed.</li>

 <li><p>Let <var>position</var> be a pointer into <var title="">input</var>, initially pointing at the start of the
 string.</li>

 <li><p>Let <var>tokens</var> be a list of tokens,
 initially empty.</li>

 <li><p><a href=#skip-whitespace>Skip whitespace</a></li>

 <li><p>While <var>position</var> is not past the end of
 <var>input</var>:</p>

  <ol>

   <li><p><a href=#collect-a-sequence-of-characters>Collect a sequence of characters</a> that are not
   <a href=#space-character title="space character">space characters</a>.</li>

   <li><p>Add the string collected in the previous step to <var title="">tokens</var>.</li>

   <li><p><a href=#skip-whitespace>Skip whitespace</a></li>

  </ol>

 </li>

 <li><p>Return <var>tokens</var>.</li>

</ol>

<p>When a user agent has to <dfn id=remove-a-token-from-a-string>remove a token from a string</dfn>,
it must use the following algorithm:</p>

<ol>

 <li><p>Let <var>input</var> be the string being modified.

 <li><p>Let <var>token</var> be the token being removed. It will not
 contain any <a href=#space-character title="space character">space characters</a>.

 <li><p>Let <var>output</var> be the output string, initially empty.

 <li><p>Let <var>position</var> be a pointer into <var>input</var>,
 initially pointing at the start of the string.

 <li><p><i title="">Loop</i>: If <var>position</var> is beyond the end of
 <var>input</var>, abort these steps.

 <li>
  <p>If the character at <var>position</var> is a <a href=#space-character>space
  character</a>:

  <ol>
   <li><p>Append the character at <var>position</var> to the end of <var title="">output</var>.

   <li><p>Advance <var>position</var> so it points at the next character
   in <var>input</var>.

   <li><p>Return to the step labeled <i title="">loop</i>.
  </ol>

 <li><p>Otherwise, the character at <var>position</var> is the first
 character of a token. <a href=#collect-a-sequence-of-characters>Collect a sequence of characters</a> that are
 not <a href=#space-character title="space character">space characters</a>, and let that be <var title="">s</var>.

 <li>
  <p>If <var>s</var> is exactly equal to <var>token</var>, then:

  <ol>
   <li><p><a href=#skip-whitespace>Skip whitespace</a> (in <var>input</var>).

   <li><p>Remove any <a href=#space-character title="space character">space characters</a>
   currently at the end of <var>output</var>.

   <li><p>If <var>position</var> is not past the end of <var title="">input</var>, and <var>output</var> is not the empty string,
   append a single U+0020 SPACE character at the end of <var>output</var>.
  </ol>

 <li><p>Otherwise, append <var>s</var> to the end of <var title="">output</var>.

 <li><p>Return to the step labeled <i title="">loop</i>.</li>
</ol>

<p class=note>This causes any occurrences of the token to be
removed from the string, and any spaces that were surrounding the
token to be collapsed to a single space, except at the start and end
of the string, where such spaces are removed.</p>

</div>


<h3 id=dom-features><span class=secno>2.5 </span>DOM features</h3>
<p>A <dfn id=concept-domfeature title=concept-DOMfeature>DOM feature</dfn> is a unique,
<a href=#ascii-case-insensitive>ASCII case-insensitive</a> string that represents a certain feature of
the user agent.

<p>A <dfn id=concept-domfeatureversion title=concept-DOMfeatureversion>DOM feature version</dfn> is a (<var title="">feature string</var>,&nbsp;<var>version</var>) tuple, where <var title="">feature string</var> is <a href=#concept-domfeature title=concept-DOMfeature>DOM feature</a>
and <var>version</var> is a <a href=#case-sensitive>case-sensitive</a> string
representing a version number.
<!--of the form "<var>major</var>.<var>minor</var>".-->

<p>Specifications may define which <a href=#concept-domfeature title=concept-DOMfeature>DOM
features</a> a user agent is to <dfn id=concept-support-domfeature title=concept-support-DOMfeature>support</dfn>, as well as an associated list of
one or more <a href=#case-sensitive>case-sensitive</a> strings representing version numbers,
and under which circumstances.

<p>A user agent must <dfn id=concept-support-domfeatureversion title=concept-support-DOMfeatureversion>support</dfn>
a <a href=#concept-domfeatureversion title=concept-DOMfeatureversion>DOM feature version</a> (<var title="">feature string</var>,&nbsp;<var>version</var>) if it <a href=#concept-support-domfeature title=concept-support-DOMfeature>supports</a> a <a href=#concept-domfeature title=concept-DOMfeature>DOM feature</a> that is a <a href=#ascii-case-insensitive>ASCII
case-insensitive</a> match for <var>feature string</var> and <var title="">version</var> is in the associated list of versions.

<p>A user agent must <a href=#concept-support-domfeatureversion title=concept-support-DOMfeatureversion>support</a> the (<var title="">feature</var>,&nbsp;"") tuple if it <a href=#concept-support-domfeature title=concept-support-DOMfeature>supports</a> a <a href=#concept-domfeature title=concept-DOMfeature>DOM feature</a> that is a <a href=#ascii-case-insensitive>ASCII
case-insensitive</a> match for <var>feature string</var>.

<p class=note>Authors are strongly discouraged from using <a href=#concept-domfeature title=concept-DOMfeature>DOM features</a>, as they are notoriously unreliable
and imprecise. Authors are encouraged to rely on explicit feature testing or
graceful degradation.

<p>For historical reasons, user agents must <a href=#concept-support-domfeatureversion title=concept-support-DOMfeatureversion>support</a> the
"XML" <a href=#concept-domfeature title=concept-DOMfeature>DOM feature</a> with the versions "1.0"
and "2.0" associated with it, and the "Core" <a href=#concept-domfeature title=concept-DOMfeature>DOM
feature</a> with the version "2.0" associated with it.

<!-- Chrome supports Core/1.0; Opera supports x/undefined -->


<h3 id=cloning-nodes><span class=secno>2.6 </span>Cloning nodes</h3>
<p>When a UA is to <dfn id=clone>clone</dfn> a <a href=#node><var>node</var></a>, with a <var>new ownerDocument</var> and with a <i>clone children flag</i>, it must run the following steps:

<ol>
 <li><p>If <a href=#node><var>node</var></a> is a <a href=#documenttype><code>DocumentType</code></a> node, raise a <a href=#dom-domexception-data_clone_err><code title=dom-DOMException-DATA_CLONE_ERR>DATA_CLONE_ERR</code></a> exception and abort these steps.
 <li>
  <p>Let <var>copy</var> be a new <a href=#node><code>Node</code></a> that implements the same interfaces as <a href=#node><var>node</var></a>, with <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to <var>new ownerDocument</var>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> and <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> attributes set to the values of the attributes on <a href=#node><var>node</var></a> with the same names, and other attributes set to the values of the attributes on <a href=#node><var>node</var></a> with the same names depending on the type of <a href=#node><var>node</var></a> according to the following table:</p>
  <table id=anolis-table-1>
   <caption>Table 1: Cloned attributes</caption>
   <thead>
    <tr><th>Type of <a href=#node><var>node</var></a><th>Attributes
   <tbody>
    <tr><td><a href=#element><code>Element</code></a><td>&mdash;
    <tr><td><a href=#attr><code>Attr</code></a><td><a href=#dom-attr-value><code title=dom-Attr-value>value</code></a>
    <tr><td><a href=#text><code>Text</code></a><td><a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a>
    <tr><td><a href=#processinginstruction><code>ProcessingInstruction</code></a><td><a href=#dom-processinginstruction-target><code title=dom-ProcessingInstruction-target>target</code></a>, <a href=#dom-processinginstruction-data><code title=dom-ProcessingInstruction-data>data</code></a>
    <tr><td><a href=#comment><code>Comment</code></a><td><a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a>
    <tr><td><a href=#documentfragment><code>DocumentFragment</code></a><td>&mdash;
  </table>
 <li>
  <p>If <a href=#node><var>node</var></a> is an <a href=#element><code>Element</code></a> node, let <var>copy</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> be a new <a href=#namednodemap><code>NamedNodeMap</code></a>, and for each <a href=#attr><code>Attr</code></a> <var>old attribute</var> in <a href=#node><var>node</var></a>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>, <a href=#clone>clone</a> it and append it to the <var>copy</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>.
 <li><p>If the <i>clone children flag</i> is set, <a href=#clone>clone</a> all the children of <a href=#node><var>node</var></a> and append them to <var>copy</var>, with the same <var>new ownerDocument</var> and the <i>clone children flag</i> being set.
 <li><p>Return <var>copy</var>.
</ol>


<h3 id=legal-hierarchy><span class=secno>2.7 </span>Legal hierarchy</h3>
<p class=XXX>Simon says this section is buggy. Should we just remove it?

<p>A <a href=#node><code>Node</code></a> is said to have a <dfn id=legal-hierarchy-0>legal hierarchy</dfn> if all the following conditions are true:

<ul>
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node or an <a href=#attr><code>Attr</code></a> node and has no parent node.
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node and has no child <a href=#text><code>Text</code></a> nodes.
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node and has no more than one child <a href=#element><code>Element</code></a> node.
 <li><p>The <a href=#node><code>Node</code></a> is an <a href=#attr><code>Attr</code></a> node, a <a href=#text><code>Text</code></a> node, a <a href=#processinginstruction><code>ProcessingInstruction</code></a> node, a <a href=#comment><code>Comment</code></a> node, or a <a href=#documenttype><code>DocumentType</code></a> node, and has no child nodes.
</ul>

<p>Before running the steps of an algorithm of a method or attribute in this specification, the user agent must check that running the algorithm will result in a <a href=#legal-hierarchy-0>legal hierarchy</a>. If it won't, then the user agent must instead raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> exception.


<h3 id=namespaces><span class=secno>2.8 </span>Namespaces</h3>
<p>The <dfn id=html-namespace>HTML namespace</dfn> is <code title="">http://www.w3.org/1999/xhtml</code>.

<p>The <dfn id=xml-namespace>XML namespace</dfn> is <code title="">http://www.w3.org/XML/1998/namespace</code>.

<p>The <dfn id=xmlns-namespace>XMLNS namespace</dfn> is <code title="">http://www.w3.org/2000/xmlns/</code>.



<h2 id=basic-types><span class=secno>3 </span>Basic types</h2>
<p>A <dfn id=domtimestamp>DOMTimeStamp</dfn> represents a number of milliseconds.
<pre class=idl>typedef unsigned long long DOMTimeStamp;</pre>



<h2 id=exceptions><span class=secno>4 </span>Exceptions</h2>
<h3 id=exception-domexception><span class=secno>4.1 </span>Exception <a href=#domexception><code>DOMException</code></a></h3>
<pre class=idl>exception <dfn id=domexception>DOMException</dfn> {
  const unsigned short <a href=#dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</a> = 1;
  const unsigned short <a href=#dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR>DOMSTRING_SIZE_ERR</a> = 2; // historical
  const unsigned short <a href=#dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</a> = 3;
  const unsigned short <a href=#dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</a> = 4;
  const unsigned short <a href=#dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</a> = 5;
  const unsigned short <a href=#dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR>NO_DATA_ALLOWED_ERR</a> = 6; // historical
  const unsigned short <a href=#dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR>NO_MODIFICATION_ALLOWED_ERR</a> = 7;
  const unsigned short <a href=#dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</a> = 8;
  const unsigned short <a href=#dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</a> = 9;
  const unsigned short <a href=#dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR>INUSE_ATTRIBUTE_ERR</a> = 10; // historical
  const unsigned short <a href=#dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</a> = 11;
  const unsigned short <a href=#dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</a> = 12;
  const unsigned short <a href=#dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR>INVALID_MODIFICATION_ERR</a> = 13; // historical
  const unsigned short <a href=#dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</a> = 14;
  const unsigned short <a href=#dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR>INVALID_ACCESS_ERR</a> = 15;
  const unsigned short <a href=#dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR>VALIDATION_ERR</a> = 16; // historical
  const unsigned short <a href=#dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR>TYPE_MISMATCH_ERR</a> = 17;
  const unsigned short <a href=#dom-domexception-security_err title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</a> = 18;
  const unsigned short <a href=#dom-domexception-network_err title=dom-DOMException-NETWORK_ERR>NETWORK_ERR</a> = 19;
  const unsigned short <a href=#dom-domexception-abort_err title=dom-DOMException-ABORT_ERR>ABORT_ERR</a> = 20;
  const unsigned short <a href=#dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR>URL_MISMATCH_ERR</a> = 21;
  const unsigned short <a href=#dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR>QUOTA_EXCEEDED_ERR</a> = 22;
  const unsigned short <a href=#dom-domexception-timeout_err title=dom-DOMException-TIMEOUT_ERR>TIMEOUT_ERR</a> = 23;
  const unsigned short <a href=#dom-domexception-data_clone_err title=dom-DOMException-DATA_CLONE_ERR>DATA_CLONE_ERR</a> = 24;
  unsigned short <a href=#dom-domexception-code title=dom-DOMException-code>code</a>;
  DOMString <a href=#dom-domexception-message title=dom-DOMException-message>message</a>;
  DOMString <a href=#dom-domexception-name title=dom-DOMException-name>name</a>;
};</pre>

<p>The <dfn id=dom-domexception-code title=dom-DOMException-code><code>code</code></dfn> exception member
must return the code for the exception, which must be one of the following:

<ol class=brief>
 <li value=1><dfn id=dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR><code>INDEX_SIZE_ERR</code></dfn>:
 the index is not in the allowed range;
 <li value=2><dfn id=dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR><code>DOMSTRING_SIZE_ERR</code></dfn>:
 the text does not fit in a <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString><code class=external data-anolis-spec=webidl>DOMString</code></a>
 (historical);
 <li value=3><dfn id=dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR><code>HIERARCHY_REQUEST_ERR</code></dfn>:
 the operation would not result in a <a href=#legal-hierarchy-0>legal hierarchy</a>;
 <li value=4><dfn id=dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR><code>WRONG_DOCUMENT_ERR</code></dfn>:
 the object is in the wrong <a href=#document><code>Document</code></a>, a call to <a href=#dom-document-importnode><code title=dom-Document-importNode>importNode</code></a> is required;
 <li value=5><dfn id=dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR><code>INVALID_CHARACTER_ERR</code></dfn>:
 the string contains invalid characters;
 <li value=6><dfn id=dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR><code>NO_DATA_ALLOWED_ERR</code></dfn>:
 data is specified for an object that does not support it (historical);
 <li value=7><dfn id=dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR><code>NO_MODIFICATION_ALLOWED_ERR</code></dfn>:
 the object can not be modified;
 <li value=8><dfn id=dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR><code>NOT_FOUND_ERR</code></dfn>:
 the object can not be found here;
 <li value=9><dfn id=dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR><code>NOT_SUPPORTED_ERR</code></dfn>:
 this operation is not supported;
 <li value=10><dfn id=dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR><code>INUSE_ATTRIBUTE_ERR</code></dfn>:
 the attribute is in use (historical)<!--createAttribute-->;
 <li value=11><dfn id=dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR><code>INVALID_STATE_ERR</code></dfn>:
 the object is in an invalid state;
 <li value=12><dfn id=dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR><code>SYNTAX_ERR</code></dfn>:
 the string did not match the expected pattern;
 <li value=13><dfn id=dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR><code>INVALID_MODIFICATION_ERR</code></dfn>:
 the object can not be modified (historical);
 <li value=14><dfn id=dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR><code>NAMESPACE_ERR</code></dfn>:
 the operation is not allowed by <cite>Namespaces in XML</cite>; <a data-anolis-ref="" href=#refsXMLNS>[XMLNS]</a>
 <li value=15><dfn id=dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR><code>INVALID_ACCESS_ERR</code></dfn>:
 the object doesn't support the operation or argument;
 <li value=16><dfn id=dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR><code>VALIDATION_ERR</code></dfn>:
 the operation is invalid (historical);
 <li value=17><dfn id=dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR><code>TYPE_MISMATCH_ERR</code></dfn>:
 the type of the object doesn't match the expected type;
 <!-- XHR -->
 <li value=18><dfn id=dom-domexception-security_err title=dom-DOMException-SECURITY_ERR><code>SECURITY_ERR</code></dfn>:
 the operation is insecure;
 <!-- XHR -->
 <li value=19><dfn id=dom-domexception-network_err title=dom-DOMException-NETWORK_ERR><code>NETWORK_ERR</code></dfn>:
 a network error occurred;
 <!-- XHR -->
 <li value=20><dfn id=dom-domexception-abort_err title=dom-DOMException-ABORT_ERR><code>ABORT_ERR</code></dfn>:
 the user aborted an operation;
 <!-- Workers -->
 <li value=21><dfn id=dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR><code>URL_MISMATCH_ERR</code></dfn>:
 the given URL doesn't match another URL;
 <!-- HTML -->
 <li value=22><dfn id=dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR><code>QUOTA_EXCEEDED_ERR</code></dfn>:
 the quota has been exceeded;
 <!-- XHR2 -->
 <li value=23><dfn id=dom-domexception-timeout_err title=dom-DOMException-TIMEOUT_ERR><code>TIMEOUT_ERR</code></dfn>:
 a timeout occurred;
 <!-- HTML -->
 <li value=24><dfn id=dom-domexception-data_clone_err title=dom-DOMException-DATA_CLONE_ERR><code>DATA_CLONE_ERR</code></dfn>:
 the object can not be cloned;
</ol>

<p>The <dfn id=dom-domexception-message title=dom-DOMException-message><code>message</code></dfn> exception
member must return a user-agent-defined human-readable string describing the
exception.

<p>The <dfn id=dom-domexception-name title=dom-DOMException-name><code>name</code></dfn> exception member
must return the name of the exception constant as a string.</p>



<h2 id=nodes><span class=secno>5 </span>Nodes</h2>
<h3 id=interface-node><span class=secno>5.1 </span>Interface <a href=#node><code>Node</code></a></h3>
<pre class=idl>interface <dfn id=node>Node</dfn> {

  // NodeType
  const unsigned short <a href=#dom-node-element_node title=dom-Node-ELEMENT_NODE>ELEMENT_NODE</a> = 1;
  const unsigned short <a href=#dom-node-attribute_node title=dom-Node-ATTRIBUTE_NODE>ATTRIBUTE_NODE</a> = 2;
  const unsigned short <a href=#dom-node-text_node title=dom-Node-TEXT_NODE>TEXT_NODE</a> = 3;
  const unsigned short <a href=#dom-node-cdata_section_node title=dom-Node-CDATA_SECTION_NODE>CDATA_SECTION_NODE</a> = 4; // historical
  const unsigned short <a href=#dom-node-entity_reference_node title=dom-Node-ENTITY_REFERENCE_NODE>ENTITY_REFERENCE_NODE</a> = 5; // historical
  const unsigned short <a href=#dom-node-entity_node title=dom-Node-ENTITY_NODE>ENTITY_NODE</a> = 6; // historical
  const unsigned short <a href=#dom-node-processing_instruction_node title=dom-Node-PROCESSING_INSTRUCTION_NODE>PROCESSING_INSTRUCTION_NODE</a> = 7;
  const unsigned short <a href=#dom-node-comment_node title=dom-Node-COMMENT_NODE>COMMENT_NODE</a> = 8;
  const unsigned short <a href=#dom-node-document_node title=dom-Node-DOCUMENT_NODE>DOCUMENT_NODE</a> = 9;
  const unsigned short <a href=#dom-node-document_type_node title=dom-Node-DOCUMENT_TYPE_NODE>DOCUMENT_TYPE_NODE</a> = 10;
  const unsigned short <a href=#dom-node-document_fragment_node title=dom-Node-DOCUMENT_FRAGMENT_NODE>DOCUMENT_FRAGMENT_NODE</a> = 11;
  const unsigned short <a href=#dom-node-notation_node title=dom-Node-NOTATION_NODE>NOTATION_NODE</a> = 12; // historical

  readonly attribute DOMString <a href=#dom-node-nodename title=dom-Node-nodeName>nodeName</a>;
           attribute DOMString <a href=#dom-node-nodevalue title=dom-Node-nodeValue>nodeValue</a>;
  readonly attribute unsigned short <a href=#dom-node-nodetype title=dom-Node-nodeType>nodeType</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-parentnode title=dom-Node-parentNode>parentNode</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-node-parentelement title=dom-Node-parentElement>parentElement</a>;
  readonly attribute <a href=#nodelist>NodeList</a> <a href=#dom-node-childnodes title=dom-Node-childNodes>childNodes</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-firstchild title=dom-Node-firstChild>firstChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-lastchild title=dom-Node-lastChild>lastChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-previoussibling title=dom-Node-previousSibling>previousSibling</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-nextsibling title=dom-Node-nextSibling>nextSibling</a>;
  readonly attribute <a href=#namednodemap>NamedNodeMap</a> <a href=#dom-node-attributes title=dom-Node-attributes>attributes</a>;
  readonly attribute <a href=#document>Document</a> <a href=#dom-node-ownerdocument title=dom-Node-ownerDocument>ownerDocument</a>;
  <a href=#node>Node</a> <a href=#dom-node-insertbefore title=dom-Node-insertBefore>insertBefore</a>(<a href=#node>Node</a> newChild, <a href=#node>Node</a> refChild);
  <a href=#node>Node</a> <a href=#dom-node-replacechild title=dom-Node-replaceChild>replaceChild</a>(<a href=#node>Node</a> newChild, <a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-removechild title=dom-Node-removeChild>removeChild</a>(<a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-appendchild title=dom-Node-appendChild>appendChild</a>(<a href=#node>Node</a> newChild);
  boolean <a href=#dom-node-haschildnodes title=dom-Node-hasChildNodes>hasChildNodes</a>();
  <a href=#node>Node</a> <a href=#dom-node-clonenode title=dom-Node-cloneNode>cloneNode</a>(boolean deep);<!--
  void normalize();-->
  boolean <a href=#dom-node-issupported title=dom-Node-isSupported>isSupported</a>([TreatNullAs=EmptyString] DOMString feature, DOMString version);
  readonly attribute DOMString <a href=#dom-node-namespaceuri title=dom-Node-namespaceURI>namespaceURI</a>;
  readonly attribute DOMString <a href=#dom-node-prefix title=dom-Node-prefix>prefix</a>;
  readonly attribute DOMString <a href=#dom-node-localname title=dom-Node-localName>localName</a>;
  boolean <a href=#dom-node-hasattributes title=dom-Node-hasAttributes>hasAttributes</a>();
  readonly attribute DOMString <a href=#dom-node-baseuri title=dom-Node-baseURI>baseURI</a>;

  // DocumentPosition
  const unsigned short <a href=#dom-node-document_position_disconnected title=dom-Node-DOCUMENT_POSITION_DISCONNECTED>DOCUMENT_POSITION_DISCONNECTED</a> = 0x01;
  const unsigned short <a href=#dom-node-document_position_preceding title=dom-Node-DOCUMENT_POSITION_PRECEDING>DOCUMENT_POSITION_PRECEDING</a> = 0x02;
  const unsigned short <a href=#dom-node-document_position_following title=dom-Node-DOCUMENT_POSITION_FOLLOWING>DOCUMENT_POSITION_FOLLOWING</a> = 0x04;
  const unsigned short <a href=#dom-node-document_position_contains title=dom-Node-DOCUMENT_POSITION_CONTAINS>DOCUMENT_POSITION_CONTAINS</a> = 0x08;
  const unsigned short <a href=#dom-node-document_position_contained_by title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY>DOCUMENT_POSITION_CONTAINED_BY</a> = 0x10;
  const unsigned short <a href=#dom-node-document_position_implementation_specific title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</a> = 0x20;

  unsigned short <a href=#dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition>compareDocumentPosition</a>(<a href=#node>Node</a> other);

  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-node-textcontent title=dom-Node-textContent>textContent</a>;
  boolean <a href=#dom-node-issamenode title=dom-Node-isSameNode>isSameNode</a>(<a href=#node>Node</a> other);
  DOMString <a href=#dom-node-lookupprefix title=dom-Node-lookupPrefix>lookupPrefix</a>(DOMString namespaceURI);
  boolean <a href=#dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace>isDefaultNamespace</a>(DOMString namespaceURI);
  DOMString <a href=#dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI>lookupNamespaceURI</a>(DOMString prefix);
  boolean <a href=#dom-node-isequalnode title=dom-Node-isEqualNode>isEqualNode</a>(<a href=#node>Node</a> arg);<!--
  DOMObject getFeature(DOMString feature, DOMString version);
  DOMUserData setUserData(DOMString key, DOMUserData data, UserDataHandler handler);
  DOMUserData getUserData(DOMString key);-->
};</pre>

<p>The constants <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a> (as defined
below) returns. The constants marked historical can no longer be returned,
but are still exposed.</p>

<ol>
 <li value=1><dfn id=dom-node-element_node title=dom-Node-ELEMENT_NODE><code>ELEMENT_NODE</code></dfn>

 <li value=2><dfn id=dom-node-attribute_node title=dom-Node-ATTRIBUTE_NODE><code>ATTRIBUTE_NODE</code></dfn>

 <li value=3><dfn id=dom-node-text_node title=dom-Node-TEXT_NODE><code>TEXT_NODE</code></dfn>

 <li value=4><dfn id=dom-node-cdata_section_node title=dom-Node-CDATA_SECTION_NODE><code>CDATA_SECTION_NODE</code></dfn> (historical)

 <li value=5><dfn id=dom-node-entity_reference_node title=dom-Node-ENTITY_REFERENCE_NODE><code>ENTITY_REFERENCE_NODE</code></dfn> (historical)

 <li value=6><dfn id=dom-node-entity_node title=dom-Node-ENTITY_NODE><code>ENTITY_NODE</code></dfn> (historical)

 <li value=7><dfn id=dom-node-processing_instruction_node title=dom-Node-PROCESSING_INSTRUCTION_NODE><code>PROCESSING_INSTRUCTION_NODE</code></dfn>

 <li value=8><dfn id=dom-node-comment_node title=dom-Node-COMMENT_NODE><code>COMMENT_NODE</code></dfn>

 <li value=9><dfn id=dom-node-document_node title=dom-Node-DOCUMENT_NODE><code>DOCUMENT_NODE</code></dfn>

 <li value=10><dfn id=dom-node-document_type_node title=dom-Node-DOCUMENT_TYPE_NODE><code>DOCUMENT_TYPE_NODE</code></dfn>

 <li value=11><dfn id=dom-node-document_fragment_node title=dom-Node-DOCUMENT_FRAGMENT_NODE><code>DOCUMENT_FRAGMENT_NODE</code></dfn>

 <li value=12><dfn id=dom-node-notation_node title=dom-Node-NOTATION_NODE><code>NOTATION_NODE</code></dfn> (historical)
</ol>


<p>The <dfn id=dom-node-nodename title=dom-Node-nodeName><code>nodeName</code></dfn>, <dfn id=dom-node-nodevalue title=dom-Node-nodeValue><code>nodeValue</code></dfn> and <dfn id=dom-node-nodetype title=dom-Node-nodeType><code>nodeType</code></dfn> attributes must, on getting, return what is in the second, third and fourth column, respectively, if the node also implements the interface in the first column on the same row in the following table:

<table id=anolis-table-2>
 <caption>Table 2: Value of <a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a>, <a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a>, <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a></caption>
 <thead>
  <tr><th>Interface<th><a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a><th><a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a><th><a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a>
 <tbody>
  <tr><td><a href=#element><code>Element</code></a><td>same as <a href=#dom-element-tagname><code title=dom-Element-tagName>tagName</code></a><td>null<td>1
  <tr><td><a href=#attr><code>Attr</code></a><td>same as <a href=#dom-attr-name><code title=dom-Attr-name>name</code></a><td>same as <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a><td>2
  <tr><td><a href=#text><code>Text</code></a><td>"<code title="">#text</code>"<td>same as <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a><td>3
  <tr><td><a href=#processinginstruction><code>ProcessingInstruction</code></a><td>same as <a href=#dom-processinginstruction-target><code title=dom-ProcessingInstruction-target>target</code></a><td>same as <a href=#dom-processinginstruction-data><code title=dom-ProcessingInstruction-data>data</code></a><td>7
  <tr><td><a href=#comment><code>Comment</code></a><td>"<code title="">#comment</code>"<td>same as <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a><td>8
  <tr><td><a href=#document><code>Document</code></a><td>"<code title="">#document</code>"<td>null<td>9
  <tr><td><a href=#documenttype><code>DocumentType</code></a><td>same as <a href=#dom-documenttype-name><code title=dom-DocumentType-name>name</code></a><td>null<td>10
  <tr><td><a href=#documentfragment><code>DocumentFragment</code></a><td>"<code title="">#document-fragment</code>"<td>null<td>11
</table>

<p>The <dfn id=dom-node-parentnode title=dom-Node-parentNode><code>parentNode</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a parent node, return
 null and abort these steps.

 <li><p>Return the parent node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-parentelement title=dom-Node-parentElement><code>parentElement</code></dfn> attribute must, on getting, return the parent node of the <a href=#context-node>context node</a> if there is a parent and it is an element, or null otherwise.

<p>The <dfn id=dom-node-childnodes title=dom-Node-childNodes><code>childNodes</code></dfn> attribute must, on getting, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a> matching only child nodes.

<p>The <dfn id=dom-node-firstchild title=dom-Node-firstChild><code>firstChild</code></dfn> attribute must, on getting, return the first child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-lastchild title=dom-Node-lastChild><code>lastChild</code></dfn> attribute must, on getting, return the last child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-previoussibling title=dom-Node-previousSibling><code>previousSibling</code></dfn>
attribute must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a previous sibling node,
 return null and abort these steps.

 <li><p>Return the previous sibling node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-nextsibling title=dom-Node-nextSibling><code>nextSibling</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a next sibling node,
 return null and abort these steps.

 <li><p>Return the next sibling node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-attributes title=dom-Node-attributes><code>attributes</code></dfn> attribute must, on getting, return a <a href=#namednodemap><code>NamedNodeMap</code></a> of all the <a href=#attr><code>Attr</code></a> nodes associated with the node of the <a href=#context-node>context node</a>, if it is an <a href=#element><code>Element</code></a> node, or null otherwise.

<p>The <dfn id=dom-node-ownerdocument title=dom-Node-ownerDocument><code>ownerDocument</code></dfn> attribute must, on getting, return the <a href=#document><code>Document</code></a> node that the <a href=#context-node>context node</a> is associated with, or null if there is none.

<p>The <dfn id=dom-node-insertbefore title=dom-Node-insertBefore><code>insertBefore(<var title="">newChild</var>, <var>refChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node or a
 <a href=#text><code>Text</code></a> node, then raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If <var>newChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var>refChild</var> is not null and is not a child of the
 <a href=#context-node>context node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a> exception and abort
 these steps. <!-- Do not adopt. -->

 <li><p>If <var>newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var>newChild</var> as its argument.

 <!-- no security check -->
 <li><p>If <var>newChild</var> is a <a href=#documentfragment><code>DocumentFragment</code></a> node,
 then while <var>newChild</var>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> is not null, call <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a> on the <a href=#context-node>context
 node</a> with <var>newChild</var>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> as first argument and <var title="">refChild</var> as second argument.

 <li><p>Otherwise, if <var>refChild</var> is null, append <var title="">newChild</var> to the <a href=#context-node>context node</a>.

 <li><p>Otherwise insert <var>newChild</var> in the <a href=#context-node>context
 node</a> as the previous sibling of <var>refChild</var>.

 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-replacechild title=dom-Node-replaceChild><code>replaceChild(<var title="">newChild</var>, <var>oldChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node or a
 <a href=#text><code>Text</code></a> node, then raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If either <var>newChild</var> or <var>oldChild</var> is
 null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var>newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var>newChild</var> as its argument.

 <li><p>If <var>oldChild</var> is not a child of the <a href=#context-node>context
 node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a>
 exception and abort these steps.

 <!-- no security check -->
 <li><p>Let <var>refChild</var> be <var>oldChild</var>'s
 <a href=#dom-node-nextsibling><code title=dom-Node-nextSibling>nextSibling</code></a>.

 <li><p>Remove <var>oldChild</var> from <a href=#context-node>context node</a>.

 <li><p>Call <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a> on the
 <a href=#context-node>context node</a> with <var>newChild</var> and <var title="">refChild</var> as arguments, respectively.

 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-removechild title=dom-Node-removeChild><code>removeChild(<var title="">oldChild</var>)</code></dfn> method must run the following steps:

<ol>
 <!-- Attr nodes are okay -->
 <li><p>If <var>oldChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var>oldChild</var> is not a child of the <a href=#context-node>context
 node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a> exception and abort
 these steps.
 <!-- Including other documents. -->

 <li><p>Remove <var>oldChild</var> from <a href=#context-node>context node</a>.

 <li><p>Return <var>oldChild</var>.
</ol>

<p>The <dfn id=dom-node-appendchild title=dom-Node-appendChild><code>appendChild(<var title="">newChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node or a
 <a href=#text><code>Text</code></a> node, then raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798, 558973 -->

 <li><p>If <var>newChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var>newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var>newChild</var> as its argument.

 <!-- no security check -->
 <li><p>Append <var>newChild</var> to the <a href=#context-node>context node</a>.

 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-haschildnodes title=dom-Node-hasChildNodes><code>hasChildNodes()</code></dfn> method must return false if the <a href=#context-node>context node</a>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> is null, and true otherwise.

<p>The <dfn id=dom-node-clonenode title=dom-Node-cloneNode><code>cloneNode(<var title="">deep</var>)</code></dfn> method must return a <a href=#clone>clone</a> of the
<a href=#context-node>context node</a>, with <var>new ownerDocument</var> being the
<a href=#context-node>context node</a>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, and the <var>clone
children</var> flag set if <var>deep</var> is true.

<p>The <dfn id=dom-node-issupported title=dom-Node-isSupported><code>isSupported(<var title="">feature</var>, <var>version</var>)</code></dfn> method must return
true if the user agent <a href=#concept-support-domfeatureversion title=concept-support-DOMfeatureversion>supports</a>
the (<var>feature</var>, <var>version</var>) tuple on the
<a href=#context-node>context node</a>, and false otherwise.

<p>The <dfn id=dom-node-namespaceuri title=dom-Node-namespaceURI><code>namespaceURI</code></dfn> attribute must return the namespace that is associated with the node, if there is one and it's not the empty string, or null otherwise.

<p>The <dfn id=dom-node-prefix title=dom-Node-prefix><code>prefix</code></dfn> attribute must return the prefix that is associated with the node, if there is one and it's not the empty string, or null otherwise.
<!--XXX support setting? - - On setting, it must run the following steps:

<ol>
 <li><p>Let <var>prefix</var> be the value being assigned.
 <li>
  <p>If <var>prefix</var> is not null, run the following substeps:
  <ol>
   <li><p>If <var>prefix</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
   <li><p>If <var>prefix</var> doesn't match the <code
   data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML, raise a
   <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and
   abort these steps.
  </ol>
 <li><p class=XXX>Actually this doesn't match any browser. Let's try to drop it instead.
</ol>-->

<p>The <dfn id=dom-node-localname title=dom-Node-localName><code>localName</code></dfn> attribute must return the local name that is associated with the node, if it has
one, and null otherwise.

<p>The <dfn id=dom-node-hasattributes title=dom-Node-hasAttributes><code>hasAttributes()</code></dfn>
method must return whether there are any attributes associated with the
<a href=#context-node>context node</a>, if it is an <a href=#element><code>Element</code></a> node, and false
otherwise.

<p>The <dfn id=dom-node-baseuri title=dom-Node-baseURI><code>baseURI</code></dfn> attribute must <span class=XXX title="">...</span>

<ol>
 <li value=1><dfn id=dom-node-document_position_disconnected title=dom-Node-DOCUMENT_POSITION_DISCONNECTED><code>DOCUMENT_POSITION_DISCONNECTED</code></dfn>

 <li value=2><dfn id=dom-node-document_position_preceding title=dom-Node-DOCUMENT_POSITION_PRECEDING><code>DOCUMENT_POSITION_PRECEDING</code></dfn>

 <li value=4><dfn id=dom-node-document_position_following title=dom-Node-DOCUMENT_POSITION_FOLLOWING><code>DOCUMENT_POSITION_FOLLOWING</code></dfn>

 <li value=8><dfn id=dom-node-document_position_contains title=dom-Node-DOCUMENT_POSITION_CONTAINS><code>DOCUMENT_POSITION_CONTAINS</code></dfn>

 <li value=16><dfn id=dom-node-document_position_contained_by title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY><code>DOCUMENT_POSITION_CONTAINED_BY</code></dfn>

 <li value=32><dfn id=dom-node-document_position_implementation_specific title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC><code>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code></dfn>
</ol>

<p>The <dfn id=dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition><code>compareDocumentPosition(<var title="">other</var>)</code></dfn> method must <span class=XXX title="">...</span>

<p>The <dfn id=dom-node-textcontent title=dom-Node-textContent><code>textContent</code></dfn> attribute, on getting, must return a concatenation of the <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> of all the descendant <a href=#text><code>Text</code></a> nodes of the <a href=#context-node>context node</a>, in <a href=#tree-order>tree order</a>. On setting, it must run the following steps:

<ol>
 <li><p>Remove all the child nodes of the <a href=#context-node>context node</a>.
 <li><p>Let <var>data</var> be the value being assigned.
 <li><p>If <var>data</var> is not the empty string, append a new <a href=#text><code>Text</code></a> node to the <a href=#context-node>context node</a> whose <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> is set to <var>data</var>.
</ol>

<p class=XXX>What does null mean? <a href=http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com>http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com</a>

<p>The <dfn id=dom-node-issamenode title=dom-Node-isSameNode><code>isSameNode(<var title="">other</var>)</code></dfn> method must return true if <var title="">other</var> is a reference to the same object as the <a href=#context-node>context
node</a>, and false otherwise.

<p>The <dfn id=dom-node-lookupprefix title=dom-Node-lookupPrefix><code>lookupPrefix(<var title="">namespaceURI</var>)</code></dfn> method must <span class=XXX title="">...</span>

<p>The <dfn id=dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace><code>isDefaultNamespace(<var title="">namespaceURI</var>)</code></dfn> method must <span class=XXX title="">...</span>

<p>The <dfn id=dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI><code>lookupNamespaceURI(<var title="">prefix</var>)</code></dfn> method must <span class=XXX title="">...</span>

<p class=XXX>clarify lookupNamespaceURI <a href=http://www.w3.org/mid/4878DFC6.40401@lachy.id.au>http://www.w3.org/mid/4878DFC6.40401@lachy.id.au</a>; lookupNamespaceURI, isDefaultNamespace <a href="http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126">http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126</a>

<p>The <dfn id=dom-node-isequalnode title=dom-Node-isEqualNode><code>isEqualNode(<var title="">arg</var>)</code></dfn> method must return true if all of the following
conditions are true, and must otherwise return false:

<ul>
 <li><p><var>arg</var> is not null.
 <li><p><var>arg</var>'s <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a>.
 <li><p><var>arg</var>'s <a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a>.
 <li><p><var>arg</var>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>.
 <li><p><var>arg</var>'s <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a>.
 <li><p><var>arg</var>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>.
 <li><p><var>arg</var>'s <a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a>.

 <li><p>Either <var>arg</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> and the <a href=#context-node>context node</a>'s
 <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> are both null or a bijection
 exists between the set of <var>arg</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> and the set of the <a href=#context-node>context
 node</a>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> so that every
 <a href=#attr><code>Attr</code></a> node in the former is mapped to an <a href=#attr><code>Attr</code></a> node in
 the latter for which calling <a href=#dom-node-isequalnode><code title=dom-Node-isEqualNode>isEqualNode</code></a> on the first <a href=#attr><code>Attr</code></a>
 node with the second <a href=#attr><code>Attr</code></a> node as its argument returns true.

 <li><p><var>arg</var>'s <a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a>' <a href=#dom-nodelist-length><code title=dom-NodeList-length>length</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a>' <a href=#dom-nodelist-length><code title=dom-NodeList-length>length</code></a>.
 <li><p>Calling <a href=#dom-node-isequalnode><code title=dom-Node-isEqualNode>isEqualNode</code></a> on each child node of the <a href=#context-node>context node</a>, with the child node of the same index in <var>arg</var> as argument returns true for every child node.
</ul>


<h3 id=interface-documentfragment><span class=secno>5.2 </span>Interface <a href=#documentfragment><code>DocumentFragment</code></a></h3>
<pre class=idl>interface <dfn id=documentfragment>DocumentFragment</dfn> : <a href=#node>Node</a> {
};</pre>


<h3 id=interface-document><span class=secno>5.3 </span>Interface <a href=#document><code>Document</code></a></h3>
<pre class=idl>interface <dfn id=document>Document</dfn> : <a href=#node>Node</a> {
  readonly attribute <a href=#documenttype>DocumentType</a> <a href=#dom-document-doctype title=dom-Document-doctype>doctype</a>;
  readonly attribute <a href=#domimplementation>DOMImplementation</a> <a href=#dom-document-implementation title=dom-Document-implementation>implementation</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-document-documentelement title=dom-Document-documentElement>documentElement</a>;

  <a href=#element>Element</a> <a href=#dom-document-createelement title=dom-Document-createElement>createElement</a>([TreatNullAs=EmptyString] DOMString tagName);
  <a href=#element>Element</a> <a href=#dom-document-createelementns title=dom-Document-createElementNS>createElementNS</a>(DOMString namespaceURI, DOMString qualifiedName);
  <a href=#documentfragment>DocumentFragment</a> createDocumentFragment();
  <a href=#text>Text</a> <a href=#dom-document-createtextnode title=dom-Document-createTextNode>createTextNode</a>(DOMString data);
  <a href=#comment>Comment</a> <a href=#dom-document-createcomment title=dom-Document-createComment>createComment</a>(DOMString data);
  <a href=#processinginstruction>ProcessingInstruction</a> <a href=#dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction>createProcessingInstruction</a>(DOMString target, DOMString data);<!--
  CDATASection createCDATASection(DOMString data);
  EntityReference createEntityReference(DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttribute>createAttribute</span>(DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttributeNS>createAttributeNS</span>(DOMString namespaceURI, DOMString qualifiedName);
    If adding this, search for [createAttribute]-->

  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagname title=dom-Document-getElementsByTagName>getElementsByTagName</a>(DOMString tagname);
  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS>getElementsByTagNameNS</a>(DOMString namespaceURI, DOMString localName);
  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbyclassname title=dom-Document-getElementsByClassName>getElementsByClassName</a>(DOMString classNames);
  <a href=#element>Element</a> <a href=#dom-document-getelementbyid title=dom-Document-getElementById>getElementById</a>(DOMString elementId);

  <a href=#node>Node</a> <a href=#dom-document-importnode title=dom-Document-importNode>importNode</a>(<a href=#node>Node</a> importedNode, boolean deep);
  <a href=#node>Node</a> <a href=#dom-document-adoptnode title=dom-Document-adoptNode>adoptNode</a>(<a href=#node>Node</a> source);

  readonly attribute DOMString <a href=#dom-document-inputencoding title=dom-Document-inputEncoding>inputEncoding</a>;
           attribute DOMString <a href=#dom-document-documenturi title=dom-Document-documentURI>documentURI</a>;
  readonly attribute DOMString <a href=#dom-document-compatmode title=dom-Document-compatMode>compatMode</a>;<!--
  readonly attribute DOMString xmlEncoding;
           attribute boolean xmlStandalone;
           attribute DOMString <span title=dom-Document-xmlVersion>xmlVersion</span>;
           attribute boolean strictErrorChecking;
  readonly attribute DOMConfiguration domConfig;
  void normalizeDocument();
  Node renameNode(Node n, DOMString namespaceURI, DOMString qualifiedName);-->
};</pre>

<p>A <a href=#document><code>Document</code></a> node is assumed to be an <dfn id=xml-document>XML document</dfn>
unless it is flagged as being an <dfn id=html-document>HTML document</dfn>. Whether a
document is an <a href=#html-document>HTML document</a> or an <a href=#xml-document>XML document</a>
affects the behavior of certain APIs.

<p>A <a href=#document><code>Document</code></a> node is always set to one of three modes:
<dfn id=concept-no-quirks-mode title=concept-no-quirks-mode>no-quirks mode</dfn>, the default;
<dfn id=concept-quirks-mode title=concept-quirks-mode>quirks mode</dfn>, used typically for legacy
documents; and
<dfn id=concept-limited-quirks-mode title=concept-limited-quirks-mode>limited-quirks mode</dfn>, also known
as "almost standards" mode. Unless
<a href=#other-applicable-specifications>other applicable specifications</a> define otherwise, the
<a href=#document><code>Document</code></a> must be in
<a href=#concept-no-quirks-mode title=concept-no-quirks-mode>no-quirks mode</a>.

<p class=note>The mode is only ever changed from the default if the
<a href=#document><code>Document</code></a> node is created by the
<a class=external data-anolis-spec=html href=http://www.whatwg.org/html/#html-parser>HTML parser</a>, based on the presence,
absence, or value of the DOCTYPE string.
<a class=informative data-anolis-ref="" href=#refsHTML>[HTML]</a>

<p>The <dfn id=dom-document-doctype title=dom-Document-doctype><code>doctype</code></dfn> attribute must return the first child of the <a href=#document><code>Document</code></a> node that is a <a href=#documenttype><code>DocumentType</code></a> node, if there is one, or null otherwise.

<p class=note>In both HTML and XML there will only ever be one
<a href=#documenttype><code>DocumentType</code></a> node descendant of the <a href=#document><code>Document</code></a> node.
<a class=informative data-anolis-ref="" href=#refsHTML>[HTML]</a> <a class=informative data-anolis-ref="" href=#refsXML>[XML]</a>

<p>The <dfn id=dom-document-implementation title=dom-Document-implementation><code>implementation</code></dfn> attribute must return the <a href=#domimplementation><code>DOMImplementation</code></a> object that is associated with the <a href=#document><code>Document</code></a> node.

<p>The <dfn id=dom-document-documentelement title=dom-Document-documentElement><code>documentElement</code></dfn> attribute must return the first child of the <a href=#document><code>Document</code></a> node that is an <a href=#element><code>Element</code></a> node, if there is one, or null otherwise.

<hr>

<p>The <dfn id=dom-document-createelement title=dom-Document-createElement><code>createElement(<var>tagName</var>)</code></dfn> method must run the following steps:</p>

<ol>
 <li><p>If <var>tagName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> is an <a href=#html-document>HTML document</a>,
 let <var>localName</var> be <var>tagName</var>,
 <a href=#converted-to-lowercase>converted to lowercase</a>. Otherwise, let <var>localName</var> be
 <var>tagName</var>.

 <li><p>Return a new <a href=#element><code>Element</code></a> node with no attributes,
 <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> set to the
 <a href=#html-namespace>HTML namespace</a>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> set
 to null, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> set to
 <var>localName</var>, and
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the
 <a href=#context-node>context node</a>.
</ol>
<!-- this is very different from DOM3 -->
<p class=note>No check is performed that the local name will match the
<a href=http://www.w3.org/TR/xml-names/#NT-NCName><code class=external data-anolis-spec=xmlns>NCName</code></a> production in Namespaces in XML.

<p>The <dfn id=dom-document-createelementns title=dom-Document-createElementNS><code>createElementNS(<var>namespaceURI</var>, <var>qualifiedName</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var>qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.
 <li><p>If <var>qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml-names/#NT-QName><code class=external data-anolis-spec=xmlns>QName</code></a> production in Namespaces in XML, raise a
 <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and
 abort these steps.
 <li><p>If <var>qualifiedName</var> contains a U+003E COLON (":") character, then split the string on the colon and let <var>prefix</var> be the part before the colon and <var>localName</var> the part after the colon. Otherwise, let <var>prefix</var> be null and <var>localName</var> be <var>qualifiedName</var>.
 <li><p>If <var>prefix</var> is not null and <var>namespaceURI</var> is an empty string, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var>prefix</var> is "xml" and <var>namespaceURI</var> is not the <a href=#xml-namespace>XML namespace</a>, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var>qualifiedName</var> or <var>prefix</var> is "xmlns" and <var>namespaceURI</var> is not the <a href=#xmlns-namespace>XMLNS namespace</a>, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var>namespaceURI</var> is the <a href=#xmlns-namespace>XMLNS namespace</a> and neither <var>qualifiedName</var> nor <var>prefix</var> is "xmlns", raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>Return a new <a href=#element><code>Element</code></a> node with no attributes, <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> set to <var>namespaceURI</var>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> set to <var>prefix</var>, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> set to <var>localName</var>, and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-document-createdocumentfragment title=dom-Document-createDocumentFragment><code>createDocumentFragment()</code></dfn> method must return a new <a href=#documentfragment><code>DocumentFragment</code></a> node with its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.

<p>The <dfn id=dom-document-createtextnode title=dom-Document-createTextNode><code>createTextNode(<var>data</var>)</code></dfn> method must return a new <a href=#text><code>Text</code></a> node with its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute set to <var>data</var> and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the text node contains characters that
match the <a href=http://www.w3.org/TR/xml/#NT-Char><code class=external data-anolis-spec=xml>Char</code></a> production in XML.

<p>The <dfn id=dom-document-createcomment title=dom-Document-createComment><code>createComment(<var>data</var>)</code></dfn> method must return a new <a href=#comment><code>Comment</code></a> node with its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute set to <var>data</var> and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the comment contains characters that
match the <a href=http://www.w3.org/TR/xml/#NT-Char><code class=external data-anolis-spec=xml>Char</code></a> production in XML or that it
contains two adjacent hyphens or ends with a hyphen.

<p>The <dfn id=dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction><code>createProcessingInstruction(<var>target</var>, <var title="">data</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#html-document>HTML document</a>, raise
 a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a>
 exception and abort these steps.

 <li><p>If <var>target</var> doesn't match the <!--<code
 data-anolis-spec=xml>PITarget</code>--> <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a>
 production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps. <!-- DOM3 didn't check for "xml" -->

 <li><p>If <var>data</var> contains the string "<code title="">?&gt;</code>",
 raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps. <!-- Gecko does this. -->

 <!--<li><p>If <var>target</var> contains a U+003A COLON (":") character, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->

 <li><p>Return a new <a href=#concept-pi title=concept-PI>processing instruction</a>, with
 <var>target</var> as its <a href=#concept-pi-target title=concept-PI-target>target</a> and
 <var>data</var> as its <a href=#concept-pi-data title=concept-PI-data>data</a>, and whose
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is set to the
 <a href=#context-node>context node</a>.
</ol>

<p class=note>No check is performed that the processing instruction target
contains "xml" or the colon, or that the data contains characters that match the
<a href=http://www.w3.org/TR/xml/#NT-Char><code class=external data-anolis-spec=xml>Char</code></a> production in XML.</p>

<!--
[createAttribute]
<p>The <dfn title=dom-Document-createAttribute><code>createAttribute(<var>name</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var>name</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
 <li><p>Return a new <code>Attr</code> node with its <code title=dom-Node-namespaceURI>namespaceURI</code> set to null, <code title=dom-Node-prefix>prefix</code> set to null, <code title=dom-Node-localName>localName</code> set to <var>name</var>, and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>-->
<!-- this is different from DOM3 -->
<!--<p class=note>No check is performed that the local name will match the <code
data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML.-->

<hr>
<dl class=domintro>
 <dt><var>collection</var> = <a href=#document><var>document</var></a> . <a href=#dom-document-getelementsbyclassname><code title=dom-Document-getElementsByClassName>getElementsByClassName(<var title="">classes</var>)</code></a>
 <dt><var>collection</var> = <a href=#element><var>element</var></a> . <a href=#dom-element-getelementsbyclassname><code title=dom-Element-getElementsByClassName>getElementsByClassName(<var title="">classes</var>)</code></a>
 <dd>
  <p>Returns a <a href=#nodelist><code>NodeList</code></a> of the elements in the object
  on which the method was invoked (a <a href=#document><code>Document</code></a> or an
  <a href=#element><code>Element</code></a>) that have all the classes given by <var title="">classes</var>.
  <p>The <var title="">classes</var> argument is interpreted as a
  space-separated list of classes.
</dl>

<p>The <dfn id=dom-document-getelementsbytagname title=dom-Document-getElementsByTagName><code>getElementsByTagName(<var title="">tagName</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>tagName</var> is just a U+002A ASTERISK ("*") character,
 return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose
 filter matches only <a href=#element><code>Element</code></a> nodes.

 <li>
  <p>Otherwise, if the <a href=#context-node>context node</a> is an
  <a href=#html-document>HTML document</a>, return a <a href=#nodelist><code>NodeList</code></a> rooted at the
  <a href=#context-node>context node</a>, whose filter matches only the following nodes:
  <ul>
   <li><a href=#element><code>Element</code></a> nodes in the <a href=#html-namespace>HTML namespace</a> that have a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>
   <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to
   <var>tagName</var>, <a href=#converted-to-lowercase>converted to lowercase</a>.

   <li><a href=#element><code>Element</code></a> nodes, <em>not</em> in the
   <a href=#html-namespace>HTML namespace</a>, that have a
   <a href=#dom-element-tagname><code title=dom-Element-tagName>tagName</code></a>
   <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to
   <var>tagName</var>.
  </ul>

 <li><p>Otherwise, return a <a href=#nodelist><code>NodeList</code></a> rooted at the
 <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a>
 nodes that have a <a href=#dom-element-tagname><code title=dom-Element-tagName>tagName</code></a>
 <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to
 <var>tagName</var>.
</ol>

<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.

<p class=note>Thus, in an <a href=#html-document>HTML document</a>, <code title="">document.getElementsByTagName("FOO")</code> will match <code title="">FOO</code> elements that aren't in the <a href=#html-namespace>HTML namespace</a>, and
<code title="">foo</code> elements that are in the <a href=#html-namespace>HTML namespace</a>, but
not <code title="">FOO</code> elements that are in the <a href=#html-namespace>HTML namespace</a>.


<p>The <dfn id=dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS><code>getElementsByTagNameNS(<var>namespaceURI</var>, <var>localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If both <var>namespaceURI</var> and <var>localName</var> are just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes.
 <li><p>Otherwise, if <var>namespaceURI</var> is just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes with the <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> equal to <var>localName</var>.
 <li><p>Otherwise, if <var>localName</var> is just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes with the <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> equal to <var>namespaceURI</var>.
 <li><p>Otherwise, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes that have a <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> equal to <var>namespaceURI</var> and a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> equal to <var>localName</var> (both in a <a href=#case-sensitive>case-sensitive</a> manner).
</ol>
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.


<p>The <dfn id=dom-document-getelementsbyclassname title=dom-Document-getElementsByClassName><code>getElementsByClassName(<var title="">classNames</var>)</code></dfn> method takes a string that contains a
<a href=#set-of-space-separated-tokens>set of space-separated tokens</a> representing <a href=#concept-class title=concept-class>classes</a>. When called, the method must return a <a href=#concept-collection-live title=concept-collection-live>live</a> <a href=#nodelist><code>NodeList</code></a> object
containing all the elements in the <a href=#context-node>context node</a>, in <a href=#tree-order>tree
order</a>, that have all the <a href=#concept-class title=concept-class>classes</a>
specified in the <var>classNames</var> argument, having obtained the
<a href=#concept-class title=concept-class>classes</a> by <a href=#split-a-string-on-spaces title="split a string on
spaces">splitting the string on spaces</a>. (Duplicates are ignored.) If
there are no tokens specified in the argument, then the method must return an
empty <a href=#nodelist><code>NodeList</code></a>. If the document is in <a href=#concept-quirks-mode title=concept-quirks-mode>quirks mode</a>, then the comparisons for the <a href=#concept-class title=concept-class>classes</a> must be done in an <a href=#ascii-case-insensitive>ASCII
case-insensitive</a> manner, otherwise, the comparisons must be done in a
<a href=#case-sensitive>case-sensitive</a> manner.
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.

<div class=example>
 <p>Given the following XHTML fragment:</p>

 <pre>&lt;div id="example"&gt;
  &lt;p id="p1" class="aaa bbb"/&gt;
  &lt;p id="p2" class="aaa ccc"/&gt;
  &lt;p id="p3" class="bbb ccc"/&gt;
&lt;/div&gt;</pre>

 <p>A call to <a href=#dom-element-getelementsbyclassname><code title=dom-Element-getElementsByClassName>document.getElementById('example').getElementsByClassName('aaa')</code></a>
 would return a <a href=#nodelist><code>NodeList</code></a> with the two paragraphs <code title="">p1</code> and <code title="">p2</code> in it.</p>

 <p>A call to <a href=#dom-element-getelementsbyclassname><code title=dom-Element-getElementsByClassName>getElementsByClassName('ccc&nbsp;bbb')</code></a> would only
 return one node, however, namely <code title="">p3</code>. A call
 to <a href=#dom-element-getelementsbyclassname><code title=dom-Element-getElementsByClassName>document.getElementById('example').getElementsByClassName('bbb&nbsp;&nbsp;ccc&nbsp;')</code></a>
 would return the same thing.</p>

 <p>A call to <a href=#dom-element-getelementsbyclassname><code title=dom-Element-getElementsByClassName>getElementsByClassName('aaa,bbb')</code></a> would return no
 nodes; none of the elements above are in the "aaa,bbb" class.</p>
</div>

<!-- v2:
>         * xGetParentElementByClassName(rootElement, className, tagName) -
> Navigates upwards until we hit a parent element with the given class name and
> optional tag name.
-->


<p>The <dfn id=dom-document-getelementbyid title=dom-Document-getElementById><code>getElementById(<var title="">elementId</var>)</code></dfn> method must return the first
<a href=#element><code>Element</code></a> node, in <a href=#tree-order>tree order</a>, in the <a href=#context-node>context
node</a> whose <a href=#concept-id title=concept-ID>ID</a> is <var>elementId</var>,
or null if there is none.

<hr>

<p>The <dfn id=dom-document-importnode title=dom-Document-importNode><code>importNode(<var>importedNode</var>, <var>deep</var>)</code></dfn> method must run
the following steps:
<ol>
 <!-- Similar text for adoptNode -->
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#xml-document>XML document</a>, then
 if <var>importedNode</var> or any of its descendant nodes or any of its
 <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> or any of the <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> of any descendant
 <a href=#element><code>Element</code></a> nodes has a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML or contains a U+003A COLON
 (":") character, raise an <a href=#dom-domexception-invalid_state_err><code title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code></a> and abort
 these steps.

 <li><p>Return a <a href=#clone>clone</a> of <var>importedNode</var>, with <var>new ownerDocument</var> being the <a href=#context-node>context node</a>, and the <i>clone children flag</i> set if <var>deep</var> is true.
</ol>

<p>The <dfn id=dom-document-adoptnode title=dom-Document-adoptNode><code>adoptNode(<var>source</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>source</var> is a <a href=#document><code>Document</code></a> node or a
 <a href=#documenttype><code>DocumentType</code></a> node, raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <!-- Similar text for importNode -->
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#xml-document>XML document</a>, then
 if <var>source</var> or any of its descendant nodes or any of its <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> or any of the <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> of any descendant
 <a href=#element><code>Element</code></a> nodes has a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML or contains a U+003A COLON
 (":") character, raise an <a href=#dom-domexception-invalid_state_err><code title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code></a> and abort
 these steps.

 <li><p>If <var>source</var> is an <a href=#element><code>Element</code></a> node, it is
 <a href=#affected-by-a-base-url-change>affected by a base URL change</a>.

 <!-- no security check -->
 <li><p>If <var>source</var>'s <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a> is not null and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> isn't equal to the
 <a href=#context-node>context node</a>, remove <var>source</var> from its parent.

 <li><p>Set <var>source</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> to the <a href=#context-node>context
 node</a>.

 <li><p>If <var>source</var> is an <a href=#element><code>Element</code></a> node,
 set the <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> of all
 <a href=#attr><code>Attr</code></a> in its <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>
 to the <a href=#context-node>context node</a>.

 <li><p>For each child node of <var>source</var>, call <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> on the <a href=#context-node>context node</a>,
 with the child node as its argument.

 <li><p>Return <var>source</var>.
</ol>

<hr>

<dl class=domintro>
 <dt><a href=#document><var>document</var></a> . <a href=#dom-document-compatmode><code title=dom-Document-compatMode>compatMode</code></a>
 <dd>
  <p>Returns the string "<code title="">CSS1Compat</code>" if the <a href=#context-node>context
  node</a> is in <a href=#concept-no-quirks-mode title=concept-no-quirks-mode>no-quirks mode</a> or
  <a href=#concept-limited-quirks-mode title=concept-limited-quirks-mode>limited-quirks mode</a>, and
  "<code title="">BackCompat</code>", if the <a href=#document><code>Document</code></a> is in
  <a href=#concept-quirks-mode title=concept-quirks-mode>quirks mode</a>.
</dl>

<p class=XXX><dfn id=dom-document-inputencoding title=dom-Document-inputEncoding>inputEncoding</dfn>
<p class=XXX>define HTML5 concept of document character encoding here

<p class=XXX><dfn id=dom-document-documenturi title=dom-Document-documentURI>documentURI</dfn>
Should document.documentURI really exist? be readonly?

<p>The <dfn id=dom-document-compatmode title=dom-Document-compatMode><code>compatMode</code></dfn> IDL
attribute must return the literal string "<code title="">CSS1Compat</code>" unless
the <a href=#context-node>context node</a> is in <a href=#concept-quirks-mode title=concept-quirks-mode>quirks mode</a>, in which case it must instead
return the literal string "<code title="">BackCompat</code>".

<!-- <dfn title=dom-Document-xmlVersion>xmlVersion</dfn>
http://lists.w3.org/Archives/Public/www-dom/2003JulSep/0049.html -->


<h4 id=interface-domimplementation><span class=secno>5.3.1 </span>Interface <a href=#domimplementation><code>DOMImplementation</code></a></h4>
<p>User agents must create a new <a href=#domimplementation><code>DOMImplementation</code></a> object whenever a new <a href=#document><code>Document</code></a> node is created and associate it with the that <a href=#document><code>Document</code></a> node.

<pre class=idl>interface <dfn id=domimplementation>DOMImplementation</dfn> {
  boolean <a href=#dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature>hasFeature</a>(DOMString feature, [TreatNullAs=EmptyString] DOMString version);

  <a href=#documenttype>DocumentType</a> <a href=#dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType>createDocumentType</a>([TreatNullAs=EmptyString] DOMString qualifiedName, DOMString publicId, DOMString systemId);
  <a href=#document>Document</a> <a href=#dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument>createDocument</a>([TreatNullAs=EmptyString] DOMString namespaceURI, [TreatNullAs=EmptyString] DOMString qualifiedName, <a href=#documenttype>DocumentType</a> doctype);<!--
  DOMObject getFeature(DOMString feature, DOMString version);-->
  <a href=#document>Document</a> <a href=#dom-domimplementation-createhtmldocument title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</a>(DOMString title);
};</pre>

<dl class=domintro>
 <dt><var>hasSupport</var> = <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external data-anolis-spec=window title=dom-Window-document>document</var></a> . <a href=#dom-document-implementation><code title=dom-Document-implementation>implementation</code></a> . <a href=#dom-domimplementation-hasfeature><code title=dom-DOMImplementation-hasFeature>hasFeature</code></a>(
 <var>feature</var>, <var>version</var> )

 <dd>
  <p>Returns whether the user agent supports the version <var title="">version</var> of <var>feature</var>. The empty string means any
  version.
</dl>

<div class=impl>

<p>The <dfn id=dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature><code>hasFeature(<var title="">feature</var>, <var>version</var>)</code></dfn> method must return
true if the user agent <a href=#concept-support-domfeatureversion title=concept-support-DOMfeatureversion>supports</a>
the (<var>feature</var>, <var>version</var>) tuple and false
otherwise.

</div>

<hr>

<dl class=domintro>
 <dt><var>doctype</var> = <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external data-anolis-spec=window title=dom-Window-document>document</var></a> . <a href=#dom-document-implementation><code title=dom-Document-implementation>implementation</code></a> . <a href=#dom-domimplementation-createdocumenttype><code title=dom-DOMImplementation-createDocumentType>createDocumentType</code></a>(
 <var>qualifiedName</var>, <var>publicId</var>, <var title="">systemId</var> )

 <dd>
  <p>Returns a new <a href=#documenttype><code>DocumentType</code></a>, with the given <var title="">qualifiedName</var>, <var>publicId</var>, and <var title="">systemId</var>. If <var title="">qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML, an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
  exception is raised, and if it doesn't match the <a href=http://www.w3.org/TR/xml-names/#NT-NCName><code class=external data-anolis-spec=xmlns>NCName</code></a> production in Namespaces in XML, a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception is raised.


 <dt><var>doc</var> = <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external data-anolis-spec=window title=dom-Window-document>document</var></a> . <a href=#dom-document-implementation><code title=dom-Document-implementation>implementation</code></a> . <a href=#dom-domimplementation-createdocument><code title=dom-DOMImplementation-createDocument>createDocument</code></a>( <var title="">namespaceURI</var>, <var>qualifiedName</var>, <var title="">doctype</var> )

 <dd>
  <p>Returns a new <a href=#document><code>Document</code></a>, with a new root
  <a href=#element><code>Element</code></a> whose <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> is
  <var>qualifiedName</var> and whose <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> is <var title="">namespaceURI</var> (unless <var>qualifiedName</var> is the empty
  string), and with <var>doctype</var>, if it is given, as its <a href=#concept-doctype title=concept-doctype>doctype</a>.

  <p>This method raises the same exceptions as the <a href=#dom-document-createelementns><code title=dom-Document-createElementNS>createElementNS</code></a> method, when called
  with the same arguments. If <var>doctype</var> comes from another
  <a href=#document><code>Document</code></a>, a <a href=#dom-domexception-wrong_document_err><code title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</code></a> exception
  is raised.


 <dt><var>doc</var> = <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external data-anolis-spec=window title=dom-Window-document>document</var></a> . <a href=#dom-document-implementation><code title=dom-Document-implementation>implementation</code></a> . <a href=#dom-domimplementation-createhtmldocument><code title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</code></a>(
 <var>title</var> )

 <dd>
  <p>Returns a new <a href=#document><code>Document</code></a>, with a basic DOM already
  constructed with an appropriate <code title="">title</code> element.
</dl>

<div class=impl>

<p>The <dfn id=dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType><code>createDocumentType(<var>qualifiedName</var>, <var>publicId</var>, <var>systemId</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.
 <li><p>If <var>qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml-names/#NT-NCName><code class=external data-anolis-spec=xmlns>NCName</code></a> production in Namespaces in XML, raise a
 <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and
 abort these steps.
 <!--<li><p>If <var>publicId</var> contains a character that doesn't match the <code data-anolis-spec=xml>PubidChar</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. --> <!-- DOM3 didn't check this -->
 <!--<li><p>If <var>systemId</var> contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE ("'") character, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <a href=#concept-doctype title=concept-doctype>document type
 declaration</a>, with <var>qualifiedName</var> as its <a href=#concept-doctype-name title=concept-doctype-name>name</a>, <var>publicId</var> as its <a href=#concept-doctype-publicid title=concept-doctype-publicid>public ID</a>, and <var>systemId</var>
 as its <a href=#concept-doctype-systemid title=concept-doctype-systemid>system ID</a>, and with its
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to null.
</ol>
<p class=note>No check is performed that the <var>publicId</var> matches the <code title="">PublicChar</code> production in XML or that the <var>systemId</var> doesn't contain both a quotation mark (") and an apostrophe (').

<p>The <dfn id=dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument><code>createDocument(<var>namespaceURI</var>, <var>qualifiedName</var>, <var>doctype</var>)</code></dfn> method must run the following steps:

<p class=XXX>make arguments optional?

<ol>
 <li><p>Let <a href=#document><var>document</var></a> be a new <a href=#document><code>Document</code></a> node.
 <li><p>Let <a href=#element><var>element</var></a> be null.
 <li><p>If <var>qualifiedName</var> is not the empty string, set <a href=#element><var>element</var></a> to the result of invoking the <a href=#dom-document-createelementns><code title=dom-Document-createElementNS>createElementNS</code></a> method with the arguments <var>namespaceURI</var> and <var>qualifiedName</var> on <a href=#document><var>document</var></a>. If that raised an exception, re-raise the same exception and abort these steps.
 <li>
  <p>If <var>doctype</var> is not null, run the following substeps:
  <ol>
   <li><p>If the <var>doctype</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not null, raise a <a href=#dom-domexception-wrong_document_err><code title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</code></a> exception and abort the overall set of steps.
   <li><p>Set the <var>doctype</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> to <a href=#document><var>document</var></a>.
   <li><p>Append <var>doctype</var> to <a href=#document><var>document</var></a>.
  </ol>
 <li><p>If <a href=#element><var>element</var></a> is not null, append <a href=#element><var>element</var></a> to <a href=#document><var>document</var></a>.
 <li><p>Return <a href=#document><var>document</var></a>.
</ol>

<p><a href=#html-document title="HTML document">HTML documents</a> can be created using the
<a href=#dom-domimplementation-createhtmldocument><code title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument()</code></a>
method.

<p>The <dfn id=dom-domimplementation-createhtmldocument title=dom-DOMImplementation-createHTMLDocument><code>createHTMLDocument(<var title="">title</var>)</code></dfn> method, when invoked, must run the following
steps:

<ol>
 <li><p>Let <var>doc</var> be a newly created <a href=#document><code>Document</code></a>
 object.

 <li><p>Mark <var>doc</var> as being an <a href=#html-document>HTML document</a>.

 <li><p>Create a new <a href=#concept-doctype title=concept-doctype>document type
 declaration</a>, with "<code title="">html</code>" as its <a href=#concept-doctype-name title=concept-doctype-name>name</a> and with its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to doc. Append the newly
 created node to <var>doc</var>.

 <li><p>Create an <code title="">html</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to <var>doc</var>.

 <li><p>Create a <code title="">head</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">html</code> element created
 in the previous step.

 <li><p>Create a <code title="">title</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">head</code> element created
 in the previous step.

 <li><p>Create a <a href=#text><code>Text</code></a> node, and set its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute to the string given by the
 method's argument (which could be the empty string). Append it to the
 <code title="">title</code> element created in the previous step.

 <li><p>Create a <code title="">body</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">html</code> element created
 in the earlier step.

 <li><p>Return <var>doc</var>.</li>
</ol>

</div>


<h3 id=interface-attr><span class=secno>5.4 </span>Interface <a href=#attr><code>Attr</code></a></h3>

<p class=XXX>Free <a href=#attr><code>Attr</code></a> from <a href=#node><code>Node</code></a>?</p>

<pre class=idl>interface <dfn id=attr>Attr</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-attr-name title=dom-Attr-name>name</a>;
  readonly attribute boolean <a href=#dom-attr-specified title=dom-Attr-specified>specified</a>;
           attribute DOMString <a href=#dom-attr-value title=dom-Attr-value>value</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-attr-ownerelement title=dom-Attr-ownerElement>ownerElement</a>;<!--
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;-->
};</pre>

<p><a href=#attr><code>Attr</code></a> nodes represent <dfn id=concept-attribute title=concept-attribute>attributes</dfn>. They have a <dfn id=concept-attribute-name title=concept-attribute-name>name</dfn> and an <dfn id=concept-attribute-element title=concept-attribute-element>element</dfn> associated with them when they are
created<!--, or when they are passed as the argument to the <code
title=dom-Element-setAttributeNode>setAttributeNode</code> method.
[createAttribute]-->. <a href=#attr><code>Attr</code></a> nodes are not considered part of the
document tree, so their <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a>, <a href=#dom-node-previoussibling><code title=dom-Node-previousSibling>previousSibling</code></a> and <a href=#dom-node-nextsibling><code title=dom-Node-nextSibling>nextSibling</code></a> attributes return null. Also, its
child nodes can not be manipulated directly through the <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a>, <a href=#dom-node-replacechild><code title=dom-Node-replaceChild>replaceChild</code></a> and <a href=#dom-node-appendchild><code title=dom-Node-appendChild>appendChild</code></a> methods.

<p>The <dfn id=dom-attr-name title=dom-Attr-name><code>name</code></dfn> attribute must return
the <a href=#concept-attribute-name title=concept-attribute-name>name</a> associated with the
<a href=#context-node>context node</a>.

<p>The <dfn id=dom-attr-specified title=dom-Attr-specified><code>specified</code></dfn> attribute must
return true.

<p>The <dfn id=dom-attr-value title=dom-Attr-value><code>value</code></dfn> attribute, on getting,
must return the same value as the <a href=#dom-node-textcontent><code title=dom-Node-textContent>textContent</code></a> IDL attribute on the
<a href=#context-node>context node</a>, and on setting, must act as if the <a href=#dom-node-textcontent><code title=dom-Node-textContent>textContent</code></a> IDL attribute on the
<a href=#context-node>context node</a> had been set to the new value.

<p>The <dfn id=dom-attr-ownerelement title=dom-Attr-ownerElement><code>ownerElement</code></dfn>
attribute must return the <a href=#concept-attribute-element title=concept-attribute-element>element</a>
associated with the <a href=#context-node>context node</a><!--, if there is one, or null
otherwise [createAttribute]-->.

<hr>

<p>This specification further defines two special types of <a href=#concept-attribute title=concept-attribute>attributes</a>: <a href=#concept-id-attribute title=concept-ID-attribute>ID
attributes</a> and <a href=#concept-class-attribute title=concept-class-attribute>class
attributes</a>.

<p><dfn id=concept-id-attribute title=concept-ID-attribute>ID attributes</dfn> must have a
<a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> that contains at least one character and
does not contain any <a href=#space-character title="space character">space characters</a>. The
<a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> must be unique amongst all the <a href=#concept-id title=concept-id>IDs</a> in the element's <a href=#home-subtree>home subtree</a>.

<p class=note>For example, the <a href=http://www.whatwg.org/html/#attr-id><code class=external data-anolis-spec=html title=attr-id>id</code></a> attribute in HTML is an <a href=#concept-id-attribute title=concept-ID-attribute>ID attribute</a>, as well as the <code title="">id</code> attributes in MathML and SVG. <a class=informative data-anolis-ref="" href=#refsHTML>[HTML]</a> <a class=informative data-anolis-ref="" href=#refsMATHML>[MATHML]</a> <a class=informative data-anolis-ref="" href=#refsSVG>[SVG]</a>

<p><dfn id=concept-class-attribute title=concept-class-attribute>Class attributes</dfn> must have a
<a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> that is a <a href=#set-of-space-separated-tokens>set of space-separated
tokens</a> representing the various <dfn id=concept-class title=concept-class>classes</dfn>
that the element belongs to.

<p>The <a href=#concept-class title=concept-class>classes</a> that an <a href=#element><code>Element</code></a>
node has associated with it is the set of all the <a href=#concept-class title=concept-class>classes</a> returned when the value of the <a href=#concept-class-attribute title=concept-class-attribute>class attribute</a> is <a href=#split-a-string-on-spaces title="split a string on spaces">split on spaces</a>. (Duplicates are
ignored.)

<p class=note>The <code title="">class</code> attributes in HTML, MathML and SVG
are all <a href=#concept-class-attribute title=concept-class-attribute>class attributes</a>. <a class=informative data-anolis-ref="" href=#refsHTML>[HTML]</a> <a class=informative data-anolis-ref="" href=#refsMATHML>[MATHML]</a> <a class=informative data-anolis-ref="" href=#refsSVG>[SVG]</a>

<p class=note>This specification does not <!--normatively--> define the <a href=#concept-attribute-name title=concept-attribute-name>name</a> of <a href=#concept-id-attribute title=concept-id-attribute>ID</a> or <a href=#concept-class-attribute title=concept-class-attribute>class attributes</a>.


<h3 id=interface-element><span class=secno>5.5 </span>Interface <a href=#element><code>Element</code></a></h3>
<pre class=idl>interface <dfn id=element>Element</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-element-tagname title=dom-Element-tagName>tagName</a>;

  DOMString? <a href=#dom-element-getattribute title=dom-Element-getAttribute>getAttribute</a>(DOMString name);
  DOMString? <a href=#dom-element-getattributens title=dom-Element-getAttributeNS>getAttributeNS</a>(DOMString namespaceURI, DOMString localName);
  void <a href=#dom-element-setattribute title=dom-Element-setAttribute>setAttribute</a>(DOMString name, DOMString value);
  void <a href=#dom-element-setattributens title=dom-Element-setAttributeNS>setAttributeNS</a>(DOMString namespaceURI, DOMString qualifiedName, DOMString value);
  void <a href=#dom-element-removeattribute title=dom-Element-removeAttribute>removeAttribute</a>(DOMString name);
  void <a href=#dom-element-removeattributens title=dom-Element-removeAttributeNS>removeAttributeNS</a>(DOMString namespaceURI, DOMString localName);
  boolean <a href=#dom-element-hasattribute title=dom-Element-hasAttribute>hasAttribute</a>(DOMString name);
  boolean <a href=#dom-element-hasattributens title=dom-Element-hasAttributeNS>hasAttributeNS</a>(DOMString namespaceURI, DOMString localName);
<!--
  <span>Attr</span> <span title=dom-Element-getAttributeNode>getAttributeNode</span>(DOMString name);
  <span>Attr</span> <span title=dom-Element-getAttributeNodeNS>getAttributeNodeNS</span>(DOMString namespaceURI, DOMString localName);
  <span>Attr</span> <span title=dom-Element-setAttributeNode>setAttributeNode</span>(Attr newAttr);
  <span>Attr</span> <span title=dom-Element-removeAttributeNode>removeAttributeNode</span>(Attr oldAttr);
-->
  <a href=#nodelist>NodeList</a> <a href=#dom-element-getelementsbytagname title=dom-Element-getElementsByTagName>getElementsByTagName</a>(DOMString name);
  <a href=#nodelist>NodeList</a> <a href=#dom-element-getelementsbytagnamens title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</a>(DOMString namespaceURI, DOMString localName);
  <a href=#nodelist>NodeList</a> <a href=#dom-element-getelementsbyclassname title=dom-Element-getElementsByClassName>getElementsByClassName</a>(DOMString classNames);<!--
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(DOMString name, boolean isId);
  void setIdAttributeNS(DOMString namespaceURI, DOMString localName, boolean isId);
  void setIdAttributeNode(Attr idAttr, boolean isId);-->

           attribute <a href=#htmlcollection>HTMLCollection</a> <a href=#dom-element-children title=dom-Element-children>children</a>;
};</pre>

<p><a href=#element><code>Element</code></a> nodes can have a <dfn id=concept-id title=concept-id>unique
identifier (ID)</dfn> associated with them. User agents must associate the
<a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> of all <a href=#concept-id-attribute title=concept-ID-attribute>ID attributes</a> in the <a href=#element><code>Element</code></a>
node's <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> with the
<a href=#element><code>Element</code></a> node, unless it contains less than one character.

<p>Specifications may define <dfn id=base-url-change-steps>base URL change steps</dfn>.

<p>When an <a href=#element><code>Element</code></a> node is <dfn id=affected-by-a-base-url-change>affected by a base URL
change</dfn>, the user agent must run the <a href=#base-url-change-steps>base URL change steps</a>, as
defined in <a href=#other-applicable-specifications>other applicable specifications</a>.

<p>The <dfn id=dom-element-tagname title=dom-Element-tagName><code>tagName</code></dfn> attribute must,
on getting, run the following steps:
<ol>
 <li><p>If the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> is not null, let <var>tagName</var>
 be the concatenation of the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>, a U+003E COLON (":") character and its
 <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>. Otherwise, let <var title="">tagName</var> be just the the <a href=#context-node>context node</a>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>.

 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, return <var>tagName</var>, <a href=#converted-to-uppercase>converted to
 uppercase</a>. Otherwise, return <var>tagName</var>.
</ol>

<hr>

<p>The <dfn id=dom-element-getattribute title=dom-Element-getAttribute><code>getAttribute(<var title="">name</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, let <var>name</var> be <var>name</var>,
 <a href=#converted-to-lowercase>converted to lowercase</a>.

 <li><p>Return the value of the first attribute in the <a href=#context-node>context
 node</a>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals the first argument, in any
 namespace, if the attribute is present, or null otherwise.
</ol>

<p class=XXX><dfn id=dom-element-getattributens title=dom-Element-getAttributeNS>getAttributeNS</dfn> (might return null; Gecko and WebKit don't)

<p>The <dfn id=dom-element-setattribute title=dom-Element-setAttribute><code>setAttribute(<var title="">name</var>, <var>value</var>)</code></dfn> method must run the
following steps:

<ol>
 <li><p>If <var>name</var> is empty or <var>name</var> doesn't
 match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external data-anolis-spec=xml>Name</code></a> production in XML, raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.

 <li class=XXX><p>Do something about <var>name</var> == "xmlns"?
 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=315805">Moz bug 315805</a>

 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, let <var>name</var> be <var>name</var>,
 <a href=#converted-to-lowercase>converted to lowercase</a>.

 <li><p>If the node doesn't have an attribute whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals <var>name</var>,
 create an <a href=#attr><code>Attr</code></a> node, with <var>name</var> as its <a href=#concept-attribute-name title=concept-attribute-name>name</a> and the <a href=#context-node>context node</a> as
 its <a href=#concept-attribute-element title=concept-attribute-element>element</a>. Set its <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> to <var>value</var>. Append this node
 to the <a href=#context-node title="context node">context node's</a> <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>, as its last item.

 <li><p>Otherwise, set the <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> of the first
 attribute in the <a href=#context-node title="context node">context node's</a> <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals <var>name</var>,
 in any namespace, to <var>value</var>.
</ol>

<p class=XXX><dfn id=dom-element-setattributens title=dom-Element-setAttributeNS>setAttributeNS</dfn>

<p class=XXX><dfn id=dom-element-removeattribute title=dom-Element-removeAttribute>removeAttribute</dfn>

<p class=XXX><dfn id=dom-element-removeattributens title=dom-Element-removeAttributeNS>removeAttributeNS</dfn>

<p class=XXX><dfn id=dom-element-hasattribute title=dom-Element-hasAttribute>hasAttribute</dfn>

<p class=XXX><dfn id=dom-element-hasattributens title=dom-Element-hasAttributeNS>hasAttributeNS</dfn>

<!--<dfn title=dom-Element-getAttributeNode>getAttributeNode</dfn>: when the
Element.getAttributeNode() method is invoked on an HTML element, the name
argument must be converted to ASCII lowercase before the element's attributes
are examined. (In HTML documents.) -->

<!-- <dfn title=dom-Element-setAttributeNode>setAttributeNode</dfn>: when an
Attr node is set on an HTML element using Element.setAttributeNode(), it must
have its name converted to ASCII lowercase before the element is affected.
(In HTML documents.) -->

<hr>

<p>The <dfn id=dom-element-getelementsbytagname title=dom-Element-getElementsByTagName><code>getElementsByTagName(<var title="">name</var>)</code></dfn> method on the <a href=#element><code>Element</code></a>
interface must return a <a href=#concept-collection-live title=concept-collection-live>live</a>
<a href=#nodelist><code>NodeList</code></a> with the nodes that the <a href=#dom-document-getelementsbytagname><code title=dom-Document-getElementsByTagName>getElementsByTagName</code></a>
method would return when called on the <a href=#context-node title="context node">context
node's</a> <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> and
passed the same argument, excluding any elements that are not descendants of
the <a href=#context-node>context node</a> on which the method was invoked.
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.


<p>The <dfn id=dom-element-getelementsbytagnamens title=dom-Element-getElementsByTagNameNS><code>getElementsByTagNameNS(<var title="">namespaceURI</var>, <var>localName</var>)</code></dfn> method on the
<a href=#element><code>Element</code></a> interface must return a <a href=#concept-collection-live title=concept-collection-live>live</a> <a href=#nodelist><code>NodeList</code></a> with the nodes
that the <a href=#dom-document-getelementsbytagnamens><code title=dom-Document-getElementsByTagNameNS>getElementsByTagNameNS</code></a>
method would return when called on the <a href=#context-node title="context node">context
node's</a> <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> and
passed the same arguments, excluding any elements that are not descendants of
the <a href=#context-node>context node</a> on which the method was invoked.
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.


<p>The <dfn id=dom-element-getelementsbyclassname title=dom-Element-getElementsByClassName><code>getElementsByClassName(<var title="">classNames</var>)</code></dfn> method on the <a href=#element><code>Element</code></a>
interface must return a <a href=#concept-collection-live title=concept-collection-live>live</a>
<a href=#nodelist><code>NodeList</code></a> with the nodes that the <a href=#dom-document-getelementsbyclassname><code title=dom-Document-getElementsByClassName>getElementsByClassName</code></a>
method would return when called on the <a href=#context-node title="context node">context
node's</a> <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> and
passed the same argument, excluding any elements that are not descendants of
the <a href=#context-node>context node</a> on which the method was invoked.
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.

<hr>

<p>The <dfn id=dom-element-children title=dom-Element-children><code>children</code></dfn> attribute
must return an <a href=#htmlcollection><code>HTMLCollection</code></a> <a href=#concept-collection title=concept-collection>collection</a>, rooted at the <a href=#context-node>context
node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes whose <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a> is the <a href=#context-node>context node</a>.
<span class=XXX title="">Or a <a href=#nodelist><code>NodeList</code></a>?</span>


<h3 id=interface-documenttype><span class=secno>5.6 </span>Interface <a href=#documenttype><code>DocumentType</code></a></h3>
<pre class=idl>interface <dfn id=documenttype>DocumentType</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-documenttype-name title=dom-DocumentType-name>name</a>;<!--
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;-->
  readonly attribute DOMString <a href=#dom-documenttype-publicid title=dom-DocumentType-publicId>publicId</a>;
  readonly attribute DOMString <a href=#dom-documenttype-systemid title=dom-DocumentType-systemId>systemId</a>;<!--
  readonly attribute DOMString internalSubset;-->
};</pre>

<p><a href=#documenttype><code>DocumentType</code></a> nodes represent <dfn id=concept-doctype title=concept-doctype>document
type declarations</dfn>. They have a <dfn id=concept-doctype-name title=concept-doctype-name>name</dfn>
and potentially a <dfn id=concept-doctype-publicid title=concept-doctype-publicid>public ID</dfn>, and a
<dfn id=concept-doctype-systemid title=concept-doctype-systemid>system ID</dfn> associated with them when
they are created.

<p>The <dfn id=dom-documenttype-name title=dom-DocumentType-name><code>name</code></dfn> attribute must,
on getting, return the <a href=#context-node title="context node">context node's</a> <a href=#concept-doctype-name title=concept-doctype-name>name</a>.

<p>The <dfn id=dom-documenttype-publicid title=dom-DocumentType-publicId><code>publicId</code></dfn>
attribute must, on getting, return the <a href=#context-node title="context node">context
node's</a> <a href=#concept-doctype-publicid title=concept-doctype-publicid>public ID</a>, if it has
one, or the empty string otherwise.

<p>The <dfn id=dom-documenttype-systemid title=dom-DocumentType-systemId><code>systemId</code></dfn>
attribute must, on getting, return the <a href=#context-node title="context node">context
node's</a> <a href=#concept-doctype-systemid title=concept-doctype-systemid>system ID</a>, if it has
one, or the empty string otherwise.


<h3 id=interface-processinginstruction><span class=secno>5.7 </span>Interface <a href=#processinginstruction><code>ProcessingInstruction</code></a></h3>
<pre class=idl>interface <dfn id=processinginstruction>ProcessingInstruction</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-processinginstruction-target title=dom-ProcessingInstruction-target>target</a>;
           attribute DOMString <a href=#dom-processinginstruction-data title=dom-ProcessingInstruction-data>data</a>;
};</pre>

<p><a href=#processinginstruction><code>ProcessingInstruction</code></a> nodes represent <dfn id=concept-pi title=concept-PI>processing instructions</dfn>. They have a <dfn id=concept-pi-target title=concept-PI-target>target</dfn> associated with them when they are created,
as well as some <dfn id=concept-pi-data title=concept-PI-data>data</dfn>.

<p>The <dfn id=dom-processinginstruction-target title=dom-ProcessingInstruction-target><code>target</code></dfn>
attribute must, on getting, return the <a href=#context-node title="context node">context
node's</a> <a href=#concept-pi-target title=concept-PI-target>target</a>.

<p>The <dfn id=dom-processinginstruction-data title=dom-ProcessingInstruction-data><code>data</code></dfn>
attribute must, on getting, return the <a href=#context-node title="context node">context
node's</a> <a href=#concept-pi-data title=concept-PI-data>data</a>, and on setting, set the
<a href=#context-node title="context node">context node's</a> <a href=#concept-pi-data title=concept-PI-data>data</a> to the new value.


<h3 id=interface-characterdata><span class=secno>5.8 </span>Interface <a href=#characterdata><code>CharacterData</code></a></h3>
<pre class=idl>interface <dfn id=characterdata>CharacterData</dfn> : <a href=#node>Node</a> {
  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-characterdata-data title=dom-CharacterData-data>data</a>;
  readonly attribute unsigned long <a href=#dom-characterdata-length title=dom-CharacterData-length>length</a>;
  DOMString <a href=#dom-characterdata-substringdata title=dom-CharacterData-substringData>substringData</a>(unsigned long <var>offset</var>, unsigned long <var>count</var>);
  void <a href=#dom-characterdata-appenddata title=dom-CharacterData-appendData>appendData</a>(DOMString <var>data</var>);
  void <a href=#dom-characterdata-insertdata title=dom-CharacterData-insertData>insertData</a>(unsigned long <var>offset</var>, DOMString <var>data</var>);
  void <a href=#dom-characterdata-deletedata title=dom-CharacterData-deleteData>deleteData</a>(unsigned long <var>offset</var>, unsigned long <var>count</var>);
  void <a href=#dom-characterdata-replacedata title=dom-CharacterData-replaceData>replaceData</a>(unsigned long <var>offset</var>, unsigned long <var>count</var>, DOMString <var>data</var>);
};</pre>

<p>The <dfn id=dom-characterdata-data title=dom-CharacterData-data><code>data</code></dfn> attribute must return the data of the node, and on setting, must change the node's data to the new value.

<p>The <dfn id=dom-characterdata-length title=dom-CharacterData-length><code>length</code></dfn> attribute must return the number of UTF-16 code units represented by the node's data.

<p>The <dfn id=dom-characterdata-substringdata title=dom-CharacterData-substringData><code>substringData(<var title="">offset</var>, <var>count</var>)</code></dfn> method must run these
steps:

<ol>
 <li><p>If <var>offset</var> is negative or is greater than the
 <a href=#context-node>context node</a>'s <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>,
 or if <var>count</var> is negative, raise an <a href=#dom-domexception-index_size_err><code title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</code></a> exception and abort
 these steps.

 <li><p>If <span title=""><var>offset</var>+<var>count</var></span> is
 greater than the <a href=#context-node>context node</a>'s <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>, return a <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString><code class=external data-anolis-spec=webidl>DOMString</code></a> whose value is the UTF-16 code units
 from the <var>offset</var>th UTF-16 code unit to the end of <var title="">data</var>.

 <li><p>Return a <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString><code class=external data-anolis-spec=webidl>DOMString</code></a> whose value is
 the UTF-16 code units from the <var>offset</var>th UTF-16 code unit to
 the <span title=""><var>offset</var>+<var>count</var></span>th UTF-16
 code unit in <var>data</var>.
</ol>

<p>The <dfn id=dom-characterdata-appenddata title=dom-CharacterData-appendData><code>appendData(<var>data</var>)</code></dfn> method must append <var>data</var> to the <a href=#context-node>context node</a>'s data.</p>

<p>The <dfn id=dom-characterdata-insertdata title=dom-CharacterData-insertData><code>insertData(<var>offset</var>, <var>data</var>)</code></dfn> method must run these steps:</p>

<ol>
 <li><p>If <var>offset</var> is greater than the <a href=#context-node>context node</a>'s
 <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>, raise an
 <a href=#dom-domexception-index_size_err><code title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</code></a> exception
 and terminate these steps.</li>

 <li><p>Insert <var>data</var> into the <a href=#context-node>context node</a>'s data
 after <var>offset</var> UTF-16 code units.</li>
</ol>

<p>The <dfn id=dom-characterdata-deletedata title=dom-CharacterData-deleteData><code>deleteData(<var>offset</var>, <var>count</var>)</code></dfn> method must run these steps:</p>

<ol>
 <li><p>If <var>offset</var> is greater than the <a href=#context-node>context node</a>'s
 <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>, raise an
 <a href=#dom-domexception-index_size_err><code title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</code></a> exception
 and terminate these steps.</li>

 <li><p>If <var>offset</var>+<var>count</var> is greater than the
 <a href=#context-node>context node</a>'s
 <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a> let <var>count</var> be
 <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>-<var>offset</var>.</li>

 <li><p>Starting from <var>offset</var> UTF-16 code units remove
 <var>count</var> UTF-16 code units from the <a href=#context-node>context node</a>'s
 data.</li>
</ol>

<p>The <dfn id=dom-characterdata-replacedata title=dom-CharacterData-replaceData><code>replaceData(<var>offset</var>, <var>count</var>, <var>data</var>)</code></dfn> method must act as if
the <a href=#dom-characterdata-deletedata><code title=dom-CharacterData-deleteData>deleteData()</code></a> method is
invoked with <var>offset</var> and <var>count</var> as arguments followed
by the <a href=#dom-characterdata-insertdata><code title=dom-CharacterData-insertData>insertData()</code></a> method
with <var>offset</var> and <var>data</var> as arguments and re-raise any
exceptions these methods might have raised.</p>


<h3 id=interface-text><span class=secno>5.9 </span>Interface <a href=#text><code>Text</code></a></h3>
<pre class=idl>interface <dfn id=text>Text</dfn> : <a href=#characterdata>CharacterData</a> {
  <a href=#text>Text</a> <a href=#dom-text-splittext title=dom-Text-splitText>splitText</a>(unsigned long offset);<!--
  readonly attribute boolean isElementContentWhitespace;-->
  readonly attribute DOMString <a href=#dom-text-wholetext title=dom-Text-wholeText>wholeText</a>;
  <a href=#text>Text</a> <a href=#dom-text-replacewholetext title=dom-Text-replaceWholeText>replaceWholeText</a>(DOMString content);
};</pre>

<p class=XXX><dfn id=dom-text-splittext title=dom-Text-splitText>splitText</dfn>

<p class=XXX><dfn id=dom-text-wholetext title=dom-Text-wholeText>wholeText</dfn>

<p class=XXX><dfn id=dom-text-replacewholetext title=dom-Text-replaceWholeText>replaceWholeText</dfn>

<!-- isElementContentWhitespace: Mozilla returns true if the node contains only
space, tab, newline -->


<h3 id=interface-comment><span class=secno>5.10 </span>Interface <a href=#comment><code>Comment</code></a></h3>
<pre class=idl>interface <dfn id=comment>Comment</dfn> : <a href=#characterdata>CharacterData</a> {
};</pre>



<h2 id=collections><span class=secno>6 </span>Collections</h2>
<p>A <dfn id=concept-collection title=concept-collection>collection</dfn> is an object that represents
a lists of DOM nodes. A <a href=#concept-collection title=concept-collection>collection</a> can be
either <dfn id=concept-collection-live title=concept-collection-live>live</dfn> or <dfn id=concept-collection-static title=concept-collection-static>static</dfn>. Unless otherwise stated, a <a href=#concept-collection title=concept-collection>collection</a> must be <a href=#concept-collection-live title=concept-collection-live>live</a>.

<p>If a <a href=#concept-collection title=concept-collection>collection</a> is <a href=#concept-collection-live title=concept-collection-live>live</a>, then the attributes and methods on
that object must operate on the actual underlying data, not a snapshot of
the data.

<p>When a <a href=#concept-collection title=concept-collection>collection</a> is created, a filter
and a root are associated with it.

<p>The <a href=#concept-collection title=concept-collection>collection</a> then <dfn id=represented-by-the-collection title="represented by the collection">represents</dfn> a view of the subtree
rooted at the <a href=#concept-collection title=concept-collection>collection's</a> root,
containing only nodes that match the given filter. The view is linear. In the
absence of specific requirements to the contrary, the nodes within the <a href=#concept-collection title=concept-collection>collection</a> must be sorted in <a href=#tree-order>tree
order</a>.

<p>An attribute that returns a <a href=#concept-collection-live title=concept-collection-live>live</a>
<a href=#concept-collection title=concept-collection>collection</a> must return the same object
every time it is retrieved.


<h3 id=interface-nodelist><span class=secno>6.1 </span>Interface <a href=#nodelist><code>NodeList</code></a></h3>
<p>A <a href=#nodelist><code>NodeList</code></a> object is a kind of <a href=#concept-collection title=concept-collection>collection</a>.

<pre class=idl>interface <dfn id=nodelist>NodeList</dfn> {
  getter <a href=#node>Node</a> <a href=#dom-nodelist-item title=dom-NodeList-item>item</a>(unsigned long index);
  readonly attribute unsigned long <a href=#dom-nodelist-length title=dom-NodeList-length>length</a>;
};</pre>

<p>The <dfn id=dom-nodelist-item title=dom-NodeList-item><code>item(<var title="">index</var>)</code></dfn> method must return the <var>index</var>th
node in the <a href=#concept-collection title=concept-collection>collection</a>. If there is no
<var>index</var>th node in the <a href=#concept-collection title=concept-collection>collection</a>, then the method must return null.

<p>The <dfn id=dom-nodelist-length title=dom-NodeList-length><code>length</code></dfn> attribute must,
on getting, return the number of nodes <a href=#represented-by-the-collection>represented by the
collection</a>.

<p><a href=#nodelist><code>NodeList</code></a>s are enumerable. <span class=XXX title="">Explain? <code title="">for ... in</code></span>


<h3 id=interface-htmlcollection><span class=secno>6.2 </span>Interface <a href=#htmlcollection><code>HTMLCollection</code></a></h3>
<p>The <a href=#htmlcollection><code>HTMLCollection</code></a> interface represents a generic <a href=#concept-collection title=concept-collection>collection</a> of elements.

<p class=note>This interface is called <a href=#htmlcollection><code>HTMLCollection</code></a> for
historical reasons. The various getters on this interface return <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-object><code class=external data-anolis-spec=webidl>object</code></a> for interfaces that inherit from
it, which return other objects for historical reasons.

<pre class=idl>interface <dfn id=htmlcollection>HTMLCollection</dfn> {
readonly attribute unsigned long <a href=#dom-htmlcollection-length title=dom-HTMLCollection-length>length</a>;
caller getter object <a href=#dom-htmlcollection-item title=dom-HTMLCollection-item>item</a>(unsigned long index); // only returns Element
caller getter object <a href=#dom-htmlcollection-nameditem title=dom-HTMLCollection-namedItem>namedItem</a>(DOMString name); // only returns Element
};</pre>

<dl class=domintro>
 <dt><var>collection</var> . <a href=#dom-htmlcollection-length><code title=dom-HTMLCollection-length>length</code></a>
 <dd>
  <p>Returns the number of elements in the collection.

 <dt><a href=#element><var>element</var></a> = <var>collection</var> . <a href=#dom-htmlcollection-item><code title=dom-HTMLCollection-item>item</code></a>(<var>index</var>)
 <dt><var>collection</var>[<var>index</var>]
 <dt><var>collection</var>(<var>index</var>)
 <dd>
  <p>Returns the item with index <var>index</var> from the collection. The items are sorted in <a href=#tree-order>tree order</a>.
  <p>Returns null if <var>index</var> is out of range.

 <dt><a href=#element><var>element</var></a> = <var>collection</var> . <a href=#dom-htmlcollection-nameditem><code title=dom-HTMLCollection-namedItem>namedItem</code></a>(<var>name</var>)</dt>
 <dt><var>collection</var>[<var>name</var>]</dt>
 <dt><var>collection</var>(<var>name</var>)</dt>
 <dd>
  <p>Returns the first item with <a href=#concept-id title=concept-id>ID</a> or name <var>name</var>
  from the collection.</p>
  <p>Returns null if no element with that <a href=#concept-id title=concept-id>ID</a> or name could be found.</p>
  <p>Only <code title="">a</code>, <code title="">applet</code>, <code title="">area</code>,
  <code title="">embed</code>, <code title="">form</code>, <code title="">frame</code>,
  <code title="">frameset</code>, <code title="">iframe</code>, <code title="">img</code>, and
  <code title="">object</code> elements in the <a href=#html-namespace>HTML namespace</a> can have a
  name for the purpose of this method; their name is given by the value of their
  <code title="">name</code> attribute.</p>
 </dd>
</dl>

<p>The object's <a class=external data-anolis-spec=webidl href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property indices</a>
are the numbers in the range zero to one less than the number of nodes
<a href=#represented-by-the-collection>represented by the collection</a>. If there are no such elements, then
there are no <a class=external data-anolis-spec=webidl href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property indices</a>.

<p>The <dfn id=dom-htmlcollection-length title=dom-HTMLCollection-length><code>length</code></dfn> attribute
must return the number of nodes <a href=#represented-by-the-collection>represented by the collection</a>.

<p>The <dfn id=dom-htmlcollection-item title=dom-HTMLCollection-item><code>item(<var title="">index</var>)</code></dfn> method must return the <var title="">index</var>th node in the collection. If there is no <var title="">index</var>th node in the collection, then the method must
return null.

<p>The <a class=external data-anolis-spec=webidl href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-names>supported property names</a> consist
of the values of the <code title="">name</code> attributes of each <code title="">a</code>, <code title="">applet</code>, <code title="">area</code>, <code title="">embed</code>, <code title="">form</code>, <code title="">frame</code>, <code title="">frameset</code>, <code title="">iframe</code>, <code title="">img</code>, and
<code title="">object</code> element in the <a href=#html-namespace>HTML namespace</a>,
<a href=#represented-by-the-collection>represented by the collection</a> with a <code title="">name</code>
attribute, plus the list of <a href=#concept-id title=concept-id>IDs</a> that the elements
<a href=#represented-by-the-collection>represented by the collection</a> have.

<p>The <dfn id=dom-htmlcollection-nameditem title=dom-HTMLCollection-namedItem><code>namedItem(<var title="">key</var>)</code></dfn> method must return the first node in the
<a href=#concept-collection title=concept-collection>collection</a> that matches the following
requirements:</p>

<ul>
 <li>It is an <code title="">a</code>, <code title="">applet</code>, <code title="">area</code>, <code title="">embed</code>, <code title="">form</code>, <code title="">frame</code>, <code title="">frameset</code>, <code title="">iframe</code>,
 <code title="">img</code>, or <code title="">object</code> element, in the <a href=#html-namespace>HTML
 namespace</a>, with a <code title="">name</code> attribute equal to <var title="">key</var>, or,

 <li>It is an element with an <a href=#concept-id title=concept-id>ID</a>
 equal to <var>key</var>.
</ul>

<p>If no such elements are found, then the method must return
null.


<h3 id=interface-namednodemap><span class=secno>6.3 </span>Interface <a href=#namednodemap><code>NamedNodeMap</code></a></h3>
<p>A <a href=#namednodemap><code>NamedNodeMap</code></a> object is a kind of <a href=#concept-collection title=concept-collection>collection</a>, whose primary purpose is to expose
<a href=#node><code>Node</code></a>s by name.

<pre class=idl>interface <dfn id=namednodemap>NamedNodeMap</dfn> {
  <a href=#node>Node</a> <a href=#dom-namednodemap-getnameditem title=dom-NamedNodeMap-getNamedItem>getNamedItem</a>(DOMString name);
  <a href=#node>Node</a> <a href=#dom-namednodemap-setnameditem title=dom-NamedNodeMap-setNamedItem>setNamedItem</a>(<a href=#node>Node</a> arg);
  <a href=#node>Node</a> <a href=#dom-namednodemap-removenameditem title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</a>(DOMString name);
  <a href=#node>Node</a> <a href=#dom-namednodemap-item title=dom-NamedNodeMap-item>item</a>(unsigned long index);
  readonly attribute unsigned long <a href=#dom-namednodemap-length title=dom-NamedNodeMap-length>length</a>;
  <a href=#node>Node</a> <a href=#dom-namednodemap-getnameditemns title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</a>(DOMString namespaceURI, DOMString localName);
  <a href=#node>Node</a> <a href=#dom-namednodemap-setnameditemns title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</a>(<a href=#node>Node</a> arg);
  <a href=#node>Node</a> <a href=#dom-namednodemap-removenameditemns title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</a>(DOMString namespaceURI, DOMString localName);
};</pre>

<p class=XXX><dfn id=dom-namednodemap-getnameditem title=dom-NamedNodeMap-getNamedItem>getNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-setnameditem title=dom-NamedNodeMap-setNamedItem>setNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-removenameditem title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-item title=dom-NamedNodeMap-item>item</dfn>

<p>The <dfn id=dom-namednodemap-length title=dom-NamedNodeMap-length><code>length</code></dfn> attribute
must, on getting, return the number of nodes <a href=#represented-by-the-collection>represented by the
collection</a>.

<p class=XXX><dfn id=dom-namednodemap-getnameditemns title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</dfn>

<p class=XXX><dfn id=dom-namednodemap-setnameditemns title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</dfn>

<p class=XXX><dfn id=dom-namednodemap-removenameditemns title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</dfn>



<h2 id=lists><span class=secno>7 </span>Lists</h2>
<h3 id=interface-domstringlist><span class=secno>7.1 </span>Interface <a href=#domstringlist><code>DOMStringList</code></a></h3>
<pre class=idl>interface <dfn id=domstringlist>DOMStringList</dfn> {
  DOMString <a href=#dom-domstringlist-item title=dom-DOMStringList-item>item</a>(unsigned long index);
  readonly attribute unsigned long <a href=#dom-domstringlist-length title=dom-DOMStringList-length>length</a>;
  boolean <a href=#dom-domstringlist-contains title=dom-DOMStringList-contains>contains</a>(DOMString str);
};</pre>

<p class=XXX><dfn id=dom-domstringlist-item title=dom-DOMStringList-item>item</dfn>

<p class=XXX><dfn id=dom-domstringlist-length title=dom-DOMStringList-length>length</dfn>

<p class=XXX><dfn id=dom-domstringlist-contains title=dom-DOMStringList-contains>contains</dfn>


<h3 id=interface-domtokenlist><span class=secno>7.2 </span>Interface <a href=#domtokenlist><code>DOMTokenList</code></a></h3>
<p>The <a href=#domtokenlist><code>DOMTokenList</code></a> interface represents an interface
to an underlying string that consists of a <a href=#set-of-space-separated-tokens>set of
space-separated tokens</a>.</p>

<p class=note><a href=#domtokenlist><code>DOMTokenList</code></a> objects are always
<a href=#case-sensitive>case-sensitive</a>, even when the underlying string might
ordinarily be treated in a case-insensitive manner.</p>

<pre class=idl>interface <dfn id=domtokenlist>DOMTokenList</dfn> {
  readonly attribute unsigned long <a href=#dom-domtokenlist-length title=dom-DOMTokenList-length>length</a>;
  getter DOMString <a href=#dom-domtokenlist-item title=dom-DOMTokenList-item>item</a>(unsigned long index);
  boolean <a href=#dom-domtokenlist-contains title=dom-DOMTokenList-contains>contains</a>(DOMString token);
  void <a href=#dom-domtokenlist-add title=dom-DOMTokenList-add>add</a>(DOMString token);
  void <a href=#dom-domtokenlist-remove title=dom-DOMTokenList-remove>remove</a>(DOMString token);
  boolean <a href=#dom-domtokenlist-toggle title=dom-DOMTokenList-toggle>toggle</a>(DOMString token);
  <a href=#dom-domtokenlist-tostring title=dom-DOMTokenList-toString>stringifier</a> DOMString ();
};</pre>

<dl class=domintro>

 <dt><var>tokenlist</var> . <a href=#dom-domtokenlist-length><code title=dom-DOMTokenList-length>length</code></a></dt>
 <dd>
  <p>Returns the number of tokens in the string.</p>
 </dd>

 <dt><a href=#element><var>element</var></a> = <var>tokenlist</var> . <a href=#dom-domtokenlist-item><code title=dom-DOMTokenList-item>item</code></a>(<var>index</var>)</dt>
 <dt><var>tokenlist</var>[<var>index</var>]</dt>
 <dd>
  <p>Returns the token with index <var>index</var>. The tokens are returned in the order they are found in the underlying string.</p>
  <p>Returns null if <var>index</var> is out of range.</p>
 </dd>

 <dt><var>hastoken</var> = <var>tokenlist</var> . <a href=#dom-domtokenlist-contains><code title=dom-DOMTokenList-contains>contains</code></a>(<var>token</var>)</dt>
 <dd>
  <p>Returns true if the <var>token</var> is present; false otherwise.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var>token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var>token</var> contains any spaces.</p>
 </dd>

 <dt><var>tokenlist</var> . <a href=#dom-domtokenlist-add><code title=dom-DOMTokenList-add>add</code></a>(<var>token</var>)</dt>
 <dd>
  <p>Adds <var>token</var>, unless it is already present.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var>token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var>token</var> contains any spaces.</p>
 </dd>

 <dt><var>tokenlist</var> . <a href=#dom-domtokenlist-remove><code title=dom-DOMTokenList-remove>remove</code></a>(<var>token</var>)</dt>
 <dd>
  <p>Removes <var>token</var> if it is present.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var>token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var>token</var> contains any spaces.</p>
 </dd>

 <dt><var>hastoken</var> = <var>tokenlist</var> . <a href=#dom-domtokenlist-toggle><code title=dom-DOMTokenList-toggle>toggle</code></a>(<var>token</var>)</dt>
 <dd>
  <p>Adds <var>token</var> if it is not present, or removes
  it if it is. Returns true if <var>token</var> is now
  present (it was added); returns false if it is not (it was
  removed).</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var>token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var>token</var> contains any spaces.</p>
 </dd>

</dl>

<div class=impl>

<p>The <dfn id=dom-domtokenlist-length title=dom-DOMTokenList-length><code>length</code></dfn>
attribute must return the number of tokens that result from <a href=#split-a-string-on-spaces title="split a string on spaces">splitting the underlying string on
spaces</a>. This is the <a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a>.</p>

<p>The object's <a class=external data-anolis-spec=webidl href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property
indices</a> are the numbers in the range zero to <span title=""><a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a>&minus;1</span>, unless the <a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a> is zero, in which case there are no
<a class=external data-anolis-spec=webidl href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property indices</a>.</p>

<p>The <dfn id=dom-domtokenlist-item title=dom-DOMTokenList-item><code>item(<var title="">index</var>)</code></dfn> method must <a href=#split-a-string-on-spaces title="split a
string on spaces">split the underlying string on spaces</a>,
preserving the order of the tokens as found in the underlying
string, and then return the <var>index</var>th item in this
list. If <var>index</var> is equal to or greater than the
number of tokens, then the method must return null.</p>

<p class=example>For example, if the string is "<code title="">a b
a c</code>" then there are four tokens: the token with index 0 is
"<code title="">a</code>", the token with index 1 is "<code title="">b</code>", the token with index 2 is "<code title="">a</code>", and the token with index 3 is "<code title="">c</code>".</p>

<p>The <dfn id=dom-domtokenlist-contains title=dom-DOMTokenList-contains><code>contains(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var>token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var>token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the token indicated by <var>token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 object's underlying string then return true and stop this
 algorithm.</li>

 <li>Otherwise, return false.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-add title=dom-DOMTokenList-add><code>add(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var>token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var>token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var>token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string then stop the
 algorithm.</li>

 <li>Otherwise, if the <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying
 string is not the empty string and the last character of that
 string is not a <a href=#space-character>space character</a>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var>token</var> to the end of the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-remove title=dom-DOMTokenList-remove><code>remove(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var>token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var>token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#remove-a-token-from-a-string title="remove a token from a string">remove
 the given <var>token</var> from the underlying
 string</a>.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-toggle title=dom-DOMTokenList-toggle><code>toggle(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var>token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var>token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var>token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string then <a href=#remove-a-token-from-a-string title="remove a token from a string">remove the given <var title="">token</var> from the underlying string</a> and stop the
 algorithm, returning false.</li>

 <li>Otherwise, if the <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying
 string is not the empty string and the last character of that
 string is not a <a href=#space-character>space character</a>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var>token</var> to the end of the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string.</li>

 <li>Return true.</li>

</ol>

<p>Objects implementing the <a href=#domtokenlist><code>DOMTokenList</code></a> interface must
<dfn id=dom-domtokenlist-tostring title=dom-DOMTokenList-toString>stringify</dfn> to the object's
underlying string representation.</p>

</div>


<h3 id=interface-domsettabletokenlist><span class=secno>7.3 </span>Interface <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a></h3>

<p>The <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a> interface is the same as the
<a href=#domtokenlist><code>DOMTokenList</code></a> interface, except that it allows the
underlying string to be directly changed.</p>

<pre class=idl>interface <dfn id=domsettabletokenlist>DOMSettableTokenList</dfn> : <a href=#domtokenlist>DOMTokenList</a> {
            attribute DOMString <a href=#dom-domsettabletokenlist-value title=dom-DOMSettableTokenList-value>value</a>;
};</pre>

<dl class=domintro>

 <dt><var>tokenlist</var> . <a href=#dom-domsettabletokenlist-value><code title=dom-DOMSettableTokenList-value>value</code></a></dt>
 <dd>
  <p>Returns the underlying string.</p>
  <p>Can be set, to change the underlying string.</p>
 </dd>

</dl>

<div class=impl>

<p>An object implementing the <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a>
interface must act as defined for the <a href=#domtokenlist><code>DOMTokenList</code></a>
interface, except for the <a href=#dom-domsettabletokenlist-value><code title=dom-DOMSettableTokenList-value>value</code></a> attribute defined
here.</p>

<p>The <dfn id=dom-domsettabletokenlist-value title=dom-DOMSettableTokenList-value><code>value</code></dfn>
attribute must return the underlying string on getting, and must
replace the underlying string with the new value on setting.</p>

</div>



<h2 id=historical><span class=secno>8 </span>Historical</h2>
<p>This specification does not define the following interfaces:
<ul class=brief>
 <li><dfn id=domuserdata><code>DOMUserData</code></dfn>
 <li><dfn id=domobject><code>DOMObject</code></dfn>
 <li><dfn id=namelist><code>NameList</code></dfn>
 <li><dfn id=domimplementationlist><code>DOMImplementationList</code></dfn>
 <li><dfn id=domimplementationsource><code>DOMImplementationSource</code></dfn>
 <li><dfn id=typeinfo><code>TypeInfo</code></dfn>
 <li><dfn id=userdatahandler><code>UserDataHandler</code></dfn>
 <li><dfn id=domerror><code>DOMError</code></dfn>
 <li><dfn id=domerrorhandler><code>DOMErrorHandler</code></dfn>
 <li><dfn id=domlocator><code>DOMLocator</code></dfn>
 <li><dfn id=domconfiguration><code>DOMConfiguration</code></dfn>
 <li><dfn id=cdatasection><code>CDATASection</code></dfn>
 <li><dfn id=notation><code>Notation</code></dfn>
 <li><dfn id=entity><code>Entity</code></dfn>
 <li><dfn id=entityreference><code>EntityReference</code></dfn>
</ul>

<p>This specification does not define the following interface members:</p>
<dl>
 <dt><a href=#node><code>Node</code></a></dt>
 <dd>
  <p><dfn id=dom-node-normalize title=dom-Node-normalize><code>normalize()</code></dfn>
  <p><dfn id=dom-node-getfeature title=dom-Node-getFeature><code>getFeature()</code></dfn>
  <p><dfn id=dom-node-getuserdata title=dom-Node-getUserData><code>getUserData()</code></dfn>
  <p><dfn id=dom-node-setuserdata title=dom-Node-setUserData><code>setUserData()</code></dfn>

 <dt><a href=#document><code>Document</code></a></dt>
 <dd>
  <p><dfn id=dom-document-createcdatasection title=dom-Document-createCDATASection><code>createCDATASection()</code></dfn>
  <p><dfn id=dom-document-createattribute title=dom-Document-createAttribute><code>createAttribute()</code></dfn>
  <p><dfn id=dom-document-createattributens title=dom-Document-createAttributeNS><code>createAttributeNS()</code></dfn>
  <p><dfn id=dom-document-xmlencoding title=dom-Document-xmlEncoding><code>xmlEncoding</code></dfn>
  <p><dfn id=dom-document-xmlstandalone title=dom-Document-xmlStandalone><code>xmlStandalone</code></dfn>
  <p><dfn id=dom-document-xmlversion title=dom-Document-xmlVersion><code>xmlVersion</code></dfn>
  <p><dfn id=dom-document-stricterrorchecking title=dom-Document-strictErrorChecking><code>strictErrorChecking</code></dfn>
  <p><dfn id=dom-document-domconfig title=dom-Document-domConfig><code>domConfig</code></dfn>
  <p><dfn id=dom-document-normalizedocument title=dom-Document-normalizeDocument><code>normalizeDocument()</code></dfn>
  <p><dfn id=dom-document-renamenode title=dom-Document-renameNode><code>renameNode()</code></dfn>

 <dt><a href=#domimplementation><code>DOMImplementation</code></a>
 <dd>
  <p><dfn id=dom-domimplementation-getfeature title=dom-DOMImplementation-getFeature><code>getFeature()</code></dfn>

 <dt><a href=#attr><code>Attr</code></a>
 <dd>
  <p><dfn id=dom-attr-schematypeinfo title=dom-Attr-schemaTypeInfo><code>schemaTypeInfo</code></dfn>
  <p><dfn id=dom-attr-isid title=dom-Attr-isId><code>isId</code></dfn>

 <dt><a href=#element><code>Element</code></a>
 <dd>
  <p><dfn id=dom-element-getattributenode title=dom-Element-getAttributeNode><code>getAttributeNode()</code></dfn>
  <p><dfn id=dom-element-getattributenodens title=dom-Element-getAttributeNodeNS><code>getAttributeNodeNS()</code></dfn>
  <p><dfn id=dom-element-setattributenode title=dom-Element-setAttributeNode><code>setAttributeNode()</code></dfn>
  <p><dfn id=dom-element-removeattributenode title=dom-Element-removeAttributeNode><code>removeAttributeNode()</code></dfn>
  <p><dfn id=dom-element-schematypeinfo title=dom-Element-schemaTypeInfo><code>schemaTypeInfo</code></dfn>
  <p><dfn id=dom-element-setidattribute title=dom-Element-setIdAttribute><code>setIdAttribute()</code></dfn>
  <p><dfn id=dom-element-setidattributens title=dom-Element-setIdAttributeNS><code>setIdAttributeNS()</code></dfn>
  <p><dfn id=dom-element-setidattributenode title=dom-Element-setIdAttributeNode><code>setIdAttributeNode()</code></dfn>

 <dt><a href=#documenttype><code>DocumentType</code></a>
 <dd>
  <p><dfn id=dom-documenttype-entities title=dom-DocumentType-entities><code>entities</code></dfn>
  <p><dfn id=dom-documenttype-notations title=dom-DocumentType-notations><code>notations</code></dfn>
  <p><dfn id=dom-documenttype-internalsubset title=dom-DocumentType-internalSubset><code>internalSubset</code></dfn>

 <dt><a href=#text><code>Text</code></a>
 <dd>
  <p><dfn id=dom-text-iselementcontentwhitespace title=dom-Text-isElementContentWhitespace><code>isElementContentWhitespace</code></dfn>
</dl>



<h2 class=no-num id=references>References</h2><!--REFS-->
<p>All references are normative unless marked "Non-normative".</p>

<!-- Dates are only included for standards older than the Web,
because the newer ones keep changing. -->

<div id=anolis-references><dl><dt id=refsHTML>[HTML]
<dd>(Non-normative) <cite><a href=http://www.whatwg.org/specs/web-apps/current-work/multipage>HTML</a></cite>, I. Hickson. WHATWG.
<dt id=refsMATHML>[MATHML]
<dd>(Non-normative) <cite><a href=http://www.w3.org/TR/MathML/>Mathematical Markup Language (MathML)</a></cite>, D. Carlisle, P. Ion, R. Miner, N. Poppelier. W3C.
<dt id=refsRFC2119>[RFC2119]
<dd><cite><a href=http://www.ietf.org/rfc/rfc2119.txt>Key words for use in RFCs to Indicate Requirement Levels</a></cite>, S. Bradner. IETF.
<dt id=refsSVG>[SVG]
<dd>(Non-normative) <cite><a href=http://www.w3.org/TR/SVG/>Scalable Vector Graphics (SVG)</a></cite>, O. Andersson, R. Berjon, E. Dahlstr&ouml;m, A. Emmons, J. Ferraiolo, A. Grasso, V. Hardy, S. Hayman, D. Jackson, C. Lilley, C. McCormack, A. Neumann, C. Northway, A. Quint, N. Ramani, D. Schepers, A. Shellshear. W3C.
<dt id=refsWEBIDL>[WEBIDL]
<dd><cite><a href=http://dev.w3.org/2006/webapi/WebIDL/>Web IDL</a></cite>, C. McCormack, S. Weinig. W3C.
<dt id=refsXML>[XML]
<dd><cite><a href=http://www.w3.org/TR/xml/>Extensible Markup Language</a></cite>, T. Bray, J. Paoli, C. Sperberg-McQueen, E. Maler, F. Yergeau. W3C.
<dt id=refsXMLNS>[XMLNS]
<dd><cite><a href=http://www.w3.org/TR/xml-names/>Namespaces in XML</a></cite>, T. Bray, D. Hollander, A. Layman, R. Tobin. W3C.
</dl></div>



<h2 class=no-num id=acknowledgements>Acknowledgements</h2>
<p>Thanks to

Anne van Kesteren,
Dethe Elza,
and
Henri Sivonen,

for their useful comments.

<p>Special thanks to Ian Hickson for first specifying some parts of this
specification in HTML. <a class=informative data-anolis-ref="" href=#refsHTML>[HTML]</a>


<script src=http://www.whatwg.org/specs/web-apps/current-work/dfn.js></script>
