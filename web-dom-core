<!DOCTYPE html><title>Web DOM Core</title>
<link href=http://www.whatwg.org/style/specification rel=stylesheet>
<style>
 pre, code { font-family:monospace, sans-serif; }
 h2 code, h3 code, h4 code { font:inherit; color:inherit; font-style:italic }
</style>
<body class=draft>
<div class=head>
<h1>Web DOM Core</h1>
<h2 class="no-num no-toc" id=work-in-progress-&mdash;-last-update-date:-01-jan-1901>Work in Progress &mdash; Last Update 21 February 2010</h2>
<dl>
 <dt>Editors
 <dd>Simon Pieters &lt;simonp@opera.com&gt;
 <dd>Geoffrey Sneddon &lt;gsneddon@opera.com&gt;
 <dd>Ms2ger &lt;ms2ger@gmail.com&gt;
</dl>
</div>


<h2 class="no-num no-toc" id=issues>Issues</h2>

<ul class=XXX>
 <li>define moving nodes between documents <a href="http://html5.org/tools/web-apps-tracker?from=1729&amp;to=1730">http://html5.org/tools/web-apps-tracker?from=1729&amp;to=1730</a> <a href=http://www.w3.org/mid/Pine.LNX.4.62.0806020441160.504@hixie.dreamhostps.com>http://www.w3.org/mid/Pine.LNX.4.62.0806020441160.504@hixie.dreamhostps.com</a> <a href=http://www.w3.org/mid/3292C233-9089-4733-9226-15ED8DCA23FE@apple.com>http://www.w3.org/mid/3292C233-9089-4733-9226-15ED8DCA23FE@apple.com</a>
 <li>getAttributeNS returning null
 <li>createElement()
 <li>innerHTML etc on all Elements? <a href=http://osdir.com/ml/org.w3c.webapi/2007-08/msg00069.html>http://osdir.com/ml/org.w3c.webapi/2007-08/msg00069.html</a>
 <li>\0 <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312>http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312</a>
 <li>clarify lookupNamespaceURI <a href=http://www.w3.org/mid/4878DFC6.40401@lachy.id.au>http://www.w3.org/mid/4878DFC6.40401@lachy.id.au</a>
 <li>document.parseError? <a href=http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com>http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com</a>
 <li>exceptions for createDocument <a href=http://osdir.com/ml/web.dom.general/2005-12/msg00058.html>http://osdir.com/ml/web.dom.general/2005-12/msg00058.html</a>
 <li>sourceIndex? <a href=http://www.quirksmode.org/dom/w3c_core.html>http://www.quirksmode.org/dom/w3c_core.html</a>
 <li>xmlVersion <a href=http://lists.w3.org/Archives/Public/www-dom/2003JulSep/0049.html>http://lists.w3.org/Archives/Public/www-dom/2003JulSep/0049.html</a>
 <li>textContent <a href=http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com>http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com</a>
 <li>lookupNamespaceURI, isDefaultNamespace <a href="http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126">http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126</a>
 <li>Range.createContextualFragment <a href=http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html>http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html</a>
 <li>attributes.length should always return the length.
 <li>[Reflect] <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90>http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90</a>
</ul>


<h2 class="no-num no-toc" id=abstract>Abstract</h2>

<p>This specification defines the DOM Core part of the Web platform. The Document Object Model is a language- and platform neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. Web DOM Core mostly subsets DOM3 Core, but redefines some things and adds some features that were widely implemented already.

<h2 class="no-num no-toc" id=table-of-contents>Table of contents</h2>


<!--begin-toc-->
<ol class=toc>
 <li><a href=#common-infrastructure><span class=secno>1 </span>Common infrastructure</a>
  <ol>
   <li><a href=#terminology><span class=secno>1.1 </span>Terminology</a></li>
   <li><a href=#conformance-requirements><span class=secno>1.2 </span>Conformance requirements</a></li>
   <li><a href=#case-sensitivity><span class=secno>1.3 </span>Case-sensitivity</a></li>
   <li><a href=#dom-features><span class=secno>1.4 </span>DOM features</a></li>
   <li><a href=#cloning-nodes><span class=secno>1.5 </span>Cloning nodes</a></li>
   <li><a href=#legal-hierarchy><span class=secno>1.6 </span>Legal hierarchy</a></ol></li>
 <li><a href=#basic-types><span class=secno>2 </span>Basic types</a></li>
 <li><a href=#interfaces><span class=secno>3 </span>Interfaces</a>
  <ol>
   <li><a href=#exception-domexception><span class=secno>3.1 </span>Exception <code title="">DOMException</code></a></li>
   <li><a href=#interface-domimplementation><span class=secno>3.2 </span>Interface <code title="">DOMImplementation</code></a></li>
   <li><a href=#interface-documentfragment><span class=secno>3.3 </span>Interface <code title="">DocumentFragment</code></a></li>
   <li><a href=#interface-document><span class=secno>3.4 </span>Interface <code title="">Document</code></a></li>
   <li><a href=#interface-node><span class=secno>3.5 </span>Interface <code title="">Node</code></a></li>
   <li><a href=#interface-nodelist><span class=secno>3.6 </span>Interface <code title="">NodeList</code></a></li>
   <li><a href=#interface-namednodemap><span class=secno>3.7 </span>Interface <code title="">NamedNodeMap</code></a></li>
   <li><a href=#interface-characterdata><span class=secno>3.8 </span>Interface <code title="">CharacterData</code></a></li>
   <li><a href=#interface-attr><span class=secno>3.9 </span>Interface <code title="">Attr</code></a></li>
   <li><a href=#interface-element><span class=secno>3.10 </span>Interface <code title="">Element</code></a></li>
   <li><a href=#interface-text><span class=secno>3.11 </span>Interface <code title="">Text</code></a></li>
   <li><a href=#interface-comment><span class=secno>3.12 </span>Interface <code title="">Comment</code></a></li>
   <li><a href=#interface-documenttype><span class=secno>3.13 </span>Interface <code title="">DocumentType</code></a></li>
   <li><a href=#interface-processinginstruction><span class=secno>3.14 </span>Interface <code title="">ProcessingInstruction</code></a></ol></li>
 <li><a class=no-num href=#references>References</a></li>
 <li><a class=no-num href=#acknowledgements>Acknowledgements</a></ol>
<!--end-toc-->


<h2 id=common-infrastructure><span class=secno>1 </span>Common infrastructure</h2>


<h3 id=terminology><span class=secno>1.1 </span>Terminology</h3>

<p>The term <dfn id=tree-order>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved (through the <code title=dom-Node-parentNode><a href=#dom-node-parentnode>parentNode</a></code>/<code title=dom-Node-childNodes><a href=#dom-node-childnodes>childNodes</a></code> relationship).

<p>The term <dfn id=context-node>context node</dfn> means the <code><a href=#node>Node</a></code> on which the method or attribute being discussed was called.

<p>The term <dfn id=root-element>root element</dfn>, when not explicitly qualified
as referring to the document's root element, means the furthest
ancestor element node of whatever node is being discussed, or the
node itself if it has no ancestors. When the node is a part of the
document, then the node's <a href=#root-element>root element</a> is indeed the
document's root element; however, if the node is not currently part
of the document tree, the root element will be an orphaned node.</p>

<p>When an element's <a href=#root-element>root element</a> is the root element
of a <code><a href=#document>Document</a></code>, it is said to be <dfn id=in-a-document>in a
<code>Document</code></dfn>.

<p>A node's <dfn id=home-subtree>home subtree</dfn> is the subtree rooted at that
node's <a href=#root-element>root element</a>. When a node is <a href=#in-a-document>in a
<code>Document</code></a>, its <a href=#home-subtree>home subtree</a> is that
<code><a href=#document>Document</a></code>'s tree.

<p>The <dfn id=space-character title="space character">space characters</dfn>, for the
purposes of this specification, are U+0020 SPACE, U+0009 CHARACTER
TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and
U+000D CARRIAGE RETURN (CR).</p>

<h3 id=conformance-requirements><span class=secno>1.2 </span>Conformance requirements</h3>

<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.</p>

<p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in the normative parts of this document are to be
interpreted as described in RFC2119. For readability, these words do
not appear in all uppercase letters in this specification. <a href=#refsRFC2119>[RFC2119]</a></p>

<p>Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
abort these steps") are to be interpreted with the meaning of the
key word ("must", "should", "may", etc) used in introducing the
algorithm.</p>

<p>Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)</p>

<p id=hardwareLimitations>User agents may impose
implementation-specific limits on otherwise unconstrained inputs,
e.g. to prevent denial of service attacks, to guard against running
out of memory, or to work around platform-specific limitations.</p>

<p>The IDL fragments in this specification must be interpreted as
required for conforming IDL fragments, as described in the Web IDL
specification. <a href=#refsWEBIDL>[WEBIDL]</a></p>

<p id=float-nan>Except where otherwise specified, if an IDL
attribute that is a floating point number type (<code title="">float</code>) is assigned an Infinity or Not-a-Number
(NaN) value, a <code>NOT_SUPPORTED_ERR</code> exception must be
raised.</p>

<p>Except where otherwise specified, if a method with an argument
that is a floating point number type (<code title="">float</code>)
is passed an Infinity or Not-a-Number (NaN) value, a
<code>NOT_SUPPORTED_ERR</code> exception must be raised.</p>

<p class=XXX>HTML5.

<p>When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

<p>Unless otherwise stated, string comparisons are done in a <a href=#case-sensitive>case-sensitive</a> manner.


<h3 id=case-sensitivity><span class=secno>1.3 </span>Case-sensitivity</h3>

<p>This specification defines several comparison operators for strings. 
<p>Comparing two strings in a <dfn id=case-sensitive>case-sensitive</dfn> manner means comparing them exactly, codepoint for codepoint. 
<p>Comparing two strings in a <dfn id=ascii-case-insensitive>ASCII case-insensitive</dfn> manner means comparing them exactly, codepoint for codepoint, except that the characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match. 
<p><dfn id=converted-to-uppercase title="converted to uppercase">Converting a string to uppercase</dfn> means replacing all characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z). 
<p><dfn id=converted-to-lowercase title="converted to lowercase">Converting a string to lowercase</dfn> means replacing all characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).


<h3 id=dom-features><span class=secno>1.4 </span>DOM features</h3>

<p class=XXX>Features are ASCII case-insensitive. Empty string means any version.

<p class=XXX>Suggest how specs are to define feature strings.


<h3 id=cloning-nodes><span class=secno>1.5 </span>Cloning nodes</h3>

<p>When a UA is to <dfn id=clone>clone</dfn> a <var title="">node</var>, with a <var title="">new ownerDocument</var> and with a <var title="">clone children</var> flag, it must run the following steps:

<ol>
 <li><p>If <var title="">node</var> is a <code><a href=#documenttype>DocumentType</a></code> node, raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR><a href=#dom-domexception-not_supported_err>NOT_SUPPORTED_ERR</a></code> exception and abort these steps.
 <li>
  <p>Let <var title="">copy</var> be a new <code><a href=#node>Node</a></code> that implements the same interfaces as <var title="">node</var>, with <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to <var title="">new ownerDocument</var>, <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code>, <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> and <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code> attributes set to the values of the attributes on <var title="">node</var> with the same names, and other attributes set to the values of the attributes on <var title="">node</var> with the same names depending on the type of <var title="">node</var> according to the following table:</p>
  <table>
   <thead>
    <tr><th>Type of <var title="">node</var><th>Attributes
   <tbody>
    <tr><td><code><a href=#element>Element</a></code><td>&mdash;
    <tr><td><code><a href=#attr>Attr</a></code><td><code title=dom-Attr-value>value</code>
    <tr><td><code><a href=#text>Text</a></code><td><code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code>
    <tr><td><code><a href=#processinginstruction>ProcessingInstruction</a></code><td><code title=dom-ProcessingInstruction-target>target</code>, <code title=dom-ProcessingInstruction-data>data</code>
    <tr><td><code><a href=#comment>Comment</a></code><td><code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code>
    <tr><td><code><a href=#documentfragment>DocumentFragment</a></code><td>&mdash;
  </table>
 <li><p>If <var title="">node</var> is an <code><a href=#element>Element</a></code> node, <span class=XXX>copy its attributes</span>.
 <li><p>If the <var title="">clone children</var> flag is set, <a href=#clone>clone</a> all the children of <var title="">node</var> and append them to <var title="">copy</var>, with the same <var title="">new ownerDocument</var> and the <var title="">clone children</var> flag being set.
 <li><p>Return <var title="">copy</var>.
</ol>


<h3 id=legal-hierarchy><span class=secno>1.6 </span>Legal hierarchy</h3>

<p>A <code><a href=#node>Node</a></code> is said to have a <dfn id=legal-hierarchy-0>legal hierarchy</dfn> if all the following conditions are true:

<ul>
 <li><p>The <code><a href=#node>Node</a></code> is a <code><a href=#document>Document</a></code> node or an <code><a href=#attr>Attr</a></code> node and has no parent node.
 <li><p>The <code><a href=#node>Node</a></code> is a <code><a href=#document>Document</a></code> node and has no child <code><a href=#text>Text</a></code> nodes.
 <li><p>The <code><a href=#node>Node</a></code> is a <code><a href=#document>Document</a></code> node and has no more than one child <code><a href=#element>Element</a></code> node.
 <li><p>The <code><a href=#node>Node</a></code> is an <code><a href=#attr>Attr</a></code> node, a <code><a href=#text>Text</a></code> node, a <code><a href=#processinginstruction>ProcessingInstruction</a></code> node, a <code><a href=#comment>Comment</a></code> node, or a <code><a href=#documenttype>DocumentType</a></code> node, and has no child nodes.
</ul>

<p>Before running the steps of an algorithm of a method or attribute in this specification, the user agent must check that running the algorithm will result in a <a href=#legal-hierarchy-0>legal hierarchy</a>. If it won't, then the user agent must instead raise a <code title=dom-DOMException-HIERARCHY_REQUEST_ERR><a href=#dom-domexception-hierarchy_request_err>HIERARCHY_REQUEST_ERR</a></code> exception.


<h2 id=basic-types><span class=secno>2 </span>Basic types</h2>

<!-- DOMString is defined in WebIDL -->

<p>A <dfn id=domtimestamp>DOMTimeStamp</dfn> represents a number of milliseconds.
<pre class=idl>typedef unsigned long long DOMTimeStamp;</pre>

<!-- DOMUserData dropped -->
<!-- DOMObject dropped -->


<h2 id=interfaces><span class=secno>3 </span>Interfaces</h2>


<h3 id=exception-domexception><span class=secno>3.1 </span>Exception <code title="">DOMException</code></h3>

<pre class=idl>exception <dfn id=domexception>DOMException</dfn> {
  const unsigned short <a href=#dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</a> = 1;
  const unsigned short <a href=#dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR>DOMSTRING_SIZE_ERR</a> = 2;
  const unsigned short <a href=#dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</a> = 3;
  const unsigned short <a href=#dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</a> = 4;
  const unsigned short <a href=#dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</a> = 5;
  const unsigned short <a href=#dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR>NO_DATA_ALLOWED_ERR</a> = 6;
  const unsigned short <a href=#dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR>NO_MODIFICATION_ALLOWED_ERR</a> = 7;
  const unsigned short <a href=#dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</a> = 8;
  const unsigned short <a href=#dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</a> = 9;
  const unsigned short <a href=#dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR>INUSE_ATTRIBUTE_ERR</a> = 10;
  const unsigned short <a href=#dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</a> = 11;
  const unsigned short <a href=#dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</a> = 12;
  const unsigned short <a href=#dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR>INVALID_MODIFICATION_ERR</a> = 13;
  const unsigned short <a href=#dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</a> = 14;
  const unsigned short <a href=#dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR>INVALID_ACCESS_ERR</a> = 15;
  const unsigned short <a href=#dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR>VALIDATION_ERR</a> = 16;
  const unsigned short <a href=#dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR>TYPE_MISMATCH_ERR</a> = 17;
  const unsigned short <a href=#dom-domexception-security_err title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</a> = 18;
  const unsigned short <a href=#dom-domexception-network_err title=dom-DOMException-NETWORK_ERR>NETWORK_ERR</a> = 19;
  const unsigned short <a href=#dom-domexception-abort_err title=dom-DOMException-ABORT_ERR>ABORT_ERR</a> = 20;
  const unsigned short <a href=#dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR>URL_MISMATCH_ERR</a> = 21;
  const unsigned short <a href=#dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR>QUOTA_EXCEEDED_ERR</a> = 22;
  const unsigned short <a href=#dom-domexception-parse_err title=dom-DOMException-PARSE_ERR>PARSE_ERR</a> = 81;
  const unsigned short <a href=#dom-domexception-serialize_err title=dom-DOMException-SERIALIZE_ERR>SERIALIZE_ERR</a> = 82;
  unsigned short <a href=#dom-domexception-code title=dom-DOMException-code>code</a>;
  DOMString <a href=#dom-domexception-message title=dom-DOMException-message>message</a>;
  DOMString <a href=#dom-domexception-name title=dom-DOMException-name>name</a>;
};</pre>

<p>The <dfn id=dom-domexception-code title=dom-DOMException-code><code>code</code></dfn> exception member
must return the code for the exception, which must be one of the following:

<ol class=brief>
 <li value=1><dfn id=dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR><code>INDEX_SIZE_ERR</code></dfn></li>
 <li value=2><dfn id=dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR><code>DOMSTRING_SIZE_ERR</code></dfn></li>
 <li value=3><dfn id=dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR><code>HIERARCHY_REQUEST_ERR</code></dfn></li>
 <li value=4><dfn id=dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR><code>WRONG_DOCUMENT_ERR</code></dfn></li>
 <li value=5><dfn id=dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR><code>INVALID_CHARACTER_ERR</code></dfn></li>
 <li value=6><dfn id=dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR><code>NO_DATA_ALLOWED_ERR</code></dfn></li>
 <li value=7><dfn id=dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR><code>NO_MODIFICATION_ALLOWED_ERR</code></dfn></li>
 <li value=8><dfn id=dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR><code>NOT_FOUND_ERR</code></dfn></li>
 <li value=9><dfn id=dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR><code>NOT_SUPPORTED_ERR</code></dfn></li>
 <li value=10><dfn id=dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR><code>INUSE_ATTRIBUTE_ERR</code></dfn></li>
 <li value=11><dfn id=dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR><code>INVALID_STATE_ERR</code></dfn></li>
 <li value=12><dfn id=dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR><code>SYNTAX_ERR</code></dfn></li>
 <li value=13><dfn id=dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR><code>INVALID_MODIFICATION_ERR</code></dfn></li>
 <li value=14><dfn id=dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR><code>NAMESPACE_ERR</code></dfn></li>
 <li value=15><dfn id=dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR><code>INVALID_ACCESS_ERR</code></dfn></li>
 <li value=16><dfn id=dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR><code>VALIDATION_ERR</code></dfn></li>
 <li value=17><dfn id=dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR><code>TYPE_MISMATCH_ERR</code></dfn></li>
 <li value=18><dfn id=dom-domexception-security_err title=dom-DOMException-SECURITY_ERR><code>SECURITY_ERR</code></dfn></li>
 <li value=19><dfn id=dom-domexception-network_err title=dom-DOMException-NETWORK_ERR><code>NETWORK_ERR</code></dfn></li>
 <li value=20><dfn id=dom-domexception-abort_err title=dom-DOMException-ABORT_ERR><code>ABORT_ERR</code></dfn></li>
 <li value=21><dfn id=dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR><code>URL_MISMATCH_ERR</code></dfn></li>
 <li value=22><dfn id=dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR><code>QUOTA_EXCEEDED_ERR</code></dfn></li>
 <li value=81><dfn id=dom-domexception-parse_err title=dom-DOMException-PARSE_ERR><code>PARSE_ERR</code></dfn></li>
 <li value=82><dfn id=dom-domexception-serialize_err title=dom-DOMException-SERIALIZE_ERR><code>SERIALIZE_ERR</code></dfn></li>
</ol>

<dl class=XXX><dt>...<dd>...</dl>

<p>The <dfn id=dom-domexception-message title=dom-DOMException-message><code>message</code></dfn> exception
member must return a User Agent-defined human readable string describing the
exception.

<p>The <dfn id=dom-domexception-name title=dom-DOMException-name><code>name</code></dfn> exception member
must return the name of the exception constant as a string.</p>

<!-- DOMStringList dropped -->
<!-- NameList dropped -->
<!-- DOMImplementationList dropped -->
<!-- DOMImplementationSource dropped -->


<h3 id=interface-domimplementation><span class=secno>3.2 </span>Interface <code title="">DOMImplementation</code></h3>

<p>User agents must create a new <code><a href=#domimplementation>DOMImplementation</a></code> object whenever a new <code><a href=#document>Document</a></code> node is created and associate it with the that <code><a href=#document>Document</a></code> node.

<pre class=idl>interface <dfn id=domimplementation>DOMImplementation</dfn> {
  boolean <a href=#dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature>hasFeature</a>(in DOMString feature, [TreatNullAs=EmptyString] in DOMString version);
  DocumentType <a href=#dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType>createDocumentType</a>([TreatNullAs=EmptyString] in DOMString qualifiedName, in DOMString publicId, in DOMString systemId);
  Document <a href=#dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument>createDocument</a>([TreatNullAs=EmptyString] in DOMString namespaceURI, [TreatNullAs=EmptyString] in DOMString qualifiedName, in DocumentType doctype);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);-->
};</pre>

<p>The <dfn id=dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature><code>hasFeature(<var title="">feature</var>, <var title="">version</var>)</code></dfn> method must return true if the UA supports the given feature <var title="">feature</var> of version <var title="">version</var>, and false otherwise.

<p>The <dfn id=dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType><code>createDocumentType(<var title="">qualifiedName</var>, <var title="">publicId</var>, <var title="">systemId</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <code title="">Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR><a href=#dom-domexception-invalid_character_err>INVALID_CHARACTER_ERR</a></code>
 exception and abort these steps. <a href=#refsXML>[XML]</a>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <code title="">NCName</code> production in Namespaces in XML, raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort
 these steps. <a href=#refsXMLNS>[XMLNS]</a>
 <!--<li><p>If <var title>publicId</var> contains a character that doesn't match the <code title>PubidChar</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. <a href=#refsXML>[XML]</a>--> <!-- DOM3 didn't check this -->
 <!--<li><p>If <var title>systemId</var> contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE ("'") character, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <code><a href=#documenttype>DocumentType</a></code> node with <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to null, <code title=dom-DocumentType-name>name</code> set to <var title="">qualifiedName</var>, <code title=dom-DocumentType-publicId>publicId</code> set to <var title="">publicId</var>, and <code title=dom-DocumentType-systemId>systemId</code> set to <var title="">systemId</var>.
</ol>
<p class=note>No check is performed that the <var title="">publicId</var> matches the <code title="">PublicChar</code> production in XML or that the <var title="">systemId</var> doesn't contain both a quotation mark (") and an apostrophe (').

<p>The <dfn id=dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument><code>createDocument(<var title="">namespaceURI</var>, <var title="">qualifiedName</var>, <var title="">doctype</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>Let <var title="">document</var> be a new <code><a href=#document>Document</a></code> node.
 <li><p>Let <var title="">element</var> be null.
 <li><p>If <var title="">qualifiedName</var> is not the empty string, set <var title="">element</var> to the result of invoking the <code title=dom-Document-createElementNS><a href=#dom-document-createelementns>createElementNS</a></code> method with the arguments <var title="">namespaceURI</var> and <var title="">qualifiedName</var> on <var title="">document</var>. If that raised an exception, re-raise the same exception and abort these steps.
 <li>
  <p>If <var title="">doctype</var> is not null, run the following substeps:
  <ol>
   <li><p>If the <var title="">doctype</var>'s <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> is not null, raise a <code title=dom-DOMException-WRONG_DOCUMENT_ERR><a href=#dom-domexception-wrong_document_err>WRONG_DOCUMENT_ERR</a></code> exception and abort the overall set of steps.
   <li><p>Set the <var title="">doctype</var>'s <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> to <var title="">document</var>.
   <li><p>Append <var title="">doctype</var> to <var title="">document</var>.
  </ol>
 <li><p>If <var title="">element</var> is not null, append <var title="">element</var> to <var title="">document</var>.
 <li><p>Return <var title="">document</var>.
</ol>


<h3 id=interface-documentfragment><span class=secno>3.3 </span>Interface <code title="">DocumentFragment</code></h3>

<pre class=idl>interface <dfn id=documentfragment>DocumentFragment</dfn> : <a href=#node>Node</a> {
};</pre>


<h3 id=interface-document><span class=secno>3.4 </span>Interface <code title="">Document</code></h3>

<pre class=idl>interface <dfn id=document>Document</dfn> : <a href=#node>Node</a> {
  readonly attribute <a href=#documenttype>DocumentType</a> <a href=#dom-document-doctype title=dom-Document-doctype>doctype</a>;
  readonly attribute <a href=#domimplementation>DOMImplementation</a> <a href=#dom-document-implementation title=dom-Document-implementation>implementation</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-document-documentelement title=dom-Document-documentElement>documentElement</a>;
  <a href=#element>Element</a> <a href=#dom-document-createelement title=dom-Document-createElement>createElement</a>(in DOMString tagName);
  <a href=#documentfragment>DocumentFragment</a> createDocumentFragment();
  <a href=#text>Text</a> <a href=#dom-document-createtextnode title=dom-Document-createTextNode>createTextNode</a>(in DOMString data);
  <a href=#comment>Comment</a> <a href=#dom-document-createcomment title=dom-Document-createComment>createComment</a>(in DOMString data);<!--
  CDATASection createCDATASection(in DOMString data);-->
  <a href=#processinginstruction>ProcessingInstruction</a> <a href=#dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction>createProcessingInstruction</a>(in DOMString target, in DOMString data);<!--
  <span>Attr</span> <span title=dom-Document-createAttribute>createAttribute</span>(in DOMString name);
  EntityReference createEntityReference(in DOMString name);-->
  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagname title=dom-Document-getElementsByTagName>getElementsByTagName</a>(in DOMString tagname);
  <a href=#node>Node</a> <a href=#dom-document-importnode title=dom-Document-importNode>importNode</a>(in <a href=#node>Node</a> importedNode, in boolean deep);
  <a href=#element>Element</a> <a href=#dom-document-createelementns title=dom-Document-createElementNS>createElementNS</a>(in DOMString namespaceURI, in DOMString qualifiedName);<!--
  <span>Attr</span> <span title=dom-Document-createAttributeNS>createAttributeNS</span>(in DOMString namespaceURI, in DOMString qualifiedName);-->
  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS>getElementsByTagNameNS</a>(in DOMString namespaceURI, in DOMString localName);
  <a href=#element>Element</a> <a href=#dom-document-getelementbyid title=dom-Document-getElementById>getElementById</a>(in DOMString elementId);
  readonly attribute DOMString <span title=dom-Document-inputEncoding>inputEncoding</span>;<!--
  readonly attribute DOMString xmlEncoding;
           attribute boolean xmlStandalone;
           attribute DOMString xmlVersion;
           attribute boolean strictErrorChecking;-->
           attribute DOMString <span title=dom-Document-documentURI>documentURI</span>;
  <a href=#node>Node</a> <a href=#dom-document-adoptnode title=dom-Document-adoptNode>adoptNode</a>(in <a href=#node>Node</a> source);<!--
  readonly attribute DOMConfiguration domConfig;
  void normalizeDocument();
  Node renameNode(in Node n, in DOMString namespaceURI, in DOMString qualifiedName);-->
};</pre>

<p>The <dfn id=dom-document-doctype title=dom-Document-doctype><code>doctype</code></dfn> attribute must return the first child of the <code><a href=#document>Document</a></code> node that is a <code><a href=#documenttype>DocumentType</a></code> node, if there is one, or null otherwise.
<p class=note>In both HTML and XML there will only ever be one <code><a href=#documenttype>DocumentType</a></code> node descendant of the <code><a href=#document>Document</a></code> node. <a href=#refsHTML>[HTML]</a> <a href=#refsXML>[XML]</a>

<p>The <dfn id=dom-document-implementation title=dom-Document-implementation><code>implementation</code></dfn> attribute must return the <code><a href=#domimplementation>DOMImplementation</a></code> object that is associated with the <code><a href=#document>Document</a></code> node.

<p>The <dfn id=dom-document-documentelement title=dom-Document-documentElement><code>documentElement</code></dfn> attribute must return the first child of the <code><a href=#document>Document</a></code> node that is an <code><a href=#element>Element</a></code> node, if there is one, or null otherwise.

<p>The <dfn id=dom-document-createelement title=dom-Document-createElement><code>createElement(<var title="">tagName</var>)</code></dfn> method must run the following steps:</p>
<!-- ie allows createElement("<div class='test'>") and firefox in quirks mode allows createElement("<div>") -->
<!--
<zcorpan> i don't like dom's error checking at all
<zcorpan> it checks for some things but not others and the things it checks sometimes don't match what xml requires anyway
<zcorpan> and you can smuggle in stuff from other documents without checking anyway
<zcorpan> the questions are
<zcorpan> is there a reason why we can't drop all error checking
<zcorpan> and
<zcorpan> if we do, do we need to make createElement('<div>') or createElement('<div foo="bar">') do something magic
<hsivonen> zcorpan: does IE implement full attribute tokenization for those?
<zcorpan> hsivonen: afaict yeah
<zcorpan> hsivonen: though i haven't tested much
<zcorpan> document.createElement('<x y z=a x x y u>'); works as you'd expect
<Philip`> Seems to trigger iff the first character is '<'
<hsivonen> what if the string tokenizes to multiple tags?
<hsivonen> what if it tokenizes to and end tag?
<hsivonen> what about "<>"?
<annevk> I'd rather throw an error if the first char is "<" than implementing some small start tag tokenizer just for createElement
<hsivonen> or something else that doesn't tokenize to a start tag
<Philip`> It ignores everything after the first '>'
<hsivonen> annevk: presumably, one could reuse the real tokenizer
<Philip`> It seems to throw an error if it starts with '</'
<Philip`> (but if e.g. it starts with '<!' then it'll just make an element whose name starts with '!')
<Philip`>	Out of n pages for an unknown value of n, I see one that does document.createElement('<iframe frameborder="0">')
<Philip`>	(http://www.movingideas.org/content/en/issue_items/education.htm)
<Philip`>	(n = tens of thousands, I think)
-->
<!-- As far as I can tell, this isn't needed for web compatibility. Neither WebKit nor Opera support it, and Firefox's implementation still throws on the majority of cases in the wild, as almost all cases in the wild take advantage of the fact that IE allows attributes. -->
<ol>
 <li><p>If <var title="">tagName</var> doesn't match the <code title="">Name</code>
 production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR><a href=#dom-domexception-invalid_character_err>INVALID_CHARACTER_ERR</a></code>
 exception and abort these steps. <a href=#refsXML>[XML]</a>
 <li><p>Return a new <code><a href=#element>Element</a></code> node with no attributes, <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code> set to "<code title="">http://www.w3.org/1999/xhtml</code>", <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code> set to null, <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> set to <var title="">tagName</var>, <a href=#converted-to-lowercase>converted to lowercase</a>, and <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.
</ol>
<!-- this is very different from DOM3 -->
<p class=note>No check is performed that the local name will match the <code title="">NCName</code> production in Namespaces in XML. <a href=#refsXMLNS>[XMLNS]</a>

<p>The <dfn id=dom-document-createdocumentfragment title=dom-Document-createDocumentFragment><code>createDocumentFragment()</code></dfn> method must return a new <code><a href=#documentfragment>DocumentFragment</a></code> node with its <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.

<p>The <dfn id=dom-document-createtextnode title=dom-Document-createTextNode><code>createTextNode(<var title="">data</var>)</code></dfn> method must return a new <code><a href=#text>Text</a></code> node with its <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code> attribute set to <var title="">data</var> and <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the text node contains characters that
match the <code title="">Char</code> production in XML. <a href=#refsXML>[XML]</a>

<p>The <dfn id=dom-document-createcomment title=dom-Document-createComment><code>createComment(<var title="">data</var>)</code></dfn> method must return a new <code><a href=#comment>Comment</a></code> node with its <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code> attribute set to <var title="">data</var> and <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the comment contains characters that
match the <code title="">Char</code> production in XML or that it contains two
adjacent hyphens or ends with a hyphen. <a href=#refsXML>[XML]</a>

<p>The <dfn id=dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction><code>createProcessingInstruction(<var title="">target</var>, <var title="">data</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If <var title="">target</var> doesn't match the <!--<code
 title>PITarget</code>--> <code title="">Name</code> production in XML, raise an
 <code title=dom-DOMException-INVALID_CHARACTER_ERR><a href=#dom-domexception-invalid_character_err>INVALID_CHARACTER_ERR</a></code>
 exception and abort these steps. <a href=#refsXML>[XML]</a> <!-- DOM3 didn't
 check for "xml" --></li>
 <!--<li><p>If <var title>target</var> contains a U+003A COLON (":") character, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <code><a href=#processinginstruction>ProcessingInstruction</a></code> node with its <code title=dom-ProcessingInstruction-target>target</code> attribute set to <var title="">target</var>, <code title=dom-ProcessingInstruction-data>data</code> attribute set to <var title="">data</var> and <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.
</ol>
<p class=note>No check is performed that the processing instruction target
contains "xml" or the colon, or that the data contains characters that match the
<code title="">Char</code> production in XML or that it contains the string
"<code title="">?&gt;</code>". <a href=#refsXML>[XML]</a></p>

<!--<p>The <dfn title=dom-Document-createAttribute><code>createAttribute(<var title>name</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title>name</var> doesn't match the <code title>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. <a href=#refsXML>[XML]</a>
 <li><p>Return a new <code>Attr</code> node with its <code title=dom-Node-namespaceURI>namespaceURI</code> set to null, <code title=dom-Node-prefix>prefix</code> set to null, <code title=dom-Node-localName>localName</code> set to <var title>name</var>, and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>-->
<!-- this is different from DOM3 -->
<!--<p class=note>No check is performed that the local name will match the <code title>NCName</code> production in Namespaces in XML. <a href=#refsXMLNS>[XMLNS]</a>-->

<p>The <dfn id=dom-document-getelementsbytagname title=dom-Document-getElementsByTagName><code>getElementsByTagName(<var title="">localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If <var title="">localName</var> is just the character U+002A ASTERISK ("*"), return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes.
 <li><p>Otherwise, return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes that have a <code title=dom-node-localName><a href=#dom-node-localname>localName</a></code> equal to <var title="">localName</var>.
</ol>
<p>A new <code><a href=#nodelist>NodeList</a></code> object must be returned each time unless
the argument is the same as the last time the method was invoked on
this <code><a href=#document>Document</a></code> object, in which case the object must be
the same as the object returned by the previous call.</p>

<p>The <dfn id=dom-document-importnode title=dom-Document-importNode><code>importNode(<var title="">importedNode</var>, <var title="">deep</var>)</code></dfn> method must <!--run the following steps:
<ol>-->
 <!--<li><p>If the <span>context node</span> is an XML document, then if any imported <code>Element</code> or <code>Attr</code> node have a <code title=dom-Node-nodeName>nodeName</code> that doesn't match the <code>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. <a href=#refsXML>[XML]</a> (browsers don't do this) --> <!-- XXX this might be wrong -->
 <!--<li><p>If <var>importedNode</var>'s <code title=dom-Node-ownerDocument>ownerDocument</code>'s <span>effective script origin</span> is not the <span title=same-origin>same</span> as the <span>effective script origin</span> of the <span>context node</span>, raise a <code title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</code> exception and abort these steps. <a href=#refsHTML>[HTML]</a> (can't get a reference to a node that you can't adopt anyway) -->
 <!--<li><p>R-->return a <a href=#clone>clone</a> of <var title="">importedNode</var>, with <var title="">new ownerDocument</var> being the <a href=#context-node>context node</a>, and the <var title="">clone children</var> flag set if <var title="">deep</var> is true.
<!--</ol>-->

<p>The <dfn id=dom-document-createelementns title=dom-Document-createElementNS><code>createElementNS(<var title="">namespaceURI</var>, <var title="">qualifiedName</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <code title="">Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR><a href=#dom-domexception-invalid_character_err>INVALID_CHARACTER_ERR</a></code>
 exception and abort these steps. <a href=#refsXML>[XML]</a>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <code title="">QName</code> production in Namespaces in XML, raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort
 these steps. <a href=#refsXMLNS>[XMLNS]</a>
 <li><p>If <var title="">qualifiedName</var> contains a U+003E COLON (":") character, then split the string on the colon and let <var title="">prefix</var> be the part before the colon and <var title="">localName</var> the part after the colon. Otherwise, let <var title="">prefix</var> be null and <var title="">localName</var> be <var title="">qualifiedName</var>.
 <li><p>If <var title="">prefix</var> is not null and <var title="">namespaceURI</var> is an empty string, raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort these steps.
 <li><p>If <var title="">prefix</var> is "xml" and <var title="">namespaceURI</var> is not "http://www.w3.org/XML/1998/namespace", raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort these steps.
 <li><p>If <var title="">qualifiedName</var> or <var title="">prefix</var> is "xmlns" and <var title="">namespaceURI</var> is not "http://www.w3.org/2000/xmlns/", raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort these steps.
 <li><p>If <var title="">namespaceURI</var> is "http://www.w3.org/2000/xmlns/" and neither <var title="">qualifiedName</var> nor <var title="">prefix</var> is "xmlns", raise a <code title=dom-DOMException-NAMESPACE_ERR><a href=#dom-domexception-namespace_err>NAMESPACE_ERR</a></code> exception and abort these steps.
 <li><p>Return a new <code><a href=#element>Element</a></code> node with no attributes, <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code> set to <var title="">namespaceURI</var>, <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code> set to <var title="">prefix</var>, <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> set to <var title="">localName</var>, and <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> set to the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS><code>getElementsByTagNameNS(<var title="">namespaceURI</var>, <var title="">localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If both <var title="">namespaceURI</var> and <var title="">localName</var> are just the character U+002A ASTERISK ("*"), return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes.
 <li><p>Otherwise, if <var title="">namespaceURI</var> is just the character U+002A ASTERISK ("*"), return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes with the <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> equal to <var title="">localName</var>.
 <li><p>Otherwise, if <var title="">localName</var> is just the character U+002A ASTERISK ("*"), return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes with the <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code> equal to <var title="">namespaceURI</var>.
 <li><p>Otherwise, return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a>, whose filter matches only <code><a href=#element>Element</a></code> nodes that have a <code title=dom-Element-namespaceURI>namespaceURI</code> equal to <var title="">namespaceURI</var> and a <code title=dom-Element-localName>localName</code> equal to <var title="">localName</var> (both in a <a href=#case-sensitive>case-sensitive</a> manner).
</ol>
<p>A new <code><a href=#nodelist>NodeList</a></code> object must be returned each time unless
the argument is the same as the last time the method was invoked on
this <code><a href=#document>Document</a></code> object, in which case the object must be
the same as the object returned by the previous call.</p>

<p>The <dfn id=dom-document-getelementbyid title=dom-Document-getElementById><code>getElementById(<var title="">elementId</var>)</code></dfn> method must return the first
<code><a href=#element>Element</a></code> node, in <a href=#tree-order>tree order</a>, in the <a href=#context-node>context
node</a> whose <a href=#concept-id title=concept-ID>ID</a> is <var title="">elementId</var>, or null if there is none.

<p>The <dfn id=dom-document-adoptnode title=dom-Document-adoptNode><code>adoptNode(<var title="">source</var>)</code></dfn> method must run the following steps:

<ol>
 <!-- no security check -->
 <li><p>If <var>source</var>'s <code title=dom-Node-parentNode><a href=#dom-node-parentnode>parentNode</a></code> is not null, remove <var>source</var> from its parent.
 <li><p>Set <var>source</var>'s <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code> to the <a href=#context-node>context node</a>.
 <li><p>Return <var>source</var>.
</ol>


<h3 id=interface-node><span class=secno>3.5 </span>Interface <code title="">Node</code></h3>

<pre class=idl>interface <dfn id=node>Node</dfn> {

  // NodeType
  const unsigned short <span title=dom-Node-ELEMENT_NODE>ELEMENT_NODE</span> = 1;
  const unsigned short <span title=dom-Node-ATTRIBUTE_NODE>ATTRIBUTE_NODE</span> = 2;
  const unsigned short <span title=dom-Node-TEXT_NODE>TEXT_NODE</span> = 3;
  const unsigned short <span title=dom-Node-CDATA_SECTION_NODE>CDATA_SECTION_NODE</span> = 4; // historical
  const unsigned short <span title=dom-Node-ENTITY_REFERENCE_NODE>ENTITY_REFERENCE_NODE</span> = 5; // historical
  const unsigned short <span title=dom-Node-ENTITY_NODE>ENTITY_NODE</span> = 6; // historical
  const unsigned short <span title=dom-Node-PROCESSING_INSTRUCTION_NODE>PROCESSING_INSTRUCTION_NODE</span> = 7;
  const unsigned short <span title=dom-Node-COMMENT_NODE>COMMENT_NODE</span> = 8;
  const unsigned short <span title=dom-Node-DOCUMENT_NODE>DOCUMENT_NODE</span> = 9;
  const unsigned short <span title=dom-Node-DOCUMENT_TYPE_NODE>DOCUMENT_TYPE_NODE</span> = 10;
  const unsigned short <span title=dom-Node-DOCUMENT_FRAGMENT_NODE>DOCUMENT_FRAGMENT_NODE</span> = 11;
  const unsigned short <span title=dom-Node-NOTATION_NODE>NOTATION_NODE</span> = 12; // historical

  readonly attribute DOMString <a href=#dom-node-nodename title=dom-Node-nodeName>nodeName</a>;
           attribute DOMString <a href=#dom-node-nodevalue title=dom-Node-nodeValue>nodeValue</a>;
  readonly attribute unsigned short <a href=#dom-node-nodetype title=dom-Node-nodeType>nodeType</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-parentnode title=dom-Node-parentNode>parentNode</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-node-parentelement title=dom-Node-parentElement>parentElement</a>;
  readonly attribute <a href=#nodelist>NodeList</a> <a href=#dom-node-childnodes title=dom-Node-childNodes>childNodes</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-firstchild title=dom-Node-firstChild>firstChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-lastchild title=dom-Node-lastChild>lastChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-previoussibling title=dom-Node-previousSibling>previousSibling</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-nextsibling title=dom-Node-nextSibling>nextSibling</a>;
  readonly attribute <a href=#namednodemap>NamedNodeMap</a> <a href=#dom-node-attributes title=dom-Node-attributes>attributes</a>;
  readonly attribute <a href=#document>Document</a> <a href=#dom-node-ownerdocument title=dom-Node-ownerDocument>ownerDocument</a>;
  <a href=#node>Node</a> <a href=#dom-node-insertbefore title=dom-Node-insertBefore>insertBefore</a>(in <a href=#node>Node</a> newChild, [TreatUndefinedAs=Null] in <a href=#node>Node</a> refChild);
  <a href=#node>Node</a> <a href=#dom-node-replacechild title=dom-Node-replaceChild>replaceChild</a>(in <a href=#node>Node</a> newChild, in <a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-removechild title=dom-Node-removeChild>removeChild</a>(in <a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-appendchild title=dom-Node-appendChild>appendChild</a>(in <a href=#node>Node</a> newChild);
  boolean <a href=#dom-node-haschildnodes title=dom-Node-hasChildNodes>hasChildNodes</a>();
  <a href=#node>Node</a> <a href=#dom-node-clonenode title=dom-Node-cloneNode>cloneNode</a>(in boolean deep);<!--
  void normalize();-->
  boolean <a href=#dom-node-issupported title=dom-Node-isSupported>isSupported</a>(in DOMString feature, in DOMString version);
  readonly attribute DOMString <a href=#dom-node-namespaceuri title=dom-Node-namespaceURI>namespaceURI</a>;
  readonly attribute DOMString <a href=#dom-node-prefix title=dom-Node-prefix>prefix</a>;
  readonly attribute DOMString <a href=#dom-node-localname title=dom-Node-localName>localName</a>;
  boolean <a href=#dom-node-hasattributes title=dom-Node-hasAttributes>hasAttributes</a>();
  readonly attribute DOMString <a href=#dom-node-baseuri title=dom-Node-baseURI>baseURI</a>;

  // DocumentPosition
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_DISCONNECTED>DOCUMENT_POSITION_DISCONNECTED</span> = 0x01;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_PRECEDING>DOCUMENT_POSITION_PRECEDING</span> = 0x02;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_FOLLOWING>DOCUMENT_POSITION_FOLLOWING</span> = 0x04;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_CONTAINS>DOCUMENT_POSITION_CONTAINS</span> = 0x08;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY>DOCUMENT_POSITION_CONTAINED_BY</span> = 0x10;
  const unsigned short <span title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</span> = 0x20;

  unsigned short <a href=#dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition>compareDocumentPosition</a>(in <a href=#node>Node</a> other);

  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-node-textcontent title=dom-Node-textContent>textContent</a>;
  boolean <a href=#dom-node-issamenode title=dom-Node-isSameNode>isSameNode</a>(in <a href=#node>Node</a> other);
  DOMString <a href=#dom-node-lookupprefix title=dom-Node-lookupPrefix>lookupPrefix</a>(in DOMString namespaceURI);
  boolean <a href=#dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace>isDefaultNamespace</a>(in DOMString namespaceURI);
  DOMString <a href=#dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI>lookupNamespaceURI</a>(in DOMString prefix);
  boolean <a href=#dom-node-isequalnode title=dom-Node-isEqualNode>isEqualNode</a>(in <a href=#node>Node</a> arg);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);
  DOMUserData setUserData(in DOMString key, in DOMUserData data, in UserDataHandler handler);
  DOMUserData getUserData(in DOMString key);-->
};</pre>

<p>The <dfn id=dom-node-nodename title=dom-Node-nodeName><code>nodeName</code></dfn>, <dfn id=dom-node-nodevalue title=dom-Node-nodeValue><code>nodeValue</code></dfn> and <dfn id=dom-node-nodetype title=dom-Node-nodeType><code>nodeType</code></dfn> attributes must, on getting, return what is in the second, third and forth column, respectively, if the node also implements the interface in the first column on the same row in the following table:

<table>
<thead><tr><th>Interface<th><code title=dom-Node-nodeName><a href=#dom-node-nodename>nodeName</a></code><th><code title=dom-Node-nodeValue><a href=#dom-node-nodevalue>nodeValue</a></code><th><code title=dom-Node-nodeType><a href=#dom-node-nodetype>nodeType</a></code>
<tbody>
<tr><td><code><a href=#element>Element</a></code><td>same as <code title=dom-Element-tagName><a href=#dom-element-tagname>tagName</a></code><td>null<td>1
<tr><td><code><a href=#attr>Attr</a></code><td>same as <code title=dom-Attr-name>name</code><td>same as <code title=dom-Attr-value>value</code><td>2
<tr><td><code><a href=#text>Text</a></code><td>"<code title="">#text</code>"<td>same as <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code><td>3
<tr><td><code><a href=#processinginstruction>ProcessingInstruction</a></code><td>same as <code title=dom-ProcessingInstruction-target>target</code><td>same as <code title=dom-ProcessingInstruction-data>data</code><td>7
<tr><td><code><a href=#comment>Comment</a></code><td>"<code title="">#comment</code>"<td>same as <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code><td>8
<tr><td><code><a href=#document>Document</a></code><td>"<code title="">#document</code>"<td>null<td>9
<tr><td><code><a href=#documenttype>DocumentType</a></code><td>same as <code title=dom-DocumentType-name>name</code><td>null<td>10
<tr><td><code><a href=#documentfragment>DocumentFragment</a></code><td>"<code title="">#document-fragment</code>"<td>null<td>11
</table>

<p>The <dfn id=dom-node-parentnode title=dom-Node-parentNode><code>parentNode</code></dfn> attribute must, on getting, return the parent node of the <a href=#context-node>context node</a>, or null if there is no parent.

<p>The <dfn id=dom-node-parentelement title=dom-Node-parentElement><code>parentElement</code></dfn> attribute must, on getting, return the parent node of the <a href=#context-node>context node</a> if there is a parent and it is an element, or null otherwise.

<p>The <dfn id=dom-node-childnodes title=dom-Node-childNodes><code>childNodes</code></dfn> attribute must, on getting, return a <code><a href=#nodelist>NodeList</a></code> rooted at the <a href=#context-node>context node</a> matching only child nodes.

<p>The <dfn id=dom-node-firstchild title=dom-Node-firstChild><code>firstChild</code></dfn> attribute must, on getting, return the first child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-lastchild title=dom-Node-lastChild><code>lastChild</code></dfn> attribute must, on getting, return the last child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-previoussibling title=dom-Node-previousSibling><code>previousSibling</code></dfn> attribute must, on getting, return the previous sibling node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-nextsibling title=dom-Node-nextSibling><code>nextSibling</code></dfn> attribute must, on getting, return the next sibling node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-attributes title=dom-Node-attributes><code>attributes</code></dfn> attribute must, on getting, return a <code><a href=#namednodemap>NamedNodeMap</a></code> of all the <code><a href=#attr>Attr</a></code> nodes associated with the node of the <a href=#context-node>context node</a>, if it is an <code><a href=#element>Element</a></code> node, or null otherwise.

<p>The <dfn id=dom-node-ownerdocument title=dom-Node-ownerDocument><code>ownerDocument</code></dfn> attribute must, on getting, return the <code><a href=#document>Document</a></code> node that the <a href=#context-node>context node</a> is associated with, or null if there is none.

<p>The <dfn id=dom-node-insertbefore title=dom-Node-insertBefore><code>insertBefore(<var>newChild</var>, <var>refChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>newChild</var> doesn't implement the <code><a href=#node>Node</a></code> interface, or if <var>refChild</var> is not null or doesn't implement the <code><a href=#node>Node</a></code> interface, then raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR><a href=#dom-domexception-not_supported_err>NOT_SUPPORTED_ERR</a></code> exception and abort these steps.
 <li><p>If <var>refChild</var> is not null and is not a child of the <a href=#context-node>context node</a>, then raise a <code title=dom-DOMException-NOT_FOUND_ERR><a href=#dom-domexception-not_found_err>NOT_FOUND_ERR</a></code> exception and abort these steps.
 <!-- no security check -->
 <li><p>If <var>newChild</var> is a <code><a href=#documentfragment>DocumentFragment</a></code> node, then while <var>newChild</var>'s <code title=dom-Node-firstChild><a href=#dom-node-firstchild>firstChild</a></code> is not null, call <code title=dom-Node-insertBefore><a href=#dom-node-insertbefore>insertBefore</a></code> on the <a href=#context-node>context node</a> with <var>newChild</var>'s <code title=dom-Node-firstChild><a href=#dom-node-firstchild>firstChild</a></code> as first argument and <var>refChild</var> as second argument.
 <li><p>Otherwise, if <var>refChild</var> is null, append <var>newChild</var> to the <a href=#context-node>context node</a>.
 <li><p>Otherwise insert <var>newChild</var> in the <a href=#context-node>context node</a> as the previous sibling of <var>refChild</var>.
 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-replacechild title=dom-Node-replaceChild><code>replaceChild(<var>newChild</var>, <var>oldChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>newChild</var> or <var>oldChild</var> doesn't implement the <code><a href=#node>Node</a></code> interface, then raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR><a href=#dom-domexception-not_supported_err>NOT_SUPPORTED_ERR</a></code> exception and abort these steps.
 <li><p>If <var>oldChild</var> is not a child of the <a href=#context-node>context node</a>, then raise a <code title=dom-DOMException-NOT_FOUND_ERR><a href=#dom-domexception-not_found_err>NOT_FOUND_ERR</a></code> exception and abort these steps.
 <!-- no security check -->
 <li><p>Let <var>refChild</var> be <var>oldChild</var>'s <code title=dom-Node-nextSibling><a href=#dom-node-nextsibling>nextSibling</a></code>.
 <li><p>Remove <var>oldChild</var> from <a href=#context-node>context node</a>.
 <li><p>Call <code title=dom-Node-insertBefore><a href=#dom-node-insertbefore>insertBefore</a></code> on the <a href=#context-node>context node</a> with <var>newChild</var> and <var>refChild</var> as arguments, respectively.
 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-removechild title=dom-Node-removeChild><code>removeChild(<var>oldChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>oldChild</var> doesn't implement the <code><a href=#node>Node</a></code> interface, then raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR><a href=#dom-domexception-not_supported_err>NOT_SUPPORTED_ERR</a></code> exception and abort these steps.
 <li><p>If <var>oldChild</var> is not a child of the <a href=#context-node>context node</a>, then raise a <code title=dom-DOMException-NOT_FOUND_ERR><a href=#dom-domexception-not_found_err>NOT_FOUND_ERR</a></code> exception and abort these steps.
 <li><p>Remove <var>oldChild</var> from <a href=#context-node>context node</a>.
 <li><p>Return <var>oldChild</var>.
</ol>

<p>The <dfn id=dom-node-appendchild title=dom-Node-appendChild><code>appendChild(<var>newChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>newChild</var> doesn't implement the <code><a href=#node>Node</a></code> interface, then raise a <code title=dom-DOMException-NOT_SUPPORTED_ERR><a href=#dom-domexception-not_supported_err>NOT_SUPPORTED_ERR</a></code> exception and abort these steps.
 <!-- no security check -->
 <li><p>Append <var>newChild</var> to the <a href=#context-node>context node</a>.
 <li><p>Return <var>newChild</var>.
</ol>

<p>The <dfn id=dom-node-haschildnodes title=dom-Node-hasChildNodes><code>hasChildNodes()</code></dfn> method must return false if the <a href=#context-node>context node</a>'s <code title=dom-Node-firstChild><a href=#dom-node-firstchild>firstChild</a></code> is null, and true otherwise.

<p>The <dfn id=dom-node-clonenode title=dom-Node-cloneNode><code>cloneNode(<var>deep</var>)</code></dfn> method must return a <a href=#clone>clone</a> of the <a href=#context-node>context node</a>, with <var title="">new ownerDocument</var> being the <a href=#context-node>context node</a>'s <code title=dom-Node-ownerDocument><a href=#dom-node-ownerdocument>ownerDocument</a></code>, and the <var title="">clone children</var> flag set if <var title="">deep</var> is true.

<p>The <dfn id=dom-node-issupported title=dom-Node-isSupported><code>isSupported(<var title="">feature</var>, <var title="">version</var>)</code></dfn> method must return true if the UA supports the given feature <var title="">feature</var> of version <var title="">version</var> on the <a href=#context-node>context node</a>, and false otherwise.

<p>The <dfn id=dom-node-namespaceuri title=dom-Node-namespaceURI><code>namespaceURI</code></dfn> attribute, on getting, must return the namespace that is associated with the node, if there is one and it's not the empty string, or null otherwise.

<p>The <dfn id=dom-node-prefix title=dom-Node-prefix><code>prefix</code></dfn> attribute, on getting, must return the prefix that is associated with the node, if there is one and it's not the empty string, or null otherwise. <!--On setting, it must run the following steps:

<ol>
 <li><p>Let <var title>prefix</var> be the value being assigned.
 <li>
  <p>If <var title>prefix</var> is not null, run the following substeps:
  <ol>
   <li><p>If <var title>prefix</var> doesn't match the <code title>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. <a href=#refsXML>[XML]</a>
   <li><p>If <var title>prefix</var> doesn't match the <code title>NCName</code> production in Namespaces in XML, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps. <a href=#refsXMLNS>[XMLNS]</a>
  </ol>
 <li><p class=XXX>Actually this doesn't match any browser. Let's try to drop it instead.
</ol>-->

<p>The <dfn id=dom-node-localname title=dom-Node-localName><code>localName</code></dfn> attribute, on getting, must return the local name that is associated with the node.

<p>The <dfn id=dom-node-hasattributes title=dom-Node-hasAttributes><code>hasAttributes()</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-baseuri title=dom-Node-baseURI><code>baseURI</code></dfn> attribute must <span class=XXX>...</span>

<p>The <dfn id=dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition><code>compareDocumentPosition(<var>other</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-textcontent title=dom-Node-textContent><code>textContent</code></dfn> attribute, on getting, must return a concatenation of the <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code> of all the descendant <code><a href=#text>Text</a></code> nodes of the <a href=#context-node>context node</a>, in <a href=#tree-order>tree order</a>. On setting, it must run the following steps:

<ol>
 <li><p>Remove all the child nodes of the <a href=#context-node>context node</a>.
 <li><p>Let <var title="">data</var> be the value being assigned.
 <li><p>If <var title="">data</var> is not the empty string, append a new <code><a href=#text>Text</a></code> node to the <a href=#context-node>context node</a> whose <code title=dom-CharacterData-data><a href=#dom-characterdata-data>data</a></code> is set to <var title="">data</var>.
</ol>

<p>The <dfn id=dom-node-issamenode title=dom-Node-isSameNode><code>isSameNode(<var>other</var>)</code></dfn> method must return true if <var>other</var> is a reference to the same object as the <a href=#context-node>context node</a>, and false otherwise.

<p>The <dfn id=dom-node-lookupprefix title=dom-Node-lookupPrefix><code>lookupPrefix(<var>namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace><code>isDefaultNamespace(<var>namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI><code>lookupNamespaceURI(<var>prefix</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-isequalnode title=dom-Node-isEqualNode><code>isEqualNode(<var>arg</var>)</code></dfn> method must return true if all of the following conditions are true, and must otherwise return false:

<ul>
 <li><p><var>arg</var> implements the <code><a href=#node>Node</a></code> interface.
 <li><p><var>arg</var>'s <code title=dom-Node-type>type</code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-type>type</code>.
 <li><p><var>arg</var>'s <code title=dom-Node-nodeName><a href=#dom-node-nodename>nodeName</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-nodeName><a href=#dom-node-nodename>nodeName</a></code>.
 <li><p><var>arg</var>'s <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code>.
 <li><p><var>arg</var>'s <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-namespaceURI><a href=#dom-node-namespaceuri>namespaceURI</a></code>.
 <li><p><var>arg</var>'s <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code>.
 <li><p><var>arg</var>'s <code title=dom-Node-nodeValue><a href=#dom-node-nodevalue>nodeValue</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-nodeValue><a href=#dom-node-nodevalue>nodeValue</a></code>.
 <li><p><var>arg</var>'s <code title=dom-Node-attributes><a href=#dom-node-attributes>attributes</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-attributes><a href=#dom-node-attributes>attributes</a></code>. <span class=XXX>Elaborate...</span>
 <li><p><var>arg</var>'s <code title=dom-Node-childNodes><a href=#dom-node-childnodes>childNodes</a></code>' <code title=dom-NodeList-length><a href=#dom-nodelist-length>length</a></code> is the same as the <a href=#context-node>context node</a>'s <code title=dom-Node-childNodes><a href=#dom-node-childnodes>childNodes</a></code>' <code title=dom-NodeList-length><a href=#dom-nodelist-length>length</a></code>.
 <li><p>Calling <code title=dom-Node-isEqual>isEqualNode</code> on each child node of the <a href=#context-node>context node</a>, with the child node of the same index in <var>arg</var> as argument returns true for every child node.
</ul>


<h3 id=interface-nodelist><span class=secno>3.6 </span>Interface <code title="">NodeList</code></h3>

<p>A <code><a href=#nodelist>NodeList</a></code> is a <span title=collections>collection</span>, except that <code><a href=#nodelist>NodeList</a></code>s can be static (as opposed to live) if a specification defines them to be static. <a href=#refsHTML>[HTML]</a>

<pre class=idl>interface <dfn id=nodelist>NodeList</dfn> {
  getter <a href=#node>Node</a> <a href=#dom-nodelist-item title=dom-NodeList-item>item</a>(in unsigned long index);
  readonly attribute unsigned long <a href=#dom-nodelist-length title=dom-NodeList-length>length</a>;
};</pre>

<p>The <dfn id=dom-nodelist-item title=dom-NodeList-item><code>item(<var>index</var>)</code></dfn> method must return the <var>index</var>th node in the collection. If there is no <var>index</var>th node in the collection, then the method must return null.

<p>The <dfn id=dom-nodelist-length title=dom-NodeList-length><code>length</code></dfn> attribute must, on getting, return the number of nodes <span>represented by the collection</span>.


<h3 id=interface-namednodemap><span class=secno>3.7 </span>Interface <code title="">NamedNodeMap</code></h3>

<pre class=idl>interface <dfn id=namednodemap>NamedNodeMap</dfn> {
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-getNamedItem>getNamedItem</span>(in DOMString name);
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-setNamedItem>setNamedItem</span>(in <a href=#node>Node</a> arg);
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</span>(in DOMString name);
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-item>item</span>(in unsigned long index);
  readonly attribute unsigned long <span title=dom-NamedNodeMap-length>length</span>;
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</span>(in DOMString namespaceURI, in DOMString localName);
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</span>(in <a href=#node>Node</a> arg);
  <a href=#node>Node</a> <span title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</span>(in DOMString namespaceURI, in DOMString localName);
};</pre>


<h3 id=interface-characterdata><span class=secno>3.8 </span>Interface <code title="">CharacterData</code></h3>

<pre class=idl>interface <dfn id=characterdata>CharacterData</dfn> : <a href=#node>Node</a> {
  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-characterdata-data title=dom-CharacterData-data>data</a>;
  readonly attribute unsigned long <a href=#dom-characterdata-length title=dom-CharacterData-length>length</a>;
  DOMString <a href=#dom-characterdata-substringdata title=dom-CharacterData-substringData>substringData</a>(in unsigned long offset, in unsigned long count);
  void <span title=dom-CharacterData-appendData>appendData</span>(in DOMString arg);
  void <span title=dom-CharacterData-insertData>insertData</span>(in unsigned long offset, in DOMString arg);
  void <span title=dom-CharacterData-deleteData>deleteData</span>(in unsigned long offset, in unsigned long count);
  void <span title=dom-CharacterData-replaceData>replaceData</span>(in unsigned long offset, in unsigned long count, in DOMString arg);
};</pre>

<p>The <dfn id=dom-characterdata-data title=dom-CharacterData-data><code>data</code></dfn> attribute must, on getting, return the data of the node, and on setting, must change the node's data to the new value. <!-- XXX should getting throw if length is longer than a DOMString can take? -->

<p>The <dfn id=dom-characterdata-length title=dom-CharacterData-length><code>length</code></dfn> attribute must, on getting, return the number of UTF-16 code units represented by the node's data.

<p>The <dfn id=dom-characterdata-substringdata title=dom-CharacterData-substringData><code>substringData(<var>offset</var>, <var>count</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var>offset</var> is negative or is greater than the <a href=#context-node>context node</a>'s <code title=dom-CharacterData-length><a href=#dom-characterdata-length>length</a></code>, or if <var>count</var> is negative, raise an <code title=dom-DOMException-INDEX_SIZE_ERR><a href=#dom-domexception-index_size_err>INDEX_SIZE_ERR</a></code> exception and abort these steps.
 <li><p>If <span title=""><var>offset</var>+<var>count</var></span> is greater than the <a href=#context-node>context node</a>'s <code title=dom-CharacterData-length><a href=#dom-characterdata-length>length</a></code>, return a <code>DOMString</code> whose value is the UTF-16 code units from the <var>offset</var>th UTF-16 code unit to the end of <var title="">data</var>.
 <li><p>Return a <code>DOMString</code> whose value is the UTF-16 code units from the <var>offset</var>th UTF-16 code unit to the <span title=""><var>offset</var>+<var>count</var></span>th UTF-16 code unit in <var title="">data</var>.
</ol>
<!-- XXX should it throw if it's too long? -->




<h3 id=interface-attr><span class=secno>3.9 </span>Interface <code title="">Attr</code></h3>

<pre class=idl>interface <dfn id=attr>Attr</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <span title=dom-Attr-name>name</span>;
  readonly attribute boolean <span title=dom-Attr-specified>specified</span>;
           attribute DOMString <span title=dom-Attr-value>value</span>;
  readonly attribute Element <span title=dom-Attr-ownerElement>ownerElement</span>;<!--
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;-->
};</pre>


<h3 id=interface-element><span class=secno>3.10 </span>Interface <code title="">Element</code></h3>

<pre class=idl>interface <dfn id=element>Element</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-element-tagname title=dom-Element-tagName>tagName</a>;
  DOMString? <a href=#dom-element-getattribute title=dom-Element-getAttribute>getAttribute</a>(in DOMString name);
  void <span title=dom-Element-setAttribute>setAttribute</span>(in DOMString name, in DOMString value);
  void <span title=dom-Element-removeAttribute>removeAttribute</span>(in DOMString name);<!--
  Attr <span title=dom-Element-getAttributeNode>getAttributeNode</span>(in DOMString name);
  Attr <span title=dom-Element-setAttributeNode>setAttributeNode</span>(in Attr newAttr);
  Attr <span title=dom-Element-removeAttributeNode>removeAttributeNode</span>(in Attr oldAttr);-->
  NodeList <span title=dom-Element-getElementsByTagName>getElementsByTagName</span>(in DOMString name);
  DOMString <span title=dom-Element-getAttributeNS>getAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);
  void <span title=dom-Element-setAttributeNS>setAttributeNS</span>(in DOMString namespaceURI, in DOMString qualifiedName, in DOMString value);
  void <span title=dom-Element-removeAttributeNS>removeAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);<!--
  Attr <span title=dom-Element-getAttributeNodeNS>getAttributeNodeNS</span>(in DOMString namespaceURI, in DOMString localName);
  Attr getAttributeNodeNS(in DOMString namespaceURI, in DOMString localName);-->
  <a href=#nodelist>NodeList</a> <span title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</span>(in DOMString namespaceURI, in DOMString localName);
  boolean <span title=dom-Element-hasAttribute>hasAttribute</span>(in DOMString name);
  boolean <span title=dom-Element-hasAttributeNS>hasAttributeNS</span>(in DOMString namespaceURI, in DOMString localName);<!--
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(in DOMString name, in boolean isId);
  void setIdAttributeNS(in DOMString namespaceURI, in DOMString localName, in boolean isId);
  void setIdAttributeNode(in Attr idAttr, in boolean isId);-->
           attribute <span>HTMLCollection</span> <span title=dom-Element-children>children</span>;
};</pre>


<p><code><a href=#element>Element</a></code> nodes can have a <dfn id=concept-id title=concept-id>unique
identifier (ID)</dfn> associated with them. <a href=#concept-id title=concept-id>IDs</a>
must contain at least one character and must not contain any <a href=#space-character title="space character">space characters</a>. User agents must not associate
empty <a href=#concept-id title=concept-id>IDs</a> and <a href=#concept-id title=concept-id>IDs</a>
containing <a href=#space-character title="space character">space characters</a> with
<code><a href=#element>Element</a></code> nodes. Specifications may define how <a href=#concept-id title=concept-id>IDs</a> are associated with <code><a href=#element>Element</a></code> nodes.

<p class=note>For example, HTML elements can have an <code data-anolis-spec=html title=attr-id>id</code> attribute specified, to specify its <a href=#concept-id title=concept-id>ID</a>. <a href=#refsHTML>[HTML]</a>

<p class=XXX>HTMLCollection is defined in HTML5. Perhaps we should move that to this spec. Perhaps also DOMTokenList, DOMStringMap, getElementsByClassName...

<p>The <dfn id=dom-element-getattribute title=dom-Element-getAttribute><code>getAttribute()</code></dfn>
method must return the value of the attribute given by the first argument,
if the attribute is present, or null otherwise.

<p>The <dfn id=dom-element-tagname title=dom-Element-tagName><code>tagName</code></dfn> attribute must, on getting, return the concatenation of <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code>, the character U+003E COLON (":") and <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code> if <code title=dom-Node-prefix><a href=#dom-node-prefix>prefix</a></code> is not null, and otherwise just <code title=dom-Node-localName><a href=#dom-node-localname>localName</a></code>.


<h3 id=interface-text><span class=secno>3.11 </span>Interface <code title="">Text</code></h3>

<pre class=idl>interface <dfn id=text>Text</dfn> : <a href=#characterdata>CharacterData</a> {
  <a href=#text>Text</a> <span title=dom-Text-splitText>splitText</span>(in unsigned long offset);<!--
  readonly attribute boolean isElementContentWhitespace;-->
  readonly attribute DOMString <span title=dom-Text-wholeText>wholeText</span>;
  <a href=#text>Text</a> <span title=dom-Text-replaceWholeText>replaceWholeText</span>(in DOMString content);
};</pre>


<h3 id=interface-comment><span class=secno>3.12 </span>Interface <code title="">Comment</code></h3>

<pre class=idl>interface <dfn id=comment>Comment</dfn> : <a href=#characterdata>CharacterData</a> {
};</pre>

<!-- TypeInfo dropped -->
<!-- UserDataHandler dropped -->
<!-- DOMError dropped -->
<!-- DOMErrorHandler dropped -->
<!-- DOMLocator dropped -->
<!-- DOMConfiguration dropped -->
<!-- CDATASection dropped -->


<h3 id=interface-documenttype><span class=secno>3.13 </span>Interface <code title="">DocumentType</code></h3>

<pre class=idl>interface <dfn id=documenttype>DocumentType</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <span title=dom-DocumentType-name>name</span>;<!--
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;-->
  readonly attribute DOMString <span title=dom-DocumentType-publicId>publicId</span>;
  readonly attribute DOMString <span title=dom-DocumentType-systemId>systemId</span>;<!--
  readonly attribute DOMString internalSubset;-->
};</pre>

<!-- Notation dropped -->
<!-- Entity dropped -->
<!-- EntityReference dropped -->


<h3 id=interface-processinginstruction><span class=secno>3.14 </span>Interface <code title="">ProcessingInstruction</code></h3>

<pre class=idl>interface <dfn id=processinginstruction>ProcessingInstruction</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <span title=dom-ProcessingInstruction-target>target</span>;
           attribute DOMString <span title=dom-ProcessingInstruction-data>data</span>;
};</pre>



<h2 class=no-num id=references>References</h2><!--REFS-->

<p>All references are normative unless marked "Non-normative".</p>

<!-- Dates are only included for standards older than the Web,
because the newer ones keep changing. -->

<dl>
 <dt id=refsHTML>[HTML]</dt>
 <dd><cite><a href=http://www.whatwg.org/specs/web-apps/current-work/>HTML</a></cite>,
 I. Hickson. WHATWG.</dd>

 <dt id=refsRFC2119>[RFC2119]</dt>
 <dd><cite><a href=http://www.ietf.org/rfc/rfc2119.txt>Key words for use in
 RFCs to Indicate Requirement Levels</a></cite>, S. Bradner. IETF.</dd>

 <dt id=refsWEBIDL>[WEBIDL]</dt>
 <!--
 <dd><cite><a href="http://www.w3.org/TR/WebIDL/">Web
 IDL</a></cite>, C. McCormack. W3C.</dd>
 -->
 <dd><cite><a href=http://dev.w3.org/2006/webapi/WebIDL/>Web
 IDL</a></cite>, C. McCormack. W3C.</dd>

 <dt id=refsXML>[XML]</dt>
 <dd><cite><a href=http://www.w3.org/TR/xml/>Extensible Markup
 Language</a></cite>, T. Bray, J. Paoli, C. Sperberg-McQueen,
 E. Maler, F. Yergeau. W3C.</dd>

 <dt id=refsXMLNS>[XMLNS]</dt>
 <dd><cite><a href=http://www.w3.org/TR/xml-names/>Namespaces in
 XML</a></cite>, T. Bray, D. Hollander, A. Layman, R. Tobin. W3C.</dd>
</dl>

<h2 class=no-num id=acknowledgements>Acknowledgements</h2>

<p>Thanks to Anne van Kesteren and Henri Sivonen for their useful comments.


<script src=http://www.whatwg.org/specs/web-apps/current-work/dfn.js></script>
