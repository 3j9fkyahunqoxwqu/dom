<!DOCTYPE html><title>Web DOM Core</title>
<link href=http://www.whatwg.org/style/specification rel=stylesheet>
<style>
 pre, code { font-family:monospace, sans-serif; }
 h2 code, h3 code, h4 code,
 h2 :link, h3 :link, h4 :link,
 h2 :visited, h3 :visited, h4 :visited
 { font:inherit; color:inherit; font-style:italic; }
 span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 i:not([title]):not([class]):not([id]):not([data-anolis-spec])
 { border-bottom: solid #99CC99; }
 dfn span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a span:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a abbr:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a code:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a var:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 dfn i:not([title]):not([class]):not([id]):not([data-anolis-spec]),
 a i:not([title]):not([class]):not([id]):not([data-anolis-spec])
 { border-bottom: none; }
</style>
<body class=draft>
<div class=head id=head>
<h1>Web DOM Core</h1>
<h2 class="no-num no-toc" id=work-in-progress-&mdash;-last-update-date:-01-jan-1901>Work in Progress &mdash; Last Update 8 April 2010</h2>
<dl>
 <dt>Editors
 <dd>Simon Pieters &lt;simonp@opera.com&gt;
 <dd>Geoffrey Sneddon &lt;gsneddon@opera.com&gt;
 <dd>Ms2ger &lt;ms2ger@gmail.com&gt;

 <dt>Version history
 <dd><a href=http://bitbucket.org/ms2ger/web-dom-core/>http://bitbucket.org/ms2ger/web-dom-core</a>
 <dd><a href=http://hg.gsnedders.com/web-dom-core>http://hg.gsnedders.com/web-dom-core</a>
 <dd><a href=http://simon.html5.org/specs/web-dom-core>http://simon.html5.org/specs/web-dom-core</a>
</dl>
</div>



<h2 class="no-num no-toc" id=issues>Issues</h2>

<ul class=XXX>
 <li>innerHTML etc on all Elements / <code class="IDL fragment"><a href=#document>Document</a> implements <a class=external href=http://www.whatwg.org/html/#htmldocument>HTMLDocument</a>;</code>?
  <a href=http://lists.w3.org/Archives/Public/public-html/2007Aug/0778.html>public-html/2007Aug/0778.html</a>,
  <a href=http://lists.w3.org/Archives/Public/public-webapi/2007Aug/0069.html>public-webapi/2007Aug/0069.html</a>,
  <a href=http://lists.w3.org/Archives/Public/public-webapi/2007Aug/0070.html>public-webapi/2007Aug/0070.html</a>
 <li>\0 <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312>http://krijnhoetmer.nl/irc-logs/whatwg/20080321#l-312</a>
 <li>document.parseError? <a href=http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com>http://www.w3.org/mid/op.ucv5axjp64w2qv@annevk-t60.oslo.opera.com</a>
 <li>sourceIndex? <a href=http://www.quirksmode.org/dom/w3c_core.html>http://www.quirksmode.org/dom/w3c_core.html</a>
 <li>Range.createContextualFragment <a href=http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html>http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-March/018892.html</a>
 <li>[Reflect] <a href=http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90>http://krijnhoetmer.nl/irc-logs/whatwg/20090622#l-90</a>
 <li><a href=http://www.whatwg.org/html/#htmlcollection><code class=external>HTMLCollection</code></a> is defined in HTML5. Perhaps we should move that to this spec. Perhaps also DOMStringMap, getElementsByClassName...
</ul>



<h2 class="no-num no-toc" id=abstract>Abstract</h2>
<p>This specification defines the DOM Core part of the Web platform. The Document Object Model is a language- and platform neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. Web DOM Core mostly subsets DOM3 Core, but redefines some things and adds some features that were widely implemented already.



<h2 class="no-num no-toc" id=table-of-contents>Table of contents</h2>

<!--begin-toc-->
<ol class=toc>
 <li><a href=#common-infrastructure><span class=secno>1 </span>Common infrastructure</a>
  <ol>
   <li><a href=#terminology><span class=secno>1.1 </span>Terminology</a></li>
   <li><a href=#conformance-requirements><span class=secno>1.2 </span>Conformance requirements</a>
    <ol>
     <li><a href=#dependencies><span class=secno>1.2.1 </span>Dependencies</a></li>
     <li><a href=#extensibility><span class=secno>1.2.2 </span>Extensibility</a></ol></li>
   <li><a href=#case-sensitivity><span class=secno>1.3 </span>Case-sensitivity</a></li>
   <li><a href=#common-microsyntaxes><span class=secno>1.4 </span>Common microsyntaxes</a>
    <ol>
     <li><a href=#common-parser-idioms><span class=secno>1.4.1 </span>Common parser idioms</a></li>
     <li><a href=#space-separated-tokens><span class=secno>1.4.2 </span>Space-separated tokens</a></ol></li>
   <li><a href=#dom-features><span class=secno>1.5 </span>DOM features</a></li>
   <li><a href=#cloning-nodes><span class=secno>1.6 </span>Cloning nodes</a></li>
   <li><a href=#legal-hierarchy><span class=secno>1.7 </span>Legal hierarchy</a></li>
   <li><a href=#namespaces><span class=secno>1.8 </span>Namespaces</a></ol></li>
 <li><a href=#basic-types><span class=secno>2 </span>Basic types</a></li>
 <li><a href=#exceptions><span class=secno>3 </span>Exceptions</a>
  <ol>
   <li><a href=#exception-domexception><span class=secno>3.1 </span>Exception <code>DOMException</code></a></ol></li>
 <li><a href=#nodes><span class=secno>4 </span>Nodes</a>
  <ol>
   <li><a href=#interface-node><span class=secno>4.1 </span>Interface <code>Node</code></a></li>
   <li><a href=#interface-documentfragment><span class=secno>4.2 </span>Interface <code>DocumentFragment</code></a></li>
   <li><a href=#interface-document><span class=secno>4.3 </span>Interface <code>Document</code></a></li>
   <li><a href=#interface-attr><span class=secno>4.4 </span>Interface <code>Attr</code></a></li>
   <li><a href=#interface-element><span class=secno>4.5 </span>Interface <code>Element</code></a></li>
   <li><a href=#interface-documenttype><span class=secno>4.6 </span>Interface <code>DocumentType</code></a></li>
   <li><a href=#interface-processinginstruction><span class=secno>4.7 </span>Interface <code>ProcessingInstruction</code></a></li>
   <li><a href=#interface-characterdata><span class=secno>4.8 </span>Interface <code>CharacterData</code></a></li>
   <li><a href=#interface-text><span class=secno>4.9 </span>Interface <code>Text</code></a></li>
   <li><a href=#interface-comment><span class=secno>4.10 </span>Interface <code>Comment</code></a></ol></li>
 <li><a href=#interfaces><span class=secno>5 </span>Interfaces</a>
  <ol>
   <li><a href=#interface-domimplementation><span class=secno>5.1 </span>Interface <code>DOMImplementation</code></a></li>
   <li><a href=#interface-nodelist><span class=secno>5.2 </span>Interface <code>NodeList</code></a></li>
   <li><a href=#interface-namednodemap><span class=secno>5.3 </span>Interface <code>NamedNodeMap</code></a></li>
   <li><a href=#interface-domstringlist><span class=secno>5.4 </span>Interface <code>DOMStringList</code></a></li>
   <li><a href=#interface-domtokenlist><span class=secno>5.5 </span>Interface <code>DOMTokenList</code></a></li>
   <li><a href=#interface-domsettabletokenlist><span class=secno>5.6 </span>Interface <code>DOMSettableTokenList</code></a></ol></li>
 <li><a href=#historical-interfaces><span class=secno>6 </span>Historical interfaces</a></li>
 <li><a class=no-num href=#references>References</a></li>
 <li><a class=no-num href=#acknowledgements>Acknowledgements</a></ol>
<!--end-toc-->



<h2 id=common-infrastructure><span class=secno>1 </span>Common infrastructure</h2>
<h3 id=terminology><span class=secno>1.1 </span>Terminology</h3>
<p>The term <dfn id=tree-order>tree order</dfn> means a pre-order, depth-first traversal of DOM nodes involved (through the <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a>/<a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a> relationship).

<p>The term <dfn id=context-node>context node</dfn> means the <a href=#node><code>Node</code></a> on which the method or attribute being discussed was called.

<p>The term <dfn id=root-element>root element</dfn>, when not explicitly qualified
as referring to the document's root element, means the furthest
ancestor element node of whatever node is being discussed, or the
node itself if it has no ancestors. When the node is a part of the
document, then the node's <a href=#root-element>root element</a> is indeed the
document's root element; however, if the node is not currently part
of the document tree, the root element will be an orphaned node.</p>

<p>When an element's <a href=#root-element>root element</a> is the root element
of a <a href=#document><code>Document</code></a>, it is said to be <dfn id=in-a-document>in a
<code>Document</code></dfn>.

<p>A node's <dfn id=home-subtree>home subtree</dfn> is the subtree rooted at that
node's <a href=#root-element>root element</a>. When a node is <a href=#in-a-document>in a
<code>Document</code></a>, its <a href=#home-subtree>home subtree</a> is that
<a href=#document><code>Document</code></a>'s tree.

<p>The <dfn id=space-character title="space character">space characters</dfn>, for the
purposes of this specification, are U+0020 SPACE, U+0009 CHARACTER
TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and
U+000D CARRIAGE RETURN (CR).</p>


<h3 id=conformance-requirements><span class=secno>1.2 </span>Conformance requirements</h3>
<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.</p>

<p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in the normative parts of this document are to be
interpreted as described in RFC2119. For readability, these words do
not appear in all uppercase letters in this specification. <a href=#refsRFC2119>[RFC2119]</a></p>

<p>Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
abort these steps") are to be interpreted with the meaning of the
key word ("must", "should", "may", etc) used in introducing the
algorithm.</p>

<p>Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)</p>

<p id=hardwareLimitations>User agents may impose
implementation-specific limits on otherwise unconstrained inputs,
e.g. to prevent denial of service attacks, to guard against running
out of memory, or to work around platform-specific limitations.</p>

<p>When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

<p>Unless otherwise stated, string comparisons are done in a <a href=#case-sensitive>case-sensitive</a> manner.

<h4 id=dependencies><span class=secno>1.2.1 </span>Dependencies</h4>

<p>The IDL fragments in this specification must be interpreted as
required for conforming IDL fragments, as described in the Web IDL
specification. <a href=#refsWEBIDL>[WEBIDL]</a></p>

<p id=float-nan>Except where otherwise specified, if an IDL attribute that is a
floating point number type (<a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-float><code class=external>float</code></a>) is
assigned an Infinity or Not-a-Number (NaN) value, a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception must
be raised.

<p>Except where otherwise specified, if a method with an argument that is a
floating point number type (<a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-float><code class=external>float</code></a>) is
passed an Infinity or Not-a-Number (NaN) value, a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception must
be raised.

<p class=XXX>HTML5?

<h4 id=extensibility><span class=secno>1.2.2 </span>Extensibility</h4>

<p>Vendor-specific proprietary extensions to this specification are
strongly discouraged. Authors must not use such extensions, as
doing so reduces interoperability and fragments the user base,
allowing only users of specific user agents to access the content in
question.</p>

<p>If vendor-specific extensions are needed, the members should be
prefixed by vendor-specific strings to prevent clashes with future
versions of this specification. Extensions must be defined so that
the use of extensions neither contradicts nor causes the
non-conformance of functionality defined in the specification.</p>
<!-- thanks to QA Framework -->

<p>When vendor-neutral extensions to this specification are needed,
either this specification can be updated accordingly, or an
extension specification can be written that overrides the
requirements in this specification. When someone applying this
specification to their activities decides that they will recognise
the requirements of such an extension specification, it becomes an
<dfn id=other-applicable-specifications title="other applicable specifications">applicable
specification</dfn> for the purposes of conformance requirements in
this specification.</p>
<!-- http://www.w3.org/mid/17E341CD-E790-422C-9F9A-69347EE01CEB@iki.fi -->


<h3 id=case-sensitivity><span class=secno>1.3 </span>Case-sensitivity</h3>
<p>This specification defines several comparison operators for strings.
<p>Comparing two strings in a <dfn id=case-sensitive>case-sensitive</dfn> manner means comparing them exactly, codepoint for codepoint.
<p>Comparing two strings in a <dfn id=ascii-case-insensitive>ASCII case-insensitive</dfn> manner means comparing them exactly, codepoint for codepoint, except that the characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.
<p><dfn id=converted-to-uppercase title="converted to uppercase">Converting a string to uppercase</dfn> means replacing all characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).
<p><dfn id=converted-to-lowercase title="converted to lowercase">Converting a string to lowercase</dfn> means replacing all characters in the range U+0041 .. U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 .. U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).


<h3 id=common-microsyntaxes><span class=secno>1.4 </span>Common microsyntaxes</h3>
<h4 id=common-parser-idioms><span class=secno>1.4.1 </span>Common parser idioms</h4>
<p>Some of the micro-parsers described below follow the pattern of
having an <var title="">input</var> variable that holds the string
being parsed, and having a <var title="">position</var> variable
pointing at the next character to parse in <var title="">input</var>.</p>

<p>For parsers based on this pattern, a step that requires the user
agent to <dfn id=collect-a-sequence-of-characters>collect a sequence of characters</dfn> means that the
following algorithm must be run, with <var title="">characters</var>
being the set of characters that can be collected:</p>

<ol>

 <li><p>Let <var title="">input</var> and <var title="">position</var> be the same variables as those of the same
 name in the algorithm that invoked these steps.</li>

 <li><p>Let <var title="">result</var> be the empty string.</li>

 <li><p>While <var title="">position</var> doesn't point past the
 end of <var title="">input</var> and the character at <var title="">position</var> is one of the <var title="">characters</var>, append that character to the end of <var title="">result</var> and advance <var title="">position</var> to
 the next character in <var title="">input</var>.</li>

 <li><p>Return <var title="">result</var>.</li>

</ol>

<p>The step <dfn id=skip-whitespace>skip whitespace</dfn> means that the user agent
must <a href=#collect-a-sequence-of-characters>collect a sequence of characters</a> that are <a href=#space-character title="space character">space characters</a>. The collected
characters are not used.

<h4 id=space-separated-tokens><span class=secno>1.4.2 </span>Space-separated tokens</h4>
<p>A <dfn id=set-of-space-separated-tokens>set of space-separated tokens</dfn> is a string containing
zero or more words separated by one or more <a href=#space-character title="space
character">space characters</a>, where words consist of any
string of one or more characters, none of which are <a href=#space-character title="space character">space characters</a>.</p>

<p>A string containing a <a href=#set-of-space-separated-tokens>set of space-separated tokens</a>
may have leading or trailing <a href=#space-character title="space character">space
characters</a>.</p>

<div class=impl>

<p>When a user agent has to <dfn id=split-a-string-on-spaces>split a string on spaces</dfn>, it
must use the following algorithm:</p>

<ol>

 <li><p>Let <var title="">input</var> be the string being
 parsed.</li>

 <li><p>Let <var title="">position</var> be a pointer into <var title="">input</var>, initially pointing at the start of the
 string.</li>

 <li><p>Let <var title="">tokens</var> be a list of tokens,
 initially empty.</li>

 <li><p><a href=#skip-whitespace>Skip whitespace</a></li>

 <li><p>While <var title="">position</var> is not past the end of
 <var title="">input</var>:</p>

  <ol>

   <li><p><a href=#collect-a-sequence-of-characters>Collect a sequence of characters</a> that are not
   <a href=#space-character title="space character">space characters</a>.</li>

   <li><p>Add the string collected in the previous step to <var title="">tokens</var>.</li>

   <li><p><a href=#skip-whitespace>Skip whitespace</a></li>

  </ol>

 </li>

 <li><p>Return <var title="">tokens</var>.</li>

</ol>

<p>When a user agent has to <dfn id=remove-a-token-from-a-string>remove a token from a string</dfn>,
it must use the following algorithm:</p>

<ol>

 <li><p>Let <var title="">input</var> be the string being modified.

 <li><p>Let <var title="">token</var> be the token being removed. It will not
 contain any <a href=#space-character title="space character">space characters</a>.

 <li><p>Let <var title="">output</var> be the output string, initially empty.

 <li><p>Let <var title="">position</var> be a pointer into <var title="">input</var>,
 initially pointing at the start of the string.

 <li><p><i>Loop</i>: If <var title="">position</var> is beyond the end of <var title="">input</var>, abort these steps.

 <li>
  <p>If the character at <var title="">position</var> is a <a href=#space-character>space
  character</a>:

  <ol>
   <li><p>Append the character at <var title="">position</var> to the end of <var title="">output</var>.

   <li><p>Advance <var title="">position</var> so it points at the next character
   in <var title="">input</var>.

   <li><p>Return to the step labeled <i>loop</i>.
  </ol>

 <li><p>Otherwise, the character at <var title="">position</var> is the first
 character of a token. <a href=#collect-a-sequence-of-characters>Collect a sequence of characters</a> that are
 not <a href=#space-character title="space character">space characters</a>, and let that be <var title="">s</var>.

 <li>
  <p>If <var title="">s</var> is exactly equal to <var title="">token</var>, then:

  <ol>
   <li><p><a href=#skip-whitespace>Skip whitespace</a> (in <var title="">input</var>).

   <li><p>Remove any <a href=#space-character title="space character">space characters</a>
   currently at the end of <var title="">output</var>.

   <li><p>If <var title="">position</var> is not past the end of <var title="">input</var>, and <var title="">output</var> is not the empty string,
   append a single U+0020 SPACE character at the end of <var title="">output</var>.
  </ol>

 <li><p>Otherwise, append <var title="">s</var> to the end of <var title="">output</var>.

 <li><p>Return to the step labeled <i>loop</i>.</li>
</ol>

<p class=note>This causes any occurrences of the token to be
removed from the string, and any spaces that were surrounding the
token to be collapsed to a single space, except at the start and end
of the string, where such spaces are removed.</p>

</div>


<h3 id=dom-features><span class=secno>1.5 </span>DOM features</h3>
<p class=XXX>Features are ASCII case-insensitive. Empty string means any version.

<p class=XXX>Suggest how specs are to define feature strings.


<h3 id=cloning-nodes><span class=secno>1.6 </span>Cloning nodes</h3>
<p>When a UA is to <dfn id=clone>clone</dfn> a <var title="">node</var>, with a <var title="">new ownerDocument</var> and with a <var title="">clone children</var> flag, it must run the following steps:

<ol>
 <li><p>If <var title="">node</var> is a <a href=#documenttype><code>DocumentType</code></a> node, raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and abort these steps.
 <li>
  <p>Let <var title="">copy</var> be a new <a href=#node><code>Node</code></a> that implements the same interfaces as <var title="">node</var>, with <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to <var title="">new ownerDocument</var>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> and <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> attributes set to the values of the attributes on <var title="">node</var> with the same names, and other attributes set to the values of the attributes on <var title="">node</var> with the same names depending on the type of <var title="">node</var> according to the following table:</p>
  <table>
   <thead>
    <tr><th>Type of <var title="">node</var><th>Attributes
   <tbody>
    <tr><td><a href=#element><code>Element</code></a><td>&mdash;
    <tr><td><a href=#attr><code>Attr</code></a><td><a href=#dom-attr-value><code title=dom-Attr-value>value</code></a>
    <tr><td><a href=#text><code>Text</code></a><td><a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a>
    <tr><td><a href=#processinginstruction><code>ProcessingInstruction</code></a><td><a href=#dom-processinginstruction-target><code title=dom-ProcessingInstruction-target>target</code></a>, <a href=#dom-processinginstruction-data><code title=dom-ProcessingInstruction-data>data</code></a>
    <tr><td><a href=#comment><code>Comment</code></a><td><a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a>
    <tr><td><a href=#documentfragment><code>DocumentFragment</code></a><td>&mdash;
  </table>
 <li><p>If <var title="">node</var> is an <a href=#element><code>Element</code></a> node, <span class=XXX>copy its attributes</span>.
 <li><p>If the <var title="">clone children</var> flag is set, <a href=#clone>clone</a> all the children of <var title="">node</var> and append them to <var title="">copy</var>, with the same <var title="">new ownerDocument</var> and the <var title="">clone children</var> flag being set.
 <li><p>Return <var title="">copy</var>.
</ol>


<h3 id=legal-hierarchy><span class=secno>1.7 </span>Legal hierarchy</h3>
<p>A <a href=#node><code>Node</code></a> is said to have a <dfn id=legal-hierarchy-0>legal hierarchy</dfn> if all the following conditions are true:

<ul>
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node or an <a href=#attr><code>Attr</code></a> node and has no parent node.
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node and has no child <a href=#text><code>Text</code></a> nodes.
 <li><p>The <a href=#node><code>Node</code></a> is a <a href=#document><code>Document</code></a> node and has no more than one child <a href=#element><code>Element</code></a> node.
 <li><p>The <a href=#node><code>Node</code></a> is an <a href=#attr><code>Attr</code></a> node, a <a href=#text><code>Text</code></a> node, a <a href=#processinginstruction><code>ProcessingInstruction</code></a> node, a <a href=#comment><code>Comment</code></a> node, or a <a href=#documenttype><code>DocumentType</code></a> node, and has no child nodes.
</ul>

<p>Before running the steps of an algorithm of a method or attribute in this specification, the user agent must check that running the algorithm will result in a <a href=#legal-hierarchy-0>legal hierarchy</a>. If it won't, then the user agent must instead raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> exception.


<h3 id=namespaces><span class=secno>1.8 </span>Namespaces</h3>
<p>The <dfn id=html-namespace>HTML namespace</dfn> is <code title="">http://www.w3.org/1999/xhtml</code>.

<p>The <dfn id=xml-namespace>XML namespace</dfn> is <code title="">http://www.w3.org/XML/1998/namespace</code>.

<p>The <dfn id=xmlns-namespace>XMLNS namespace</dfn> is <code title="">http://www.w3.org/2000/xmlns/</code>.



<h2 id=basic-types><span class=secno>2 </span>Basic types</h2>
<p>A <dfn id=domtimestamp>DOMTimeStamp</dfn> represents a number of milliseconds.
<pre class=idl>typedef unsigned long long DOMTimeStamp;</pre>



<h2 id=exceptions><span class=secno>3 </span>Exceptions</h2>
<h3 id=exception-domexception><span class=secno>3.1 </span>Exception <a href=#domexception><code>DOMException</code></a></h3>
<pre class=idl>exception <dfn id=domexception>DOMException</dfn> {
  const unsigned short <a href=#dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</a> = 1;
  const unsigned short <a href=#dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR>DOMSTRING_SIZE_ERR</a> = 2; // historical
  const unsigned short <a href=#dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</a> = 3;
  const unsigned short <a href=#dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</a> = 4;
  const unsigned short <a href=#dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</a> = 5;
  const unsigned short <a href=#dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR>NO_DATA_ALLOWED_ERR</a> = 6;
  const unsigned short <a href=#dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR>NO_MODIFICATION_ALLOWED_ERR</a> = 7;
  const unsigned short <a href=#dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</a> = 8;
  const unsigned short <a href=#dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</a> = 9;
  const unsigned short <a href=#dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR>INUSE_ATTRIBUTE_ERR</a> = 10;
  const unsigned short <a href=#dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</a> = 11;
  const unsigned short <a href=#dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</a> = 12;
  const unsigned short <a href=#dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR>INVALID_MODIFICATION_ERR</a> = 13;
  const unsigned short <a href=#dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</a> = 14;
  const unsigned short <a href=#dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR>INVALID_ACCESS_ERR</a> = 15;
  const unsigned short <a href=#dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR>VALIDATION_ERR</a> = 16;
  const unsigned short <a href=#dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR>TYPE_MISMATCH_ERR</a> = 17;
  const unsigned short <a href=#dom-domexception-security_err title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</a> = 18;
  const unsigned short <a href=#dom-domexception-network_err title=dom-DOMException-NETWORK_ERR>NETWORK_ERR</a> = 19;
  const unsigned short <a href=#dom-domexception-abort_err title=dom-DOMException-ABORT_ERR>ABORT_ERR</a> = 20;
  const unsigned short <a href=#dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR>URL_MISMATCH_ERR</a> = 21;
  const unsigned short <a href=#dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR>QUOTA_EXCEEDED_ERR</a> = 22;
  const unsigned short <a href=#dom-domexception-timeout_err title=dom-DOMException-TIMEOUT_ERR>TIMEOUT_ERR</a> = 23;
  const unsigned short <a href=#dom-domexception-parse_err title=dom-DOMException-PARSE_ERR>PARSE_ERR</a> = 81;
  const unsigned short <a href=#dom-domexception-serialize_err title=dom-DOMException-SERIALIZE_ERR>SERIALIZE_ERR</a> = 82;
  unsigned short <a href=#dom-domexception-code title=dom-DOMException-code>code</a>;
  DOMString <a href=#dom-domexception-message title=dom-DOMException-message>message</a>;
  DOMString <a href=#dom-domexception-name title=dom-DOMException-name>name</a>;
};</pre>

<p>The <dfn id=dom-domexception-code title=dom-DOMException-code><code>code</code></dfn> exception member
must return the code for the exception, which must be one of the following:

<ol class=brief>
 <li value=1><dfn id=dom-domexception-index_size_err title=dom-DOMException-INDEX_SIZE_ERR><code>INDEX_SIZE_ERR</code></dfn></li>
 <li value=2><dfn id=dom-domexception-domstring_size_err title=dom-DOMException-DOMSTRING_SIZE_ERR><code>DOMSTRING_SIZE_ERR</code></dfn></li>
 <li value=3><dfn id=dom-domexception-hierarchy_request_err title=dom-DOMException-HIERARCHY_REQUEST_ERR><code>HIERARCHY_REQUEST_ERR</code></dfn></li>
 <li value=4><dfn id=dom-domexception-wrong_document_err title=dom-DOMException-WRONG_DOCUMENT_ERR><code>WRONG_DOCUMENT_ERR</code></dfn></li>
 <li value=5><dfn id=dom-domexception-invalid_character_err title=dom-DOMException-INVALID_CHARACTER_ERR><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></dfn></li>
 <li value=6><dfn id=dom-domexception-no_data_allowed_err title=dom-DOMException-NO_DATA_ALLOWED_ERR><code>NO_DATA_ALLOWED_ERR</code></dfn></li>
 <li value=7><dfn id=dom-domexception-no_modification_allowed_err title=dom-DOMException-NO_MODIFICATION_ALLOWED_ERR><code>NO_MODIFICATION_ALLOWED_ERR</code></dfn></li>
 <li value=8><dfn id=dom-domexception-not_found_err title=dom-DOMException-NOT_FOUND_ERR><code>NOT_FOUND_ERR</code></dfn></li>
 <li value=9><dfn id=dom-domexception-not_supported_err title=dom-DOMException-NOT_SUPPORTED_ERR><code>NOT_SUPPORTED_ERR</code></dfn></li>
 <li value=10><dfn id=dom-domexception-inuse_attribute_err title=dom-DOMException-INUSE_ATTRIBUTE_ERR><code>INUSE_ATTRIBUTE_ERR</code></dfn></li>
 <li value=11><dfn id=dom-domexception-invalid_state_err title=dom-DOMException-INVALID_STATE_ERR><code>INVALID_STATE_ERR</code></dfn></li>
 <li value=12><dfn id=dom-domexception-syntax_err title=dom-DOMException-SYNTAX_ERR><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></dfn></li>
 <li value=13><dfn id=dom-domexception-invalid_modification_err title=dom-DOMException-INVALID_MODIFICATION_ERR><code>INVALID_MODIFICATION_ERR</code></dfn></li>
 <li value=14><dfn id=dom-domexception-namespace_err title=dom-DOMException-NAMESPACE_ERR><code>NAMESPACE_ERR</code></dfn></li>
 <li value=15><dfn id=dom-domexception-invalid_access_err title=dom-DOMException-INVALID_ACCESS_ERR><code>INVALID_ACCESS_ERR</code></dfn></li>
 <li value=16><dfn id=dom-domexception-validation_err title=dom-DOMException-VALIDATION_ERR><code>VALIDATION_ERR</code></dfn></li>
 <li value=17><dfn id=dom-domexception-type_mismatch_err title=dom-DOMException-TYPE_MISMATCH_ERR><code>TYPE_MISMATCH_ERR</code></dfn></li>
 <li value=18><dfn id=dom-domexception-security_err title=dom-DOMException-SECURITY_ERR><code>SECURITY_ERR</code></dfn></li>
 <li value=19><dfn id=dom-domexception-network_err title=dom-DOMException-NETWORK_ERR><code>NETWORK_ERR</code></dfn></li>
 <li value=20><dfn id=dom-domexception-abort_err title=dom-DOMException-ABORT_ERR><code>ABORT_ERR</code></dfn></li>
 <li value=21><dfn id=dom-domexception-url_mismatch_err title=dom-DOMException-URL_MISMATCH_ERR><code>URL_MISMATCH_ERR</code></dfn></li>
 <li value=22><dfn id=dom-domexception-quota_exceeded_err title=dom-DOMException-QUOTA_EXCEEDED_ERR><code>QUOTA_EXCEEDED_ERR</code></dfn></li>
 <li value=23><dfn id=dom-domexception-timeout_err title=dom-DOMException-TIMEOUT_ERR><code>TIMEOUT_ERR</code></dfn></li>
 <li value=81><dfn id=dom-domexception-parse_err title=dom-DOMException-PARSE_ERR><code>PARSE_ERR</code></dfn></li>
 <li value=82><dfn id=dom-domexception-serialize_err title=dom-DOMException-SERIALIZE_ERR><code>SERIALIZE_ERR</code></dfn></li>
</ol>

<p class=XXX>Add a description of those exceptions?

<p>The <dfn id=dom-domexception-message title=dom-DOMException-message><code>message</code></dfn> exception
member must return a User Agent-defined human readable string describing the
exception.

<p>The <dfn id=dom-domexception-name title=dom-DOMException-name><code>name</code></dfn> exception member
must return the name of the exception constant as a string.</p>



<h2 id=nodes><span class=secno>4 </span>Nodes</h2>
<h3 id=interface-node><span class=secno>4.1 </span>Interface <a href=#node><code>Node</code></a></h3>
<pre class=idl>interface <dfn id=node>Node</dfn> {

  // NodeType
  const unsigned short <a href=#dom-node-element_node title=dom-Node-ELEMENT_NODE>ELEMENT_NODE</a> = 1;
  const unsigned short <a href=#dom-node-attribute_node title=dom-Node-ATTRIBUTE_NODE>ATTRIBUTE_NODE</a> = 2;
  const unsigned short <a href=#dom-node-text_node title=dom-Node-TEXT_NODE>TEXT_NODE</a> = 3;
  const unsigned short <a href=#dom-node-cdata_section_node title=dom-Node-CDATA_SECTION_NODE>CDATA_SECTION_NODE</a> = 4; // historical
  const unsigned short <a href=#dom-node-entity_reference_node title=dom-Node-ENTITY_REFERENCE_NODE>ENTITY_REFERENCE_NODE</a> = 5; // historical
  const unsigned short <a href=#dom-node-entity_node title=dom-Node-ENTITY_NODE>ENTITY_NODE</a> = 6; // historical
  const unsigned short <a href=#dom-node-processing_instruction_node title=dom-Node-PROCESSING_INSTRUCTION_NODE>PROCESSING_INSTRUCTION_NODE</a> = 7;
  const unsigned short <a href=#dom-node-comment_node title=dom-Node-COMMENT_NODE>COMMENT_NODE</a> = 8;
  const unsigned short <a href=#dom-node-document_node title=dom-Node-DOCUMENT_NODE>DOCUMENT_NODE</a> = 9;
  const unsigned short <a href=#dom-node-document_type_node title=dom-Node-DOCUMENT_TYPE_NODE>DOCUMENT_TYPE_NODE</a> = 10;
  const unsigned short <a href=#dom-node-document_fragment_node title=dom-Node-DOCUMENT_FRAGMENT_NODE>DOCUMENT_FRAGMENT_NODE</a> = 11;
  const unsigned short <a href=#dom-node-notation_node title=dom-Node-NOTATION_NODE>NOTATION_NODE</a> = 12; // historical

  readonly attribute DOMString <a href=#dom-node-nodename title=dom-Node-nodeName>nodeName</a>;
           attribute DOMString <a href=#dom-node-nodevalue title=dom-Node-nodeValue>nodeValue</a>;
  readonly attribute unsigned short <a href=#dom-node-nodetype title=dom-Node-nodeType>nodeType</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-parentnode title=dom-Node-parentNode>parentNode</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-node-parentelement title=dom-Node-parentElement>parentElement</a>;
  readonly attribute <a href=#nodelist>NodeList</a> <a href=#dom-node-childnodes title=dom-Node-childNodes>childNodes</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-firstchild title=dom-Node-firstChild>firstChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-lastchild title=dom-Node-lastChild>lastChild</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-previoussibling title=dom-Node-previousSibling>previousSibling</a>;
  readonly attribute <a href=#node>Node</a> <a href=#dom-node-nextsibling title=dom-Node-nextSibling>nextSibling</a>;
  readonly attribute <a href=#namednodemap>NamedNodeMap</a> <a href=#dom-node-attributes title=dom-Node-attributes>attributes</a>;
  readonly attribute <a href=#document>Document</a> <a href=#dom-node-ownerdocument title=dom-Node-ownerDocument>ownerDocument</a>;
  <a href=#node>Node</a> <a href=#dom-node-insertbefore title=dom-Node-insertBefore>insertBefore</a>(in <a href=#node>Node</a> newChild, in <a href=#node>Node</a> refChild);
  <a href=#node>Node</a> <a href=#dom-node-replacechild title=dom-Node-replaceChild>replaceChild</a>(in <a href=#node>Node</a> newChild, in <a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-removechild title=dom-Node-removeChild>removeChild</a>(in <a href=#node>Node</a> oldChild);
  <a href=#node>Node</a> <a href=#dom-node-appendchild title=dom-Node-appendChild>appendChild</a>(in <a href=#node>Node</a> newChild);
  boolean <a href=#dom-node-haschildnodes title=dom-Node-hasChildNodes>hasChildNodes</a>();
  <a href=#node>Node</a> <a href=#dom-node-clonenode title=dom-Node-cloneNode>cloneNode</a>(in boolean deep);<!--
  void normalize();-->
  boolean <a href=#dom-node-issupported title=dom-Node-isSupported>isSupported</a>(in DOMString feature, in DOMString version);
  readonly attribute DOMString <a href=#dom-node-namespaceuri title=dom-Node-namespaceURI>namespaceURI</a>;
  readonly attribute DOMString <a href=#dom-node-prefix title=dom-Node-prefix>prefix</a>;
  readonly attribute DOMString <a href=#dom-node-localname title=dom-Node-localName>localName</a>;
  boolean <a href=#dom-node-hasattributes title=dom-Node-hasAttributes>hasAttributes</a>();
  readonly attribute DOMString <a href=#dom-node-baseuri title=dom-Node-baseURI>baseURI</a>;

  // DocumentPosition
  const unsigned short <a href=#dom-node-document_position_disconnected title=dom-Node-DOCUMENT_POSITION_DISCONNECTED>DOCUMENT_POSITION_DISCONNECTED</a> = 0x01;
  const unsigned short <a href=#dom-node-document_position_preceding title=dom-Node-DOCUMENT_POSITION_PRECEDING>DOCUMENT_POSITION_PRECEDING</a> = 0x02;
  const unsigned short <a href=#dom-node-document_position_following title=dom-Node-DOCUMENT_POSITION_FOLLOWING>DOCUMENT_POSITION_FOLLOWING</a> = 0x04;
  const unsigned short <a href=#dom-node-document_position_contains title=dom-Node-DOCUMENT_POSITION_CONTAINS>DOCUMENT_POSITION_CONTAINS</a> = 0x08;
  const unsigned short <a href=#dom-node-document_position_contained_by title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY>DOCUMENT_POSITION_CONTAINED_BY</a> = 0x10;
  const unsigned short <a href=#dom-node-document_position_implementation_specific title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</a> = 0x20;

  unsigned short <a href=#dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition>compareDocumentPosition</a>(in <a href=#node>Node</a> other);

  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-node-textcontent title=dom-Node-textContent>textContent</a>;
  boolean <a href=#dom-node-issamenode title=dom-Node-isSameNode>isSameNode</a>(in <a href=#node>Node</a> other);
  DOMString <a href=#dom-node-lookupprefix title=dom-Node-lookupPrefix>lookupPrefix</a>(in DOMString namespaceURI);
  boolean <a href=#dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace>isDefaultNamespace</a>(in DOMString namespaceURI);
  DOMString <a href=#dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI>lookupNamespaceURI</a>(in DOMString prefix);
  boolean <a href=#dom-node-isequalnode title=dom-Node-isEqualNode>isEqualNode</a>(in <a href=#node>Node</a> arg);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);
  DOMUserData setUserData(in DOMString key, in DOMUserData data, in UserDataHandler handler);
  DOMUserData getUserData(in DOMString key);-->
};</pre>

<ol>
 <li value=1><dfn id=dom-node-element_node title=dom-Node-ELEMENT_NODE><code>ELEMENT_NODE</code></dfn>

 <li value=2><dfn id=dom-node-attribute_node title=dom-Node-ATTRIBUTE_NODE><code>ATTRIBUTE_NODE</code></dfn>

 <li value=3><dfn id=dom-node-text_node title=dom-Node-TEXT_NODE><code>TEXT_NODE</code></dfn>

 <li value=4><dfn id=dom-node-cdata_section_node title=dom-Node-CDATA_SECTION_NODE><code>CDATA_SECTION_NODE</code></dfn>

 <li value=5><dfn id=dom-node-entity_reference_node title=dom-Node-ENTITY_REFERENCE_NODE><code>ENTITY_REFERENCE_NODE</code></dfn>

 <li value=6><dfn id=dom-node-entity_node title=dom-Node-ENTITY_NODE><code>ENTITY_NODE</code></dfn>

 <li value=7><dfn id=dom-node-processing_instruction_node title=dom-Node-PROCESSING_INSTRUCTION_NODE><code>PROCESSING_INSTRUCTION_NODE</code></dfn>

 <li value=8><dfn id=dom-node-comment_node title=dom-Node-COMMENT_NODE><code>COMMENT_NODE</code></dfn>

 <li value=9><dfn id=dom-node-document_node title=dom-Node-DOCUMENT_NODE><code>DOCUMENT_NODE</code></dfn>

 <li value=10><dfn id=dom-node-document_type_node title=dom-Node-DOCUMENT_TYPE_NODE><code>DOCUMENT_TYPE_NODE</code></dfn>

 <li value=11><dfn id=dom-node-document_fragment_node title=dom-Node-DOCUMENT_FRAGMENT_NODE><code>DOCUMENT_FRAGMENT_NODE</code></dfn>

 <li value=12><dfn id=dom-node-notation_node title=dom-Node-NOTATION_NODE><code>NOTATION_NODE</code></dfn>
</ol>


<p>The <dfn id=dom-node-nodename title=dom-Node-nodeName><code>nodeName</code></dfn>, <dfn id=dom-node-nodevalue title=dom-Node-nodeValue><code>nodeValue</code></dfn> and <dfn id=dom-node-nodetype title=dom-Node-nodeType><code>nodeType</code></dfn> attributes must, on getting, return what is in the second, third and forth column, respectively, if the node also implements the interface in the first column on the same row in the following table:

<table>
<thead><tr><th>Interface<th><a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a><th><a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a><th><a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a>
<tbody>
<tr><td><a href=#element><code>Element</code></a><td>same as <a href=#dom-element-tagname><code title=dom-Element-tagName>tagName</code></a><td>null<td>1
<tr><td><a href=#attr><code>Attr</code></a><td>same as <a href=#dom-attr-name><code title=dom-Attr-name>name</code></a><td>same as <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a><td>2
<tr><td><a href=#text><code>Text</code></a><td>"<code title="">#text</code>"<td>same as <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a><td>3
<tr><td><a href=#processinginstruction><code>ProcessingInstruction</code></a><td>same as <a href=#dom-processinginstruction-target><code title=dom-ProcessingInstruction-target>target</code></a><td>same as <a href=#dom-processinginstruction-data><code title=dom-ProcessingInstruction-data>data</code></a><td>7
<tr><td><a href=#comment><code>Comment</code></a><td>"<code title="">#comment</code>"<td>same as <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a><td>8
<tr><td><a href=#document><code>Document</code></a><td>"<code title="">#document</code>"<td>null<td>9
<tr><td><a href=#documenttype><code>DocumentType</code></a><td>same as <a href=#dom-documenttype-name><code title=dom-DocumentType-name>name</code></a><td>null<td>10
<tr><td><a href=#documentfragment><code>DocumentFragment</code></a><td>"<code title="">#document-fragment</code>"<td>null<td>11
</table>

<p>The <dfn id=dom-node-parentnode title=dom-Node-parentNode><code>parentNode</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a parent node, return
 null and abort these steps.

 <li><p>Return the parent node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-parentelement title=dom-Node-parentElement><code>parentElement</code></dfn> attribute must, on getting, return the parent node of the <a href=#context-node>context node</a> if there is a parent and it is an element, or null otherwise.

<p>The <dfn id=dom-node-childnodes title=dom-Node-childNodes><code>childNodes</code></dfn> attribute must, on getting, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a> matching only child nodes.

<p>The <dfn id=dom-node-firstchild title=dom-Node-firstChild><code>firstChild</code></dfn> attribute must, on getting, return the first child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-lastchild title=dom-Node-lastChild><code>lastChild</code></dfn> attribute must, on getting, return the last child node of the <a href=#context-node>context node</a>, or null if there is none.

<p>The <dfn id=dom-node-previoussibling title=dom-Node-previousSibling><code>previousSibling</code></dfn>
attribute must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a previous sibling node,
 return null and abort these steps.

 <li><p>Return the previous sibling node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-nextsibling title=dom-Node-nextSibling><code>nextSibling</code></dfn> attribute
must, on getting, run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, return
 null and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> doesn't have a next sibling node,
 return null and abort these steps.

 <li><p>Return the next sibling node of the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-node-attributes title=dom-Node-attributes><code>attributes</code></dfn> attribute must, on getting, return a <a href=#namednodemap><code>NamedNodeMap</code></a> of all the <a href=#attr><code>Attr</code></a> nodes associated with the node of the <a href=#context-node>context node</a>, if it is an <a href=#element><code>Element</code></a> node, or null otherwise.

<p>The <dfn id=dom-node-ownerdocument title=dom-Node-ownerDocument><code>ownerDocument</code></dfn> attribute must, on getting, return the <a href=#document><code>Document</code></a> node that the <a href=#context-node>context node</a> is associated with, or null if there is none.

<p>The <dfn id=dom-node-insertbefore title=dom-Node-insertBefore><code>insertBefore(<var title="">newChild</var>, <var title="">refChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, then
 raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798 -->

 <li><p>If <var title="">newChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var title="">refChild</var> is not null and is not a child of the
 <a href=#context-node>context node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a> exception and abort
 these steps. <!-- Do not adopt. -->

 <li><p>If <var title="">newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var title="">newChild</var> as its argument.

 <!-- no security check -->
 <li><p>If <var title="">newChild</var> is a <a href=#documentfragment><code>DocumentFragment</code></a> node,
 then while <var title="">newChild</var>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> is not null, call <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a> on the <a href=#context-node>context
 node</a> with <var title="">newChild</var>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> as first argument and <var title="">refChild</var> as second argument.

 <li><p>Otherwise, if <var title="">refChild</var> is null, append <var title="">newChild</var> to the <a href=#context-node>context node</a>.

 <li><p>Otherwise insert <var title="">newChild</var> in the <a href=#context-node>context
 node</a> as the previous sibling of <var title="">refChild</var>.

 <li><p>Return <var title="">newChild</var>.
</ol>

<p>The <dfn id=dom-node-replacechild title=dom-Node-replaceChild><code>replaceChild(<var title="">newChild</var>, <var title="">oldChild</var>)</code></dfn> method must run
the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, then
 raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798 -->

 <li><p>If either <var title="">newChild</var> or <var title="">oldChild</var> is
 null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var title="">newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var title="">newChild</var> as its argument.

 <li><p>If <var title="">oldChild</var> is not a child of the <a href=#context-node>context
 node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a>
 exception and abort these steps.

 <!-- no security check -->
 <li><p>Let <var title="">refChild</var> be <var title="">oldChild</var>'s
 <a href=#dom-node-nextsibling><code title=dom-Node-nextSibling>nextSibling</code></a>.

 <li><p>Remove <var title="">oldChild</var> from <a href=#context-node>context node</a>.

 <li><p>Call <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a> on the
 <a href=#context-node>context node</a> with <var title="">newChild</var> and <var title="">refChild</var> as arguments, respectively.

 <li><p>Return <var title="">newChild</var>.
</ol>

<p>The <dfn id=dom-node-removechild title=dom-Node-removeChild><code>removeChild(<var title="">oldChild</var>)</code></dfn> method must run the following steps:

<ol>
 <!-- Attr nodes are okay -->
 <li><p>If <var title="">oldChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var title="">oldChild</var> is not a child of the <a href=#context-node>context
 node</a>, then raise a <a href=#dom-domexception-not_found_err><code title=dom-DOMException-NOT_FOUND_ERR>NOT_FOUND_ERR</code></a> exception and abort
 these steps.
 <!-- Including other documents. -->

 <li><p>Remove <var title="">oldChild</var> from <a href=#context-node>context node</a>.

 <li><p>Return <var title="">oldChild</var>.
</ol>

<p>The <dfn id=dom-node-appendchild title=dom-Node-appendChild><code>appendChild(<var title="">newChild</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#attr><code>Attr</code></a> node, then
 raise a <a href=#dom-domexception-hierarchy_request_err><code title=dom-DOMException-HIERARCHY_REQUEST_ERR>HIERARCHY_REQUEST_ERR</code></a> and
 abort these steps. <!-- See Mozilla bug 547798 -->

 <li><p>If <var title="">newChild</var> is null, then raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <li><p>If <var title="">newChild</var>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not equal to the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, call the
 <a href=#context-node>context node</a>'s
 <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>
 <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> method with
 <var title="">newChild</var> as its argument.

 <!-- no security check -->
 <li><p>Append <var title="">newChild</var> to the <a href=#context-node>context node</a>.

 <li><p>Return <var title="">newChild</var>.
</ol>

<p>The <dfn id=dom-node-haschildnodes title=dom-Node-hasChildNodes><code>hasChildNodes()</code></dfn> method must return false if the <a href=#context-node>context node</a>'s <a href=#dom-node-firstchild><code title=dom-Node-firstChild>firstChild</code></a> is null, and true otherwise.

<p>The <dfn id=dom-node-clonenode title=dom-Node-cloneNode><code>cloneNode(<var title="">deep</var>)</code></dfn> method must return a <a href=#clone>clone</a> of the
<a href=#context-node>context node</a>, with <var title="">new ownerDocument</var> being the
<a href=#context-node>context node</a>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a>, and the <var title="">clone
children</var> flag set if <var title="">deep</var> is true.

<p>The <dfn id=dom-node-issupported title=dom-Node-isSupported><code>isSupported(<var title="">feature</var>, <var title="">version</var>)</code></dfn> method must return true if the UA supports the given feature <var title="">feature</var> of version <var title="">version</var> on the <a href=#context-node>context node</a>, and false otherwise.

<p>The <dfn id=dom-node-namespaceuri title=dom-Node-namespaceURI><code>namespaceURI</code></dfn> attribute, on getting, must return the namespace that is associated with the node, if there is one and it's not the empty string, or null otherwise.

<p>The <dfn id=dom-node-prefix title=dom-Node-prefix><code>prefix</code></dfn> attribute, on getting, must return the prefix that is associated with the node, if there is one and it's not the empty string, or null otherwise. <!--On setting, it must run the following steps:

<ol>
 <li><p>Let <var title>prefix</var> be the value being assigned.
 <li>
  <p>If <var title>prefix</var> is not null, run the following substeps:
  <ol>
   <li><p>If <var title>prefix</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
   <li><p>If <var title>prefix</var> doesn't match the <code
   data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML, raise a
   <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and
   abort these steps.
  </ol>
 <li><p class=XXX>Actually this doesn't match any browser. Let's try to drop it instead.
</ol>-->

<p>The <dfn id=dom-node-localname title=dom-Node-localName><code>localName</code></dfn> attribute, on getting, must return the local name that is associated with the node.

<p>The <dfn id=dom-node-hasattributes title=dom-Node-hasAttributes><code>hasAttributes()</code></dfn>
method must return whether there are any attributes associated with the
<a href=#context-node>context node</a>, if it is an <a href=#element><code>Element</code></a> node, and false
otherwise.

<p>The <dfn id=dom-node-baseuri title=dom-Node-baseURI><code>baseURI</code></dfn> attribute must <span class=XXX>...</span>

<ol>
 <li value=1><dfn id=dom-node-document_position_disconnected title=dom-Node-DOCUMENT_POSITION_DISCONNECTED><code>DOCUMENT_POSITION_DISCONNECTED</code></dfn>

 <li value=2><dfn id=dom-node-document_position_preceding title=dom-Node-DOCUMENT_POSITION_PRECEDING><code>DOCUMENT_POSITION_PRECEDING</code></dfn>

 <li value=4><dfn id=dom-node-document_position_following title=dom-Node-DOCUMENT_POSITION_FOLLOWING><code>DOCUMENT_POSITION_FOLLOWING</code></dfn>

 <li value=8><dfn id=dom-node-document_position_contains title=dom-Node-DOCUMENT_POSITION_CONTAINS><code>DOCUMENT_POSITION_CONTAINS</code></dfn>

 <li value=16><dfn id=dom-node-document_position_contained_by title=dom-Node-DOCUMENT_POSITION_CONTAINED_BY><code>DOCUMENT_POSITION_CONTAINED_BY</code></dfn>

 <li value=32><dfn id=dom-node-document_position_implementation_specific title=dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC><code>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code></dfn>
</ol>

<p>The <dfn id=dom-node-comparedocumentposition title=dom-Node-compareDocumentPosition><code>compareDocumentPosition(<var title="">other</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-textcontent title=dom-Node-textContent><code>textContent</code></dfn> attribute, on getting, must return a concatenation of the <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> of all the descendant <a href=#text><code>Text</code></a> nodes of the <a href=#context-node>context node</a>, in <a href=#tree-order>tree order</a>. On setting, it must run the following steps:

<ol>
 <li><p>Remove all the child nodes of the <a href=#context-node>context node</a>.
 <li><p>Let <var title="">data</var> be the value being assigned.
 <li><p>If <var title="">data</var> is not the empty string, append a new <a href=#text><code>Text</code></a> node to the <a href=#context-node>context node</a> whose <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> is set to <var title="">data</var>.
</ol>

<p class=XXX><a href=http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com>http://www.w3.org/mid/c9e12660808271343v58990698gabac29d2123a82ce@mail.gmail.com</a>

<p>The <dfn id=dom-node-issamenode title=dom-Node-isSameNode><code>isSameNode(<var title="">other</var>)</code></dfn> method must return true if <var title="">other</var> is a reference to the same object as the <a href=#context-node>context
node</a>, and false otherwise.

<p>The <dfn id=dom-node-lookupprefix title=dom-Node-lookupPrefix><code>lookupPrefix(<var title="">namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-isdefaultnamespace title=dom-Node-isDefaultNamespace><code>isDefaultNamespace(<var title="">namespaceURI</var>)</code></dfn> method must <span class=XXX>...</span>

<p>The <dfn id=dom-node-lookupnamespaceuri title=dom-Node-lookupNamespaceURI><code>lookupNamespaceURI(<var title="">prefix</var>)</code></dfn> method must <span class=XXX>...</span>

<p class=XXX>clarify lookupNamespaceURI <a href=http://www.w3.org/mid/4878DFC6.40401@lachy.id.au>http://www.w3.org/mid/4878DFC6.40401@lachy.id.au</a>; lookupNamespaceURI, isDefaultNamespace <a href="http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126">http://html5.org/tools/web-apps-tracker?from=2125&amp;to=2126</a>

<p>The <dfn id=dom-node-isequalnode title=dom-Node-isEqualNode><code>isEqualNode(<var title="">arg</var>)</code></dfn> method must return true if all of the following
conditions are true, and must otherwise return false:

<ul>
 <li><p><var title="">arg</var> is not null.
 <li><p><var title="">arg</var>'s <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodetype><code title=dom-Node-nodeType>nodeType</code></a>.
 <li><p><var title="">arg</var>'s <a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodename><code title=dom-Node-nodeName>nodeName</code></a>.
 <li><p><var title="">arg</var>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>.
 <li><p><var title="">arg</var>'s <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a>.
 <li><p><var title="">arg</var>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>.
 <li><p><var title="">arg</var>'s <a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-nodevalue><code title=dom-Node-nodeValue>nodeValue</code></a>.

 <li><p>Either <var title="">arg</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> and the <a href=#context-node>context node</a>'s
 <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> are both null or a bijection
 exists between the set of <var title="">arg</var>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> and the set of the <a href=#context-node>context
 node</a>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> so that every
 <a href=#attr><code>Attr</code></a> node in the former is mapped to an <a href=#attr><code>Attr</code></a> node in
 the latter for which calling <a href=#dom-node-isequalnode><code title=dom-Node-isEqualNode>isEqualNode</code></a> on the first <a href=#attr><code>Attr</code></a>
 node with the second <a href=#attr><code>Attr</code></a> node as its argument returns true.

 <li><p><var title="">arg</var>'s <a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a>' <a href=#dom-nodelist-length><code title=dom-NodeList-length>length</code></a> is the same as the <a href=#context-node>context node</a>'s <a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a>' <a href=#dom-nodelist-length><code title=dom-NodeList-length>length</code></a>.
 <li><p>Calling <a href=#dom-node-isequalnode><code title=dom-Node-isEqualNode>isEqualNode</code></a> on each child node of the <a href=#context-node>context node</a>, with the child node of the same index in <var title="">arg</var> as argument returns true for every child node.
</ul>


<h3 id=interface-documentfragment><span class=secno>4.2 </span>Interface <a href=#documentfragment><code>DocumentFragment</code></a></h3>
<pre class=idl>interface <dfn id=documentfragment>DocumentFragment</dfn> : <a href=#node>Node</a> {
};</pre>


<h3 id=interface-document><span class=secno>4.3 </span>Interface <a href=#document><code>Document</code></a></h3>
<pre class=idl>interface <dfn id=document>Document</dfn> : <a href=#node>Node</a> {
  readonly attribute <a href=#documenttype>DocumentType</a> <a href=#dom-document-doctype title=dom-Document-doctype>doctype</a>;
  readonly attribute <a href=#domimplementation>DOMImplementation</a> <a href=#dom-document-implementation title=dom-Document-implementation>implementation</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-document-documentelement title=dom-Document-documentElement>documentElement</a>;
  readonly attribute <a class=external href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#windowproxy>WindowProxy</a> <a href=#dom-document-defaultview title=dom-Document-defaultView>defaultView</a>;

  <a href=#element>Element</a> <a href=#dom-document-createelement title=dom-Document-createElement>createElement</a>([TreatNullAs=EmptyString] in DOMString tagName);
  <a href=#element>Element</a> <a href=#dom-document-createelementns title=dom-Document-createElementNS>createElementNS</a>(in DOMString namespaceURI, in DOMString qualifiedName);
  <a href=#documentfragment>DocumentFragment</a> createDocumentFragment();
  <a href=#text>Text</a> <a href=#dom-document-createtextnode title=dom-Document-createTextNode>createTextNode</a>(in DOMString data);
  <a href=#comment>Comment</a> <a href=#dom-document-createcomment title=dom-Document-createComment>createComment</a>(in DOMString data);
  <a href=#processinginstruction>ProcessingInstruction</a> <a href=#dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction>createProcessingInstruction</a>(in DOMString target, in DOMString data);<!--
  CDATASection createCDATASection(in DOMString data);
  EntityReference createEntityReference(in DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttribute>createAttribute</span>(in DOMString name);
  <span>Attr</span> <span title=dom-Document-createAttributeNS>createAttributeNS</span>(in DOMString namespaceURI, in DOMString qualifiedName);
    If adding this, search for [createAttribute]-->

  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagname title=dom-Document-getElementsByTagName>getElementsByTagName</a>(in DOMString tagname);
  <a href=#nodelist>NodeList</a> <a href=#dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS>getElementsByTagNameNS</a>(in DOMString namespaceURI, in DOMString localName);
  <a href=#element>Element</a> <a href=#dom-document-getelementbyid title=dom-Document-getElementById>getElementById</a>(in DOMString elementId);

  <a href=#node>Node</a> <a href=#dom-document-importnode title=dom-Document-importNode>importNode</a>(in <a href=#node>Node</a> importedNode, in boolean deep);
  <a href=#node>Node</a> <a href=#dom-document-adoptnode title=dom-Document-adoptNode>adoptNode</a>(in <a href=#node>Node</a> source);

  readonly attribute DOMString <a href=#dom-document-inputencoding title=dom-Document-inputEncoding>inputEncoding</a>;
           attribute DOMString <a href=#dom-document-documenturi title=dom-Document-documentURI>documentURI</a>;<!--
  readonly attribute DOMString xmlEncoding;
           attribute boolean xmlStandalone;
           attribute DOMString <span title=dom-Document-xmlVersion>xmlVersion</span>;
           attribute boolean strictErrorChecking;
  readonly attribute DOMConfiguration domConfig;
  void normalizeDocument();
  Node renameNode(in Node n, in DOMString namespaceURI, in DOMString qualifiedName);-->
};
<dfn id=xmldocument>XMLDocument</dfn> : <a href=#document>Document</a> {};</pre>

<p>A <a href=#document><code>Document</code></a> node is assumed to be an <dfn id=xml-document>XML document</dfn>
unless they are flagged as being an <dfn id=html-document>HTML document</dfn> when they are
created. Whether a document is an <a href=#html-document>HTML document</a> or an <a href=#xml-document>XML
document</a> affects the behavior of certain APIs.

<dl class=domintro>
 <dt><a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external title=dom-Window-document>document</var></a> .
     <a href=#dom-document-defaultview><code title=dom-Document-defaultView>defaultView</code></a>
 <dd><p>Returns the <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#window><code class=external>Window</code></a> object of the
        <a class=external href=http://www.whatwg.org/html/#active-document>active document</a>.
</dl>

<p>The <dfn id=dom-document-doctype title=dom-Document-doctype><code>doctype</code></dfn> attribute must return the first child of the <a href=#document><code>Document</code></a> node that is a <a href=#documenttype><code>DocumentType</code></a> node, if there is one, or null otherwise.
<p class=note>In both HTML and XML there will only ever be one <a href=#documenttype><code>DocumentType</code></a> node descendant of the <a href=#document><code>Document</code></a> node. <a href=#refsHTML>[HTML]</a> <a href=#refsXML>[XML]</a>

<p>The <dfn id=dom-document-implementation title=dom-Document-implementation><code>implementation</code></dfn> attribute must return the <a href=#domimplementation><code>DOMImplementation</code></a> object that is associated with the <a href=#document><code>Document</code></a> node.

<p>The <dfn id=dom-document-documentelement title=dom-Document-documentElement><code>documentElement</code></dfn> attribute must return the first child of the <a href=#document><code>Document</code></a> node that is an <a href=#element><code>Element</code></a> node, if there is one, or null otherwise.

<p>The <dfn id=dom-document-defaultview title=dom-Document-defaultView><code>defaultView</code></dfn>
attribute must return the <a href=#context-node>context node</a>'s <a class=external href=http://www.whatwg.org/html/#browsing-context>browsing context</a>'s <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#windowproxy><code class=external>WindowProxy</code></a> object.</p>

<hr>

<p>The <dfn id=dom-document-createelement title=dom-Document-createElement><code>createElement(<var title="">tagName</var>)</code></dfn> method must run the following steps:</p>

<p class=XXX><code title="">createElement("&lt;div class='test'&gt;")</code>?
<!-- ie allows createElement("<div class='test'>") and firefox in quirks mode allows createElement("<div>") -->
<!--
<zcorpan> i don't like dom's error checking at all
<zcorpan> it checks for some things but not others and the things it checks sometimes don't match what xml requires anyway
<zcorpan> and you can smuggle in stuff from other documents without checking anyway
<zcorpan> the questions are
<zcorpan> is there a reason why we can't drop all error checking
<zcorpan> and
<zcorpan> if we do, do we need to make createElement('<div>') or createElement('<div foo="bar">') do something magic
<hsivonen> zcorpan: does IE implement full attribute tokenization for those?
<zcorpan> hsivonen: afaict yeah
<zcorpan> hsivonen: though i haven't tested much
<zcorpan> document.createElement('<x y z=a x x y u>'); works as you'd expect
<Philip`> Seems to trigger iff the first character is '<'
<hsivonen> what if the string tokenizes to multiple tags?
<hsivonen> what if it tokenizes to and end tag?
<hsivonen> what about "<>"?
<annevk> I'd rather throw an error if the first char is "<" than implementing some small start tag tokenizer just for createElement
<hsivonen> or something else that doesn't tokenize to a start tag
<Philip`> It ignores everything after the first '>'
<hsivonen> annevk: presumably, one could reuse the real tokenizer
<Philip`> It seems to throw an error if it starts with '</'
<Philip`> (but if e.g. it starts with '<!' then it'll just make an element whose name starts with '!')
<Philip`>	Out of n pages for an unknown value of n, I see one that does document.createElement('<iframe frameborder="0">')
<Philip`>	(http://www.movingideas.org/content/en/issue_items/education.htm)
<Philip`>	(n = tens of thousands, I think)
-->
<!-- As far as I can tell, this isn't needed for web compatibility. Neither WebKit nor Opera support it, and Firefox's implementation still throws on the majority of cases in the wild, as almost all cases in the wild take advantage of the fact that IE allows attributes. -->
<!-- http://philip.html5.org/data/createelement-with-angle-bracket.txt -->
<ol>
 <li><p>If <var title="">tagName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> is an <a href=#html-document>HTML document</a>, let
 <var title="">localName</var> be <var title="">tagName</var>, <a href=#converted-to-lowercase>converted to
 lowercase</a>. Otherwise, let <var title="">localName</var> be <var title="">tagName</var>.

 <li><p>Return a new <a href=#element><code>Element</code></a> node with no attributes, <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> set to the <a href=#html-namespace>HTML
 namespace</a>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> set to null, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> set to <var title="">localName</var>,
 and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the
 <a href=#context-node>context node</a>.
</ol>
<!-- this is very different from DOM3 -->
<p class=note>No check is performed that the local name will match the <a href=http://www.w3.org/TR/xml-names/#NT-NCName><code class=external>NCName</code></a> production in Namespaces in XML.

<p>The <dfn id=dom-document-createelementns title=dom-Document-createElementNS><code>createElementNS(<var title="">namespaceURI</var>, <var title="">qualifiedName</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.
 <li><p>If <var title="">qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml-names/#NT-QName><code class=external>QName</code></a> production in Namespaces in XML, raise a
 <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and
 abort these steps.
 <li><p>If <var title="">qualifiedName</var> contains a U+003E COLON (":") character, then split the string on the colon and let <var title="">prefix</var> be the part before the colon and <var title="">localName</var> the part after the colon. Otherwise, let <var title="">prefix</var> be null and <var title="">localName</var> be <var title="">qualifiedName</var>.
 <li><p>If <var title="">prefix</var> is not null and <var title="">namespaceURI</var> is an empty string, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var title="">prefix</var> is "xml" and <var title="">namespaceURI</var> is not the <a href=#xml-namespace>XML namespace</a>, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var title="">qualifiedName</var> or <var title="">prefix</var> is "xmlns" and <var title="">namespaceURI</var> is not the <a href=#xmlns-namespace>XMLNS namespace</a>, raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>If <var title="">namespaceURI</var> is the <a href=#xmlns-namespace>XMLNS namespace</a> and neither <var title="">qualifiedName</var> nor <var title="">prefix</var> is "xmlns", raise a <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and abort these steps.
 <li><p>Return a new <a href=#element><code>Element</code></a> node with no attributes, <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> set to <var title="">namespaceURI</var>, <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> set to <var title="">prefix</var>, <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> set to <var title="">localName</var>, and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
</ol>

<p>The <dfn id=dom-document-createdocumentfragment title=dom-Document-createDocumentFragment><code>createDocumentFragment()</code></dfn> method must return a new <a href=#documentfragment><code>DocumentFragment</code></a> node with its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.

<p>The <dfn id=dom-document-createtextnode title=dom-Document-createTextNode><code>createTextNode(<var title="">data</var>)</code></dfn> method must return a new <a href=#text><code>Text</code></a> node with its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute set to <var title="">data</var> and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the text node contains characters that
match the <a href=http://www.w3.org/TR/xml/#NT-Char><code class=external>Char</code></a> production in XML.

<p>The <dfn id=dom-document-createcomment title=dom-Document-createComment><code>createComment(<var title="">data</var>)</code></dfn> method must return a new <a href=#comment><code>Comment</code></a> node with its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute set to <var title="">data</var> and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
<p class=note>No check is performed that the comment contains characters that
match the <a href=http://www.w3.org/TR/xml/#NT-Char><code class=external>Char</code></a> production in XML or that it
contains two adjacent hyphens or ends with a hyphen.

<p>The <dfn id=dom-document-createprocessinginstruction title=dom-Document-createProcessingInstruction><code>createProcessingInstruction(<var title="">target</var>, <var title="">data</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#html-document>HTML document</a>, raise
 a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a>
 exception and abort these steps.

 <li><p>If <var title="">target</var> doesn't match the <!--<code
 data-anolis-spec=xml>PITarget</code>--> <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a>
 production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps. <!-- DOM3 didn't check for "xml" -->

 <li><p>If <var title="">data</var> contains the string "<code title="">?&gt;</code>",
 raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps. <!-- Gecko does this. -->

 <!--<li><p>If <var title>target</var> contains a U+003A COLON (":") character, raise a <code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->

 <li><p>Return a new <a href=#processinginstruction><code>ProcessingInstruction</code></a> node with its <a href=#dom-processinginstruction-target><code title=dom-ProcessingInstruction-target>target</code></a> attribute set to <var title="">target</var>, <a href=#dom-processinginstruction-data><code title=dom-ProcessingInstruction-data>data</code></a> attribute set to <var title="">data</var> and <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to the <a href=#context-node>context node</a>.
</ol>

<p class=note>No check is performed that the processing instruction target
contains "xml" or the colon, or that the data contains characters that match the
<a href=http://www.w3.org/TR/xml/#NT-Char><code class=external>Char</code></a> production in XML.</p>

<!--
[createAttribute]
<p>The <dfn title=dom-Document-createAttribute><code>createAttribute(<var title>name</var>)</code></dfn> method must run the following steps:</p>
<ol>
 <li><p>If <var title>name</var> doesn't match the <code data-anolis-spec=xml>Name</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.
 <li><p>Return a new <code>Attr</code> node with its <code title=dom-Node-namespaceURI>namespaceURI</code> set to null, <code title=dom-Node-prefix>prefix</code> set to null, <code title=dom-Node-localName>localName</code> set to <var title>name</var>, and <code title=dom-Node-ownerDocument>ownerDocument</code> set to the <span>context node</span>.
</ol>-->
<!-- this is different from DOM3 -->
<!--<p class=note>No check is performed that the local name will match the <code
data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML.-->

<hr>

<p>The <dfn id=dom-document-getelementsbytagname title=dom-Document-getElementsByTagName><code>getElementsByTagName(<var title="">localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If <var title="">localName</var> is just a U+002A ASTERISK ("*") character,
 return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose
 filter matches only <a href=#element><code>Element</code></a> nodes.

 <li><p>Otherwise, if the <a href=#context-node>context node</a> is an <a href=#html-document>HTML
 document</a>, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context
 node</a>, whose filter matches only the following nodes:
  <ul>
   <li><a href=#element><code>Element</code></a> nodes in the <a href=#html-namespace>HTML namespace</a> that have a
   <a href=#dom-node-localname><code title=dom-node-localName>localName</code></a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to <var title="">localName</var>, <a href=#converted-to-lowercase>converted to lowercase</a>.

   <li><a href=#element><code>Element</code></a> nodes, <em>not</em> in the <a href=#html-namespace>HTML
   namespace</a>, that have a <a href=#dom-node-localname><code title=dom-node-localName>localName</code></a>
   <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to <var title="">localName</var>.
  </ul>

 <li><p>Otherwise, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context
 node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes that have a
 <a href=#dom-node-localname><code title=dom-node-localName>localName</code></a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equal to <var title="">localName</var>.
</ol>

<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.

<p class=note>Thus, in an <a href=#html-document>HTML document</a>, <code title="">document.getElementsByTagName("FOO")</code> will match <code title="">FOO</code> elements that aren't in the <a href=#html-namespace>HTML namespace</a>, and
<code title="">foo</code> elements that are in the <a href=#html-namespace>HTML namespace</a>, but
not <code title="">FOO</code> elements that are in the <a href=#html-namespace>HTML namespace</a>.

<p>The <dfn id=dom-document-getelementsbytagnamens title=dom-Document-getElementsByTagNameNS><code>getElementsByTagNameNS(<var title="">namespaceURI</var>, <var title="">localName</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If both <var title="">namespaceURI</var> and <var title="">localName</var> are just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes.
 <li><p>Otherwise, if <var title="">namespaceURI</var> is just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes with the <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> equal to <var title="">localName</var>.
 <li><p>Otherwise, if <var title="">localName</var> is just the character U+002A ASTERISK ("*"), return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes with the <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> equal to <var title="">namespaceURI</var>.
 <li><p>Otherwise, return a <a href=#nodelist><code>NodeList</code></a> rooted at the <a href=#context-node>context node</a>, whose filter matches only <a href=#element><code>Element</code></a> nodes that have a <a href=#dom-node-namespaceuri><code title=dom-Node-namespaceURI>namespaceURI</code></a> equal to <var title="">namespaceURI</var> and a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a> equal to <var title="">localName</var> (both in a <a href=#case-sensitive>case-sensitive</a> manner).
</ol>
<p>A new <a href=#nodelist><code>NodeList</code></a> object must be returned each time.

<p>The <dfn id=dom-document-getelementbyid title=dom-Document-getElementById><code>getElementById(<var title="">elementId</var>)</code></dfn> method must return the first
<a href=#element><code>Element</code></a> node, in <a href=#tree-order>tree order</a>, in the <a href=#context-node>context
node</a> whose <a href=#concept-id title=concept-ID>ID</a> is <var title="">elementId</var>, or null if there is none.

<hr>

<p>The <dfn id=dom-document-importnode title=dom-Document-importNode><code>importNode(<var title="">importedNode</var>, <var title="">deep</var>)</code></dfn> method must run
the following steps:
<ol>
 <!-- Similar text for adoptNode -->
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#xml-document>XML document</a>, then
 if <var title="">importedNode</var> or any of its descendant nodes or any of its
 <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> or any of the <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> of any descendant
 <a href=#element><code>Element</code></a> nodes has a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML or contains a U+003A COLON
 (":") character, raise an <a href=#dom-domexception-invalid_state_err><code title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code></a> and abort
 these steps.

 <!--<li><p>If <var title>importedNode</var>'s <code
 title=dom-Node-ownerDocument>ownerDocument</code>'s <span>effective script
 origin</span> is not the <span title=same-origin
 data-anolis-spec=html>same</span> as the <span data-anolis-spec=html>effective
 script origin</span> of the <span>context node</span>, raise a <code
 title=dom-DOMException-SECURITY_ERR>SECURITY_ERR</code> exception and abort
 these steps. (can't get a reference to a node that you can't adopt anyway) -->

 <li><p>Return a <a href=#clone>clone</a> of <var title="">importedNode</var>, with <var title="">new ownerDocument</var> being the <a href=#context-node>context node</a>, and the <var title="">clone children</var> flag set if <var title="">deep</var> is true.
</ol>

<p>The <dfn id=dom-document-adoptnode title=dom-Document-adoptNode><code>adoptNode(<var title="">source</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var title="">source</var> is a <a href=#document><code>Document</code></a> node or a
 <a href=#documenttype><code>DocumentType</code></a> node, raise a <a href=#dom-domexception-not_supported_err><code title=dom-DOMException-NOT_SUPPORTED_ERR>NOT_SUPPORTED_ERR</code></a> exception and
 abort these steps.

 <!-- Similar text for importNode -->
 <li><p>If the <a href=#context-node>context node</a> is an <a href=#xml-document>XML document</a>, then
 if <var title="">source</var> or any of its descendant nodes or any of its <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> or any of the <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> of any descendant
 <a href=#element><code>Element</code></a> nodes has a <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a><!-- or <code
 title=dom-Node-prefix>prefix</code>--> which either does not match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML or contains a U+003A COLON
 (":") character, raise an <a href=#dom-domexception-invalid_state_err><code title=dom-DOMException-INVALID_STATE_ERR>INVALID_STATE_ERR</code></a> and abort
 these steps.

 <li><p>If <var title="">source</var> is an <a href=#element><code>Element</code></a> node, it is
 <a href=#affected-by-a-base-url-change>affected by a base URL change</a>.

 <!-- no security check -->
 <li><p>If <var title="">source</var>'s <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a> is not null and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> isn't equal to the
 <a href=#context-node>context node</a>, remove <var title="">source</var> from its parent.

 <li><p>Set <var title="">source</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> to the <a href=#context-node>context
 node</a>.

 <li><p>If <var title="">source</var> is an <a href=#element><code>Element</code></a> node,
 set the <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> of all
 <a href=#attr><code>Attr</code></a> in its <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>
 to the <a href=#context-node>context node</a>.

 <li><p>For each child node of <var title="">source</var>, call <a href=#dom-document-adoptnode><code title=dom-Document-adoptNode>adoptNode</code></a> on the <a href=#context-node>context node</a>,
 with the child node as its argument.

 <li><p>Return <var title="">source</var>.
</ol>

<hr>

<p class=XXX><dfn id=dom-document-inputencoding title=dom-Document-inputEncoding>inputEncoding</dfn>

<p class=XXX><dfn id=dom-document-documenturi title=dom-Document-documentURI>documentURI</dfn>
Should document.documentURI really exist? be readonly?

<!-- <dfn title=dom-Document-xmlVersion>xmlVersion</dfn>
http://lists.w3.org/Archives/Public/www-dom/2003JulSep/0049.html -->


<h3 id=interface-attr><span class=secno>4.4 </span>Interface <a href=#attr><code>Attr</code></a></h3>
<pre class=idl>interface <dfn id=attr>Attr</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-attr-name title=dom-Attr-name>name</a>;
  readonly attribute boolean <a href=#dom-attr-specified title=dom-Attr-specified>specified</a>;
           attribute DOMString <a href=#dom-attr-value title=dom-Attr-value>value</a>;
  readonly attribute <a href=#element>Element</a> <a href=#dom-attr-ownerelement title=dom-Attr-ownerElement>ownerElement</a>;<!--
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;-->
};</pre>

<p><a href=#attr><code>Attr</code></a> nodes represent attributes. They have a <dfn id=concept-attribute-name title=concept-attribute-name>name</dfn> and an <dfn id=concept-attribute-element title=concept-attribute-element>element</dfn> associated with them when they are
created<!--, or when they are passed as the argument to the <code
title=dom-Element-setAttributeNode>setAttributeNode</code> method.
[createAttribute]-->. <a href=#attr><code>Attr</code></a> nodes are not considered part of the
document tree, so their <a href=#dom-node-parentnode><code title=dom-Node-parentNode>parentNode</code></a>, <a href=#dom-node-previoussibling><code title=dom-Node-previousSibling>previousSibling</code></a> and <a href=#dom-node-nextsibling><code title=dom-Node-nextSibling>nextSibling</code></a> attributes return null. Also, its
child nodes can not be manipulated directly through the <a href=#dom-node-insertbefore><code title=dom-Node-insertBefore>insertBefore</code></a>, <a href=#dom-node-replacechild><code title=dom-Node-replaceChild>replaceChild</code></a> and <a href=#dom-node-appendchild><code title=dom-Node-appendChild>appendChild</code></a> methods.

<p>The <dfn id=dom-attr-name title=dom-Attr-name><code>name</code></dfn> attribute must return
the <a href=#concept-attribute-name title=concept-attribute-name>name</a> associated with the
<a href=#context-node>context node</a>.

<p>The <dfn id=dom-attr-specified title=dom-Attr-specified><code>specified</code></dfn> attribute must
return true.

<p>The <dfn id=dom-attr-value title=dom-Attr-value><code>value</code></dfn> attribute, on getting,
must return the same value as the <a href=#dom-node-textcontent><code title=dom-Node-textContent>textContent</code></a> IDL attribute on the
<a href=#context-node>context node</a>, and on setting, must act as if the <a href=#dom-node-textcontent><code title=dom-Node-textContent>textContent</code></a> IDL attribute on the
<a href=#context-node>context node</a> had been set to the new value.

<p>The <dfn id=dom-attr-ownerelement title=dom-Attr-ownerElement><code>ownerElement</code></dfn>
attribute must return the <a href=#concept-attribute-element title=concept-attribute-element>element</a>
associated with the <a href=#context-node>context node</a><!--, if there is one, or null
otherwise [createAttribute]-->.


<h3 id=interface-element><span class=secno>4.5 </span>Interface <a href=#element><code>Element</code></a></h3>
<pre class=idl>interface <dfn id=element>Element</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-element-tagname title=dom-Element-tagName>tagName</a>;
  DOMString? <a href=#dom-element-getattribute title=dom-Element-getAttribute>getAttribute</a>(in DOMString <var title="">name</var>);
  void <a href=#dom-element-setattribute title=dom-Element-setAttribute>setAttribute</a>(in DOMString <var title="">name</var>, in DOMString <var title="">value</var>);
  void <a href=#dom-element-removeattribute title=dom-Element-removeAttribute>removeAttribute</a>(in DOMString name);<!--
  Attr <span title=dom-Element-getAttributeNode>getAttributeNode</span>(in DOMString name);
  Attr <span title=dom-Element-setAttributeNode>setAttributeNode</span>(in Attr newAttr);
  Attr <span title=dom-Element-removeAttributeNode>removeAttributeNode</span>(in Attr oldAttr);-->
  <a href=#nodelist>NodeList</a> <a href=#dom-element-getelementsbytagname title=dom-Element-getElementsByTagName>getElementsByTagName</a>(in DOMString name);
  DOMString? <a href=#dom-element-getattributens title=dom-Element-getAttributeNS>getAttributeNS</a>(in DOMString namespaceURI, in DOMString localName);
  void <a href=#dom-element-setattributens title=dom-Element-setAttributeNS>setAttributeNS</a>(in DOMString namespaceURI, in DOMString qualifiedName, in DOMString value);
  void <a href=#dom-element-removeattributens title=dom-Element-removeAttributeNS>removeAttributeNS</a>(in DOMString namespaceURI, in DOMString localName);<!--
  Attr <span title=dom-Element-getAttributeNodeNS>getAttributeNodeNS</span>(in DOMString namespaceURI, in DOMString localName);
  Attr getAttributeNodeNS(in DOMString namespaceURI, in DOMString localName);-->
  <a href=#nodelist>NodeList</a> <a href=#dom-element-getelementsbytagnamens title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</a>(in DOMString namespaceURI, in DOMString localName);
  boolean <a href=#dom-element-hasattribute title=dom-Element-hasAttribute>hasAttribute</a>(in DOMString name);
  boolean <a href=#dom-element-hasattributens title=dom-Element-hasAttributeNS>hasAttributeNS</a>(in DOMString namespaceURI, in DOMString localName);<!--
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(in DOMString name, in boolean isId);
  void setIdAttributeNS(in DOMString namespaceURI, in DOMString localName, in boolean isId);
  void setIdAttributeNode(in Attr idAttr, in boolean isId);-->
           attribute <a class=external href=http://www.whatwg.org/html/#htmlcollection>HTMLCollection</a> <a href=#dom-element-children title=dom-Element-children>children</a>;
};</pre>

<p><a href=#element><code>Element</code></a> nodes can have a <dfn id=concept-id title=concept-id>unique
identifier (ID)</dfn> associated with them. <a href=#concept-id title=concept-id>IDs</a>
must contain at least one character and must not contain any <a href=#space-character title="space character">space characters</a>. User agents must not associate
empty <a href=#concept-id title=concept-id>IDs</a> and <a href=#concept-id title=concept-id>IDs</a>
containing <a href=#space-character title="space character">space characters</a> with
<a href=#element><code>Element</code></a> nodes. Specifications may define how <a href=#concept-id title=concept-id>IDs</a> are associated with <a href=#element><code>Element</code></a> nodes.

<p class=note>For example, HTML elements can have an <a href=http://www.whatwg.org/html/#attr-id><code class=external title=attr-id>id</code></a> attribute specified, to specify its <a href=#concept-id title=concept-id>ID</a>.

<p>Specifications may define <dfn id=base-url-change-steps>base URL change steps</dfn>.

<p>When an <a href=#element><code>Element</code></a> node is <dfn id=affected-by-a-base-url-change>affected by a base URL
change</dfn>, the user agent must run the <a href=#base-url-change-steps>base URL change steps</a>, as
defined in <a href=#other-applicable-specifications>other applicable specifications</a>.

<p>The <dfn id=dom-element-tagname title=dom-Element-tagName><code>tagName</code></dfn> attribute must,
on getting, run the following steps:
<ol>
 <li><p>If the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a> is not null, let <var title="">tagName</var>
 be the concatenation of the <a href=#context-node>context node</a>'s <a href=#dom-node-prefix><code title=dom-Node-prefix>prefix</code></a>, a U+003E COLON (":") character and its
 <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>. Otherwise, let <var title="">tagName</var> be just the the <a href=#context-node>context node</a>'s <a href=#dom-node-localname><code title=dom-Node-localName>localName</code></a>.

 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, return <var title="">tagName</var>, <a href=#converted-to-uppercase>converted to
 uppercase</a>. Otherwise, return <var title="">tagName</var>.
</ol>

<p>The <dfn id=dom-element-getattribute title=dom-Element-getAttribute><code>getAttribute(<var title="">name</var>)</code></dfn> method must run the following steps:
<ol>
 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, let <var title="">name</var> be <var title="">name</var>,
 <a href=#converted-to-lowercase>converted to lowercase</a>.

 <li><p>Return the value of the first attribute in the <a href=#context-node>context
 node</a>'s <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals the first argument, in any
 namespace, if the attribute is present, or null otherwise.
</ol>

<p>The <dfn id=dom-element-setattribute title=dom-Element-setAttribute><code>setAttribute(<var title="">name</var>, <var title="">value</var>)</code></dfn> method must run the
following steps:

<ol>
 <li><p>If <var title="">name</var> is empty or <var title="">name</var> doesn't
 match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML, raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.

 <li><p>If the <a href=#context-node>context node</a> is in the <a href=#html-namespace>HTML namespace</a>
 and its <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is an
 <a href=#html-document>HTML document</a>, let <var title="">name</var> be <var title="">name</var>,
 <a href=#converted-to-lowercase>converted to lowercase</a>.

 <li><p>If the node doesn't have an attribute whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals <var title="">name</var>,
 create an <a href=#attr><code>Attr</code></a> node, with <var title="">name</var> as its <a href=#concept-attribute-name title=concept-attribute-name>name</a> and the <a href=#context-node>context node</a> as
 its <a href=#concept-attribute-element title=concept-attribute-element>element</a>. Set its <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> to <var title="">value</var>. Append this node
 to the <a href=#context-node title="context node">context node's</a> <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a>, as its last item.

 <li><p>Otherwise, set the <a href=#dom-attr-value><code title=dom-Attr-value>value</code></a> of the first
 attribute in the <a href=#context-node title="context node">context node's</a> <a href=#dom-node-attributes><code title=dom-Node-attributes>attributes</code></a> whose <a href=#concept-attribute-name title=concept-attribute-name>name</a> <a href=#case-sensitive title=case-sensitive>case-sensitively</a> equals <var title="">name</var>,
 in any namespace, to <var title="">value</var>.
</ol>

<p class=XXX><dfn id=dom-element-removeattribute title=dom-Element-removeAttribute>removeAttribute</dfn>

<!--<dfn title=dom-Element-getAttributeNode>getAttributeNode</dfn>: when the
Element.getAttributeNode() method is invoked on an HTML element, the name
argument must be converted to ASCII lowercase before the element's attributes
are examined. (In HTML documents.) -->

<!-- <dfn title=dom-Element-setAttributeNode>setAttributeNode</dfn>: when an
Attr node is set on an HTML element using Element.setAttributeNode(), it must
have its name converted to ASCII lowercase before the element is affected.
(In HTML documents.) -->

<p class=XXX><dfn id=dom-element-getelementsbytagname title=dom-Element-getElementsByTagName>getElementsByTagName</dfn>

<p class=XXX><dfn id=dom-element-getattributens title=dom-Element-getAttributeNS>getAttributeNS</dfn> (might return null; Gecko and WebKit don't)

<p class=XXX><dfn id=dom-element-setattributens title=dom-Element-setAttributeNS>setAttributeNS</dfn>

<p class=XXX><dfn id=dom-element-removeattributens title=dom-Element-removeAttributeNS>removeAttributeNS</dfn>

<p class=XXX><dfn id=dom-element-getelementsbytagnamens title=dom-Element-getElementsByTagNameNS>getElementsByTagNameNS</dfn>

<p class=XXX><dfn id=dom-element-hasattribute title=dom-Element-hasAttribute>hasAttribute</dfn>

<p class=XXX><dfn id=dom-element-hasattributens title=dom-Element-hasAttributeNS>hasAttributeNS</dfn>

<p>The <dfn id=dom-element-children title=dom-Element-children><code>children</code></dfn> attribute
must return an <a href=http://www.whatwg.org/html/#htmlcollection><code class=external>HTMLCollection</code></a> <a class=external href=http://www.whatwg.org/html/#collections title=collections>collection</a>, whose filter matches
only <a href=#element><code>Element</code></a> nodes in the <a href=#context-node>context node</a>'s <a href=#dom-node-childnodes><code title=dom-Node-childNodes>childNodes</code></a>. <span class=XXX>Or a
<a href=#nodelist><code>NodeList</code></a>?</span> 


<h3 id=interface-documenttype><span class=secno>4.6 </span>Interface <a href=#documenttype><code>DocumentType</code></a></h3>
<pre class=idl>interface <dfn id=documenttype>DocumentType</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-documenttype-name title=dom-DocumentType-name>name</a>;<!--
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;-->
  readonly attribute DOMString <a href=#dom-documenttype-publicid title=dom-DocumentType-publicId>publicId</a>;
  readonly attribute DOMString <a href=#dom-documenttype-systemid title=dom-DocumentType-systemId>systemId</a>;<!--
  readonly attribute DOMString internalSubset;-->
};</pre>

<p class=XXX><dfn id=dom-documenttype-name title=dom-DocumentType-name>name</dfn>

<p class=XXX><dfn id=dom-documenttype-publicid title=dom-DocumentType-publicId>publicId</dfn>

<p class=XXX><dfn id=dom-documenttype-systemid title=dom-DocumentType-systemId>systemId</dfn>


<h3 id=interface-processinginstruction><span class=secno>4.7 </span>Interface <a href=#processinginstruction><code>ProcessingInstruction</code></a></h3>
<pre class=idl>interface <dfn id=processinginstruction>ProcessingInstruction</dfn> : <a href=#node>Node</a> {
  readonly attribute DOMString <a href=#dom-processinginstruction-target title=dom-ProcessingInstruction-target>target</a>;
           attribute DOMString <a href=#dom-processinginstruction-data title=dom-ProcessingInstruction-data>data</a>;
};</pre>

<p class=XXX><dfn id=dom-processinginstruction-target title=dom-ProcessingInstruction-target>target</dfn>

<p class=XXX><dfn id=dom-processinginstruction-data title=dom-ProcessingInstruction-data>data</dfn>


<h3 id=interface-characterdata><span class=secno>4.8 </span>Interface <a href=#characterdata><code>CharacterData</code></a></h3>
<pre class=idl>interface <dfn id=characterdata>CharacterData</dfn> : <a href=#node>Node</a> {
  [TreatNullAs=EmptyString] attribute DOMString <a href=#dom-characterdata-data title=dom-CharacterData-data>data</a>;
  readonly attribute unsigned long <a href=#dom-characterdata-length title=dom-CharacterData-length>length</a>;
  DOMString <a href=#dom-characterdata-substringdata title=dom-CharacterData-substringData>substringData</a>(in unsigned long offset, in unsigned long count);
  void <a href=#dom-characterdata-appenddata title=dom-CharacterData-appendData>appendData</a>(in DOMString arg);
  void <a href=#dom-characterdata-insertdata title=dom-CharacterData-insertData>insertData</a>(in unsigned long offset, in DOMString arg);
  void <a href=#dom-characterdata-deletedata title=dom-CharacterData-deleteData>deleteData</a>(in unsigned long offset, in unsigned long count);
  void <a href=#dom-characterdata-replacedata title=dom-CharacterData-replaceData>replaceData</a>(in unsigned long offset, in unsigned long count, in DOMString arg);
};</pre>

<p>The <dfn id=dom-characterdata-data title=dom-CharacterData-data><code>data</code></dfn> attribute must, on getting, return the data of the node, and on setting, must change the node's data to the new value.

<p>The <dfn id=dom-characterdata-length title=dom-CharacterData-length><code>length</code></dfn> attribute must, on getting, return the number of UTF-16 code units represented by the node's data.

<p>The <dfn id=dom-characterdata-substringdata title=dom-CharacterData-substringData><code>substringData(<var title="">offset</var>, <var title="">count</var>)</code></dfn> method must run the
following steps:

<ol>
 <li><p>If <var title="">offset</var> is negative or is greater than the
 <a href=#context-node>context node</a>'s <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>,
 or if <var title="">count</var> is negative, raise an <a href=#dom-domexception-index_size_err><code title=dom-DOMException-INDEX_SIZE_ERR>INDEX_SIZE_ERR</code></a> exception and abort
 these steps.

 <li><p>If <span title=""><var title="">offset</var>+<var title="">count</var></span> is
 greater than the <a href=#context-node>context node</a>'s <a href=#dom-characterdata-length><code title=dom-CharacterData-length>length</code></a>, return a <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString><code class=external>DOMString</code></a> whose value is the UTF-16 code units
 from the <var title="">offset</var>th UTF-16 code unit to the end of <var title="">data</var>.

 <li><p>Return a <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString><code class=external>DOMString</code></a> whose value is
 the UTF-16 code units from the <var title="">offset</var>th UTF-16 code unit to
 the <span title=""><var title="">offset</var>+<var title="">count</var></span>th UTF-16
 code unit in <var title="">data</var>.
</ol>

<p class=XXX><dfn id=dom-characterdata-appenddata title=dom-CharacterData-appendData>appendData</dfn>

<p class=XXX><dfn id=dom-characterdata-insertdata title=dom-CharacterData-insertData>insertData</dfn>

<p class=XXX><dfn id=dom-characterdata-deletedata title=dom-CharacterData-deleteData>deleteData</dfn>

<p class=XXX><dfn id=dom-characterdata-replacedata title=dom-CharacterData-replaceData>replaceData</dfn>


<h3 id=interface-text><span class=secno>4.9 </span>Interface <a href=#text><code>Text</code></a></h3>
<pre class=idl>interface <dfn id=text>Text</dfn> : <a href=#characterdata>CharacterData</a> {
  <a href=#text>Text</a> <a href=#dom-text-splittext title=dom-Text-splitText>splitText</a>(in unsigned long offset);<!--
  readonly attribute boolean isElementContentWhitespace;-->
  readonly attribute DOMString <a href=#dom-text-wholetext title=dom-Text-wholeText>wholeText</a>;
  <a href=#text>Text</a> <a href=#dom-text-replacewholetext title=dom-Text-replaceWholeText>replaceWholeText</a>(in DOMString content);
};</pre>

<p class=XXX><dfn id=dom-text-splittext title=dom-Text-splitText>splitText</dfn>

<p class=XXX><dfn id=dom-text-wholetext title=dom-Text-wholeText>wholeText</dfn>

<p class=XXX><dfn id=dom-text-replacewholetext title=dom-Text-replaceWholeText>replaceWholeText</dfn>


<h3 id=interface-comment><span class=secno>4.10 </span>Interface <a href=#comment><code>Comment</code></a></h3>
<pre class=idl>interface <dfn id=comment>Comment</dfn> : <a href=#characterdata>CharacterData</a> {
};</pre>



<h2 id=interfaces><span class=secno>5 </span>Interfaces</h2>
<h3 id=interface-domimplementation><span class=secno>5.1 </span>Interface <a href=#domimplementation><code>DOMImplementation</code></a></h3>
<p>User agents must create a new <a href=#domimplementation><code>DOMImplementation</code></a> object whenever a new <a href=#document><code>Document</code></a> node is created and associate it with the that <a href=#document><code>Document</code></a> node.

<pre class=idl>interface <dfn id=domimplementation>DOMImplementation</dfn> {
  boolean <a href=#dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature>hasFeature</a>(in DOMString feature, [TreatNullAs=EmptyString] in DOMString version);
  <a href=#documenttype>DocumentType</a> <a href=#dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType>createDocumentType</a>([TreatNullAs=EmptyString] in DOMString qualifiedName, in DOMString publicId, in DOMString systemId);
  <a href=#document>Document</a> <a href=#dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument>createDocument</a>([TreatNullAs=EmptyString] in DOMString namespaceURI, [TreatNullAs=EmptyString] in DOMString qualifiedName, in DocumentType doctype);<!--
  DOMObject getFeature(in DOMString feature, in DOMString version);-->
  <a href=#document>Document</a> <a href=#dom-domimplementation-createhtmldocument title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</a>(in DOMString title);
};</pre>

<p>The <dfn id=dom-domimplementation-hasfeature title=dom-DOMImplementation-hasFeature><code>hasFeature(<var title="">feature</var>, <var title="">version</var>)</code></dfn> method must return true if the UA supports the given feature <var title="">feature</var> of version <var title="">version</var>, and false otherwise.

<p>The <dfn id=dom-domimplementation-createdocumenttype title=dom-DOMImplementation-createDocumentType><code>createDocumentType(<var title="">qualifiedName</var>, <var title="">publicId</var>, <var title="">systemId</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>If <var title="">qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml/#NT-Name><code class=external>Name</code></a> production in XML, raise an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a>
 exception and abort these steps.
 <li><p>If <var title="">qualifiedName</var> doesn't match the <a href=http://www.w3.org/TR/xml-names/#NT-NCName><code class=external>NCName</code></a> production in Namespaces in XML, raise a
 <a href=#dom-domexception-namespace_err><code title=dom-DOMException-NAMESPACE_ERR>NAMESPACE_ERR</code></a> exception and
 abort these steps.
 <!--<li><p>If <var title>publicId</var> contains a character that doesn't match the <code data-anolis-spec=xml>PubidChar</code> production in XML, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps. --> <!-- DOM3 didn't check this -->
 <!--<li><p>If <var title>systemId</var> contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE ("'") character, raise an <code title=dom-DOMException-INVALID_CHARACTER_ERR title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code> exception and abort these steps.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <a href=#documenttype><code>DocumentType</code></a> node with <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> set to null, <a href=#dom-documenttype-name><code title=dom-DocumentType-name>name</code></a> set to <var title="">qualifiedName</var>, <a href=#dom-documenttype-publicid><code title=dom-DocumentType-publicId>publicId</code></a> set to <var title="">publicId</var>, and <a href=#dom-documenttype-systemid><code title=dom-DocumentType-systemId>systemId</code></a> set to <var title="">systemId</var>.
</ol>
<p class=note>No check is performed that the <var title="">publicId</var> matches the <code title="">PublicChar</code> production in XML or that the <var title="">systemId</var> doesn't contain both a quotation mark (") and an apostrophe (').

<p>The <dfn id=dom-domimplementation-createdocument title=dom-DOMImplementation-createDocument><code>createDocument(<var title="">namespaceURI</var>, <var title="">qualifiedName</var>, <var title="">doctype</var>)</code></dfn> method must run the following steps:

<ol>
 <li><p>Let <var title="">document</var> be a new <a href=#document><code>Document</code></a> node.
 <li><p>Let <var title="">element</var> be null.
 <li><p>If <var title="">qualifiedName</var> is not the empty string, set <var title="">element</var> to the result of invoking the <a href=#dom-document-createelementns><code title=dom-Document-createElementNS>createElementNS</code></a> method with the arguments <var title="">namespaceURI</var> and <var title="">qualifiedName</var> on <var title="">document</var>. If that raised an exception, re-raise the same exception and abort these steps.
 <li>
  <p>If <var title="">doctype</var> is not null, run the following substeps:
  <ol>
   <li><p>If the <var title="">doctype</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> is not null, raise a <a href=#dom-domexception-wrong_document_err><code title=dom-DOMException-WRONG_DOCUMENT_ERR>WRONG_DOCUMENT_ERR</code></a> exception and abort the overall set of steps.
   <li><p>Set the <var title="">doctype</var>'s <a href=#dom-node-ownerdocument><code title=dom-Node-ownerDocument>ownerDocument</code></a> to <var title="">document</var>.
   <li><p>Append <var title="">doctype</var> to <var title="">document</var>.
  </ol>
 <li><p>If <var title="">element</var> is not null, append <var title="">element</var> to <var title="">document</var>.
 <li><p>Return <var title="">document</var>.
</ol>

<p class=XXX>exceptions for createDocument <a href=http://osdir.com/ml/web.dom.general/2005-12/msg00058.html>http://osdir.com/ml/web.dom.general/2005-12/msg00058.html</a>

<p><a href=#html-document title="HTML document">HTML documents</a> can be created using the
<a href=#dom-domimplementation-createhtmldocument><code title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument()</code></a>
method.

<dl class=domintro>
 <dt><var title="">doc</var> = <a href=http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document><var class=external title=dom-Window-document>document</var></a> . <a href=#dom-document-implementation><code title=dom-Document-implementation>implementation</code></a> . <a href=#dom-domimplementation-createhtmldocument><code title=dom-DOMImplementation-createHTMLDocument>createHTMLDocument</code></a>(
 <var title="">title</var> )

 <dd><p>Returns a new <a href=#document><code>Document</code></a>, with a basic DOM already
 constructed with an appropriate <code title="">title</code> element.
</dl>

<p>The <dfn id=dom-domimplementation-createhtmldocument title=dom-DOMImplementation-createHTMLDocument><code>createHTMLDocument(<var title="">title</var>)</code></dfn> method, when invoked, must run the following
steps:

<ol>
 <li><p>Let <var title="">doc</var> be a newly created <a href=#document><code>Document</code></a>
 object.

 <li><p>Mark <var title="">doc</var> as being an <a href=#html-document>HTML document</a>.

 <li><p>Create a <a href=#documenttype><code>DocumentType</code></a> node with the <a href=#dom-documenttype-name><code title=dom-DocumentType-name>name</code></a> attribute set to the string "<code title="">html</code>", and the other attributes specific to
 <a href=#documenttype><code>DocumentType</code></a> objects set to the empty string, null, and empty
 lists, as appropriate. Append the newly created node to <var title="">doc</var>.

 <li><p>Create an <code title="">html</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to <var title="">doc</var>.

 <li><p>Create a <code title="">head</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">html</code> element created
 in the previous step.

 <li><p>Create a <code title="">title</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">head</code> element created
 in the previous step.

 <li><p>Create a <a href=#text><code>Text</code></a> node, and set its <a href=#dom-characterdata-data><code title=dom-CharacterData-data>data</code></a> attribute to the string given by the
 method's argument (which could be the empty string). Append it to the
 <code title="">title</code> element created in the previous step.

 <li><p>Create a <code title="">body</code> element in the <a href=#html-namespace>HTML
 namespace</a>, and append it to the <code title="">html</code> element created
 in the earlier step.

 <li><p>Return <var title="">doc</var>.</li>
</ol>


<h3 id=interface-nodelist><span class=secno>5.2 </span>Interface <a href=#nodelist><code>NodeList</code></a></h3>
<p>A <a href=#nodelist><code>NodeList</code></a> is a <a class=external href=http://www.whatwg.org/html/#collections title=collections>collection</a>, except that <a href=#nodelist><code>NodeList</code></a>s can be static (as opposed to live) if a specification defines them to be static.

<pre class=idl>interface <dfn id=nodelist>NodeList</dfn> {
  getter <a href=#node>Node</a> <a href=#dom-nodelist-item title=dom-NodeList-item>item</a>(in unsigned long index);
  readonly attribute unsigned long <a href=#dom-nodelist-length title=dom-NodeList-length>length</a>;
};</pre>

<p>The <dfn id=dom-nodelist-item title=dom-NodeList-item><code>item(<var title="">index</var>)</code></dfn> method must return the <var title="">index</var>th
node in the collection. If there is no <var title="">index</var>th node in the
collection, then the method must return null.

<p>The <dfn id=dom-nodelist-length title=dom-NodeList-length><code>length</code></dfn> attribute must, on getting, return the number of nodes <a class=external href=http://www.whatwg.org/html/#represented-by-the-collection>represented by the collection</a>.

<p><a href=#nodelist><code>NodeList</code></a>s are enumerable. <span class=XXX>Explain?</span>


<h3 id=interface-namednodemap><span class=secno>5.3 </span>Interface <a href=#namednodemap><code>NamedNodeMap</code></a></h3>
<pre class=idl>interface <dfn id=namednodemap>NamedNodeMap</dfn> {
  <a href=#node>Node</a> <a href=#dom-namednodemap-getnameditem title=dom-NamedNodeMap-getNamedItem>getNamedItem</a>(in DOMString name);
  <a href=#node>Node</a> <a href=#dom-namednodemap-setnameditem title=dom-NamedNodeMap-setNamedItem>setNamedItem</a>(in <a href=#node>Node</a> arg);
  <a href=#node>Node</a> <a href=#dom-namednodemap-removenameditem title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</a>(in DOMString name);
  <a href=#node>Node</a> <a href=#dom-namednodemap-item title=dom-NamedNodeMap-item>item</a>(in unsigned long index);
  readonly attribute unsigned long <a href=#dom-namednodemap-length title=dom-NamedNodeMap-length>length</a>;
  <a href=#node>Node</a> <a href=#dom-namednodemap-getnameditemns title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</a>(in DOMString namespaceURI, in DOMString localName);
  <a href=#node>Node</a> <a href=#dom-namednodemap-setnameditemns title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</a>(in <a href=#node>Node</a> arg);
  <a href=#node>Node</a> <a href=#dom-namednodemap-removenameditemns title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</a>(in DOMString namespaceURI, in DOMString localName);
};</pre>

<p>The <a href=#namednodemap><code>NamedNodeMap</code></a> interface represents an ordered set of nodes.

<p class=XXX><dfn id=dom-namednodemap-getnameditem title=dom-NamedNodeMap-getNamedItem>getNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-setnameditem title=dom-NamedNodeMap-setNamedItem>setNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-removenameditem title=dom-NamedNodeMap-removeNamedItem>removeNamedItem</dfn>

<p class=XXX><dfn id=dom-namednodemap-item title=dom-NamedNodeMap-item>item</dfn>

<p class=XXX><dfn id=dom-namednodemap-length title=dom-NamedNodeMap-length>length</dfn>
(attributes.length should always return the length.)

<p class=XXX><dfn id=dom-namednodemap-getnameditemns title=dom-NamedNodeMap-getNamedItemNS>getNamedItemNS</dfn>

<p class=XXX><dfn id=dom-namednodemap-setnameditemns title=dom-NamedNodeMap-setNamedItemNS>setNamedItemNS</dfn>

<p class=XXX><dfn id=dom-namednodemap-removenameditemns title=dom-NamedNodeMap-removeNamedItemNS>removeNamedItemNS</dfn>


<h3 id=interface-domstringlist><span class=secno>5.4 </span>Interface <a href=#domstringlist><code>DOMStringList</code></a></h3>
<pre class=idl>interface <dfn id=domstringlist>DOMStringList</dfn> {
  DOMString <a href=#dom-domstringlist-item title=dom-DOMStringList-item>item</a>(in unsigned long index);
  readonly attribute unsigned long <a href=#dom-domstringlist-length title=dom-DOMStringList-length>length</a>;
  boolean <a href=#dom-domstringlist-contains title=dom-DOMStringList-contains>contains</a>(in DOMString str);
};</pre>

<p class=XXX><dfn id=dom-domstringlist-item title=dom-DOMStringList-item>item</dfn>

<p class=XXX><dfn id=dom-domstringlist-length title=dom-DOMStringList-length>length</dfn>

<p class=XXX><dfn id=dom-domstringlist-contains title=dom-DOMStringList-contains>contains</dfn>


<h3 id=interface-domtokenlist><span class=secno>5.5 </span>Interface <a href=#domtokenlist><code>DOMTokenList</code></a></h3>
<p>The <a href=#domtokenlist><code>DOMTokenList</code></a> interface represents an interface
to an underlying string that consists of a <a href=#set-of-space-separated-tokens>set of
space-separated tokens</a>.</p>

<p class=note><a href=#domtokenlist><code>DOMTokenList</code></a> objects are always
<a href=#case-sensitive>case-sensitive</a>, even when the underlying string might
ordinarily be treated in a case-insensitive manner.</p>

<pre class=idl>interface <dfn id=domtokenlist>DOMTokenList</dfn> {
  readonly attribute unsigned long <a href=#dom-domtokenlist-length title=dom-DOMTokenList-length>length</a>;
  getter DOMString <a href=#dom-domtokenlist-item title=dom-DOMTokenList-item>item</a>(in unsigned long index);
  boolean <a href=#dom-domtokenlist-contains title=dom-DOMTokenList-contains>contains</a>(in DOMString token);
  void <a href=#dom-domtokenlist-add title=dom-DOMTokenList-add>add</a>(in DOMString token);
  void <a href=#dom-domtokenlist-remove title=dom-DOMTokenList-remove>remove</a>(in DOMString token);
  boolean <a href=#dom-domtokenlist-toggle title=dom-DOMTokenList-toggle>toggle</a>(in DOMString token);
  <a href=#dom-domtokenlist-tostring title=dom-DOMTokenList-toString>stringifier</a> DOMString ();
};</pre>

<dl class=domintro>

 <dt><var title="">tokenlist</var> . <a href=#dom-domtokenlist-length><code title=dom-DOMTokenList-length>length</code></a></dt>
 <dd>
  <p>Returns the number of tokens in the string.</p>
 </dd>

 <dt><var title="">element</var> = <var title="">tokenlist</var> . <a href=#dom-domtokenlist-item><code title=dom-DOMTokenList-item>item</code></a>(<var title="">index</var>)</dt>
 <dt><var title="">tokenlist</var>[<var title="">index</var>]</dt>
 <dd>
  <p>Returns the token with index <var title="">index</var>. The tokens are returned in the order they are found in the underlying string.</p>
  <p>Returns null if <var title="">index</var> is out of range.</p>
 </dd>

 <dt><var title="">hastoken</var> = <var title="">tokenlist</var> . <a href=#dom-domtokenlist-contains><code title=dom-DOMTokenList-contains>contains</code></a>(<var title="">token</var>)</dt>
 <dd>
  <p>Returns true if the <var title="">token</var> is present; false otherwise.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var title="">token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var title="">token</var> contains any spaces.</p>
 </dd>

 <dt><var title="">tokenlist</var> . <a href=#dom-domtokenlist-add><code title=dom-DOMTokenList-add>add</code></a>(<var title="">token</var>)</dt>
 <dd>
  <p>Adds <var title="">token</var>, unless it is already present.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var title="">token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var title="">token</var> contains any spaces.</p>
 </dd>

 <dt><var title="">tokenlist</var> . <a href=#dom-domtokenlist-remove><code title=dom-DOMTokenList-remove>remove</code></a>(<var title="">token</var>)</dt>
 <dd>
  <p>Removes <var title="">token</var> if it is present.</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var title="">token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var title="">token</var> contains any spaces.</p>
 </dd>

 <dt><var title="">hastoken</var> = <var title="">tokenlist</var> . <a href=#dom-domtokenlist-toggle><code title=dom-DOMTokenList-toggle>toggle</code></a>(<var title="">token</var>)</dt>
 <dd>
  <p>Adds <var title="">token</var> if it is not present, or removes
  it if it is. Returns true if <var title="">token</var> is now
  present (it was added); returns false if it is not (it was
  removed).</p>
  <p>Throws a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception if <var title="">token</var> is empty.</p>
  <p>Throws an <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception if <var title="">token</var> contains any spaces.</p>
 </dd>

</dl>

<div class=impl>

<p>The <dfn id=dom-domtokenlist-length title=dom-DOMTokenList-length><code>length</code></dfn>
attribute must return the number of tokens that result from <a href=#split-a-string-on-spaces title="split a string on spaces">splitting the underlying string on
spaces</a>. This is the <a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a>.</p>

<p>The object's <a class=external href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property
indices</a> are the numbers in the range zero to <span title=""><a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a>&minus;1</span>, unless the <a href=#dom-domtokenlist-length><var title=dom-DOMTokenList-length>length</var></a> is zero, in which case there are no
<a class=external href=http://dev.w3.org/2006/webapi/WebIDL/#dfn-supported-property-indices>supported property indices</a>.</p>

<p>The <dfn id=dom-domtokenlist-item title=dom-DOMTokenList-item><code>item(<var title="">index</var>)</code></dfn> method must <a href=#split-a-string-on-spaces title="split a
string on spaces">split the underlying string on spaces</a>,
preserving the order of the tokens as found in the underlying
string, and then return the <var title="">index</var>th item in this
list. If <var title="">index</var> is equal to or greater than the
number of tokens, then the method must return null.</p>

<p class=example>For example, if the string is "<code title="">a b
a c</code>" then there are four tokens: the token with index 0 is
"<code title="">a</code>", the token with index 1 is "<code title="">b</code>", the token with index 2 is "<code title="">a</code>", and the token with index 3 is "<code title="">c</code>".</p>

<p>The <dfn id=dom-domtokenlist-contains title=dom-DOMTokenList-contains><code>contains(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title="">token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var title="">token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the token indicated by <var title="">token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 object's underlying string then return true and stop this
 algorithm.</li>

 <li>Otherwise, return false.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-add title=dom-DOMTokenList-add><code>add(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title="">token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var title="">token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var title="">token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string then stop the
 algorithm.</li>

 <li>Otherwise, if the <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying
 string is not the empty string and the last character of that
 string is not a <a href=#space-character>space character</a>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var title="">token</var> to the end of the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-remove title=dom-DOMTokenList-remove><code>remove(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title="">token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var title="">token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#remove-a-token-from-a-string title="remove a token from a string">remove
 the given <var title="">token</var> from the underlying
 string</a>.</li>

</ol>

<p>The <dfn id=dom-domtokenlist-toggle title=dom-DOMTokenList-toggle><code>toggle(<var title="">token</var>)</code></dfn> method must run the following
algorithm:</p>

<ol>

 <li>If the <var title="">token</var> argument is the empty string,
 then raise a <a href=#dom-domexception-syntax_err><code title=dom-DOMException-SYNTAX_ERR>SYNTAX_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>If the <var title="">token</var> argument contains any <a href=#space-character title="space character">space characters</a>, then raise an
 <a href=#dom-domexception-invalid_character_err><code title=dom-DOMException-INVALID_CHARACTER_ERR>INVALID_CHARACTER_ERR</code></a> exception and stop the
 algorithm.</li>

 <li>Otherwise, <a href=#split-a-string-on-spaces title="split a string on spaces">split the
 underlying string on spaces</a> to get the list of tokens in the
 object's underlying string.</li>

 <li>If the given <var title="">token</var> is a
 <a href=#case-sensitive>case-sensitive</a> match for one of the tokens in the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string then <a href=#remove-a-token-from-a-string title="remove a token from a string">remove the given <var title="">token</var> from the underlying string</a> and stop the
 algorithm, returning false.</li>

 <li>Otherwise, if the <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying
 string is not the empty string and the last character of that
 string is not a <a href=#space-character>space character</a>, then append a U+0020
 SPACE character to the end of that string.</li>

 <li>Append the value of <var title="">token</var> to the end of the
 <a href=#domtokenlist><code>DOMTokenList</code></a> object's underlying string.</li>

 <li>Return true.</li>

</ol>

<p>Objects implementing the <a href=#domtokenlist><code>DOMTokenList</code></a> interface must
<dfn id=dom-domtokenlist-tostring title=dom-DOMTokenList-toString>stringify</dfn> to the object's
underlying string representation.</p>

</div>


<h3 id=interface-domsettabletokenlist><span class=secno>5.6 </span>Interface <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a></h3>

<p>The <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a> interface is the same as the
<a href=#domtokenlist><code>DOMTokenList</code></a> interface, except that it allows the
underlying string to be directly changed.</p>

<pre class=idl>interface <dfn id=domsettabletokenlist>DOMSettableTokenList</dfn> : <a href=#domtokenlist>DOMTokenList</a> {
            attribute DOMString <a href=#dom-domsettabletokenlist-value title=dom-DOMSettableTokenList-value>value</a>;
};</pre>

<dl class=domintro>

 <dt><var title="">tokenlist</var> . <a href=#dom-domsettabletokenlist-value><code title=dom-DOMSettableTokenList-value>value</code></a></dt>
 <dd>
  <p>Returns the underlying string.</p>
  <p>Can be set, to change the underlying string.</p>
 </dd>

</dl>

<div class=impl>

<p>An object implementing the <a href=#domsettabletokenlist><code>DOMSettableTokenList</code></a>
interface must act as defined for the <a href=#domtokenlist><code>DOMTokenList</code></a>
interface, except for the <a href=#dom-domsettabletokenlist-value><code title=dom-DOMSettableTokenList-value>value</code></a> attribute defined
here.</p>

<p>The <dfn id=dom-domsettabletokenlist-value title=dom-DOMSettableTokenList-value><code>value</code></dfn>
attribute must return the underlying string on getting, and must
replace the underlying string with the new value on setting.</p>

</div>



<h2 id=historical-interfaces><span class=secno>6 </span>Historical interfaces</h2>
<p>This specification does not define the following interfaces:
<ul class=brief>
 <li><dfn id=domuserdata><code>DOMUserData</code></dfn>
 <li><dfn id=domobject><code>DOMObject</code></dfn>
 <li><dfn id=namelist><code>NameList</code></dfn>
 <li><dfn id=domimplementationlist><code>DOMImplementationList</code></dfn>
 <li><dfn id=domimplementationsource><code>DOMImplementationSource</code></dfn>
 <li><dfn id=typeinfo><code>TypeInfo</code></dfn>
 <li><dfn id=userdatahandler><code>UserDataHandler</code></dfn>
 <li><dfn id=domerror><code>DOMError</code></dfn>
 <li><dfn id=domerrorhandler><code>DOMErrorHandler</code></dfn>
 <li><dfn id=domlocator><code>DOMLocator</code></dfn>
 <li><dfn id=domconfiguration><code>DOMConfiguration</code></dfn>
 <li><dfn id=cdatasection><code>CDATASection</code></dfn>
 <li><dfn id=notation><code>Notation</code></dfn>
 <li><dfn id=entity><code>Entity</code></dfn>
 <li><dfn id=entityreference><code>EntityReference</code></dfn>
</ul>



<h2 class=no-num id=references>References</h2><!--REFS-->
<p>All references are normative unless marked "Non-normative".</p>

<!-- Dates are only included for standards older than the Web,
because the newer ones keep changing. -->

<dl>
 <dt id=refsHTML>[HTML]</dt>
 <dd><cite><a href=http://www.whatwg.org/specs/web-apps/current-work/multipage>HTML</a></cite>,
 I. Hickson. WHATWG.</dd>

 <dt id=refsRFC2119>[RFC2119]</dt>
 <dd><cite><a href=http://www.ietf.org/rfc/rfc2119.txt>Key words for use in
 RFCs to Indicate Requirement Levels</a></cite>, S. Bradner. IETF.</dd>

 <dt id=refsWEBIDL>[WEBIDL]</dt>
 <!--
 <dd><cite><a href="http://www.w3.org/TR/WebIDL/">Web
 IDL</a></cite>, C. McCormack. W3C.</dd>
 -->
 <dd><cite><a href=http://dev.w3.org/2006/webapi/WebIDL/>Web
 IDL</a></cite>, C. McCormack. W3C.</dd>

 <dt id=refsXML>[XML]</dt>
 <dd><cite><a href=http://www.w3.org/TR/xml/>Extensible Markup
 Language</a></cite>, T. Bray, J. Paoli, C. Sperberg-McQueen,
 E. Maler, F. Yergeau. W3C.</dd>

 <dt id=refsXMLNS>[XMLNS]</dt>
 <dd><cite><a href=http://www.w3.org/TR/xml-names/>Namespaces in
 XML</a></cite>, T. Bray, D. Hollander, A. Layman, R. Tobin. W3C.</dd>
</dl>



<h2 class=no-num id=acknowledgements>Acknowledgements</h2>
<p>Thanks to

Anne van Kesteren,
Dethe Elza,
and
Henri Sivonen,

for their useful comments.

<p>Special thanks to Ian Hickson for first specifying some parts of this
specification in HTML. <a href=#refsHTML>[HTML]</a>


<script src=http://www.whatwg.org/specs/web-apps/current-work/dfn.js></script>
